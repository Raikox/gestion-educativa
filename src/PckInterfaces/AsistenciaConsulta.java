/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.AlumnoFichaInasistencia;
import PckNegocio.ClsAlumno;
import PckNegocio.ClsAsistencia;
import PckNegocio.ClsAsistenciaFiltro;
import PckRenderTabla.GeneralRender;
import PckRenderTabla.RenderPintarRojo;
import PckRenderTabla.RowHeaderRender;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Window;
import static java.awt.image.ImageObserver.WIDTH;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import mpsModel.MatriculaModelo;
import prymatricula.ClsMisc;
import prymatricula.ComponentPrintable;

/**
 *
 * @author Kevin
 */
public class AsistenciaConsulta extends javax.swing.JPanel {

    MatriculaModelo matriculaModelo = new MatriculaModelo();
    ClsAsistencia asistencia = new ClsAsistencia();
    ClsAsistenciaFiltro asistenciaFiltro = new ClsAsistenciaFiltro();
    ClsAlumno alumnos = new ClsAlumno();
    Connection con = null;
    
    ArrayList<Object> arrayIdPeriodoPeriodo = new ArrayList();
    ArrayList<Object> arrayIdPeriodo = new ArrayList();
    ArrayList<Object> arrayIdAula = new ArrayList();
    ArrayList<Object> arrayIdPeriodoMes = new ArrayList();
    ArrayList<Object> arrayIdAulaMes = new ArrayList();
    
    List<AlumnoFichaInasistencia> arrayAlumnoPeriodo = new ArrayList<>();
    List<AlumnoFichaInasistencia> arrayAsistenciaPeriodo = new ArrayList<>();
    
    List<AlumnoFichaInasistencia> arrayAlumno = new ArrayList<>();    
    List<AlumnoFichaInasistencia> arrayAsistencia = new ArrayList<>();    
    List<AlumnoFichaInasistencia> arrayAlumnoMes = new ArrayList<>();
    
    int idPeriodo;
    int idAula;
    int idPeriodoMes;
    int idAulaMes;
    int idPeriodoPeriodo;
    
    //dialogFicha
    String idFichaF;    
    
    Calendar calendario = Calendar.getInstance();
    Date abc = new Date();
    SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
           
    private boolean firstRun = false;
    
    /**
     * Creates new form AsistenciaConsulta
     */
    public AsistenciaConsulta() {
        initComponents();
        
        jdcFecha.setDate(abc);
        jdcFechaMes.setDate(abc);
        jdcFechaPeriodo.setDate(abc);
        
        arrayIdPeriodoPeriodo = matriculaModelo.MostrarComboPeriodos(cmbPeriodoPeriodo);        
        
        arrayIdPeriodo = matriculaModelo.MostrarComboPeriodos(cmbPeriodo);
        idPeriodo = (int) arrayIdPeriodo.get(cmbPeriodo.getSelectedIndex());
        arrayIdAula = matriculaModelo.MostrarComboAulasPeriodo(cmbAula, idPeriodo);
        
        //CargarTablaAsistencia();
                
        arrayIdPeriodoMes = matriculaModelo.MostrarComboPeriodos(cmbPeriodoMes);
        idPeriodoMes = (int) arrayIdPeriodo.get(cmbPeriodoMes.getSelectedIndex());
        arrayIdAulaMes = matriculaModelo.MostrarComboAulasPeriodo(cmbAulaMes, idPeriodoMes);
        
        //CargarTablaAsistenciaMes();
        
        firstRun = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlBot = new javax.swing.JPanel();
        tbpAsistencia = new javax.swing.JTabbedPane();
        pnlInasistencia = new javax.swing.JPanel();
        pnltop2 = new javax.swing.JPanel();
        cmbPeriodoPeriodo = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jdcFechaPeriodo = new com.toedter.calendar.JDateChooser();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel16 = new javax.swing.JLabel();
        pnlMid1 = new javax.swing.JPanel();
        pnlFicha1 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        txtTelefonoPeriodo = new javax.swing.JTextField();
        txtAlumno1 = new javax.swing.JLabel();
        txtMotivoPeriodo = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtContactoPeriodo = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtFechaRetornoPeriodo = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblInasistenciasPeriodo = new javax.swing.JTable();
        pnlAsistencia = new javax.swing.JPanel();
        pnltop = new javax.swing.JPanel();
        cmbPeriodo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cmbAula = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jdcFecha = new com.toedter.calendar.JDateChooser();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        pnlMid = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAsistencias = new javax.swing.JTable();
        pnlFicha = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtTelefono = new javax.swing.JTextField();
        txtAlumno = new javax.swing.JLabel();
        txtMotivo = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtContacto = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtFechaRetorno = new javax.swing.JTextField();
        pnlMes = new javax.swing.JPanel();
        pnltop1 = new javax.swing.JPanel();
        cmbPeriodoMes = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        cmbAulaMes = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jdcFechaMes = new com.toedter.calendar.JDateChooser();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        pnlCenter1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAsistenciaMes = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblResumenMes = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblResumenDia = new javax.swing.JTable();
        pnlBot1 = new javax.swing.JPanel();
        btnGenerarReporte = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(237, 240, 242));
        jPanel4.setPreferredSize(new java.awt.Dimension(911, 50));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(237, 240, 242));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        jLabel1.setText("CONSULTA ASISTENCIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        add(jPanel4, java.awt.BorderLayout.PAGE_START);

        pnlBot.setBackground(new java.awt.Color(237, 240, 242));
        pnlBot.setLayout(new java.awt.GridBagLayout());

        tbpAsistencia.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N

        pnlInasistencia.setBackground(new java.awt.Color(255, 255, 255));
        pnlInasistencia.setLayout(new java.awt.BorderLayout());

        pnltop2.setBackground(new java.awt.Color(255, 255, 255));
        pnltop2.setLayout(new java.awt.GridBagLayout());

        cmbPeriodoPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodoPeriodo.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbPeriodoPeriodo.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbPeriodoPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoPeriodoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        pnltop2.add(cmbPeriodoPeriodo, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel6.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop2.add(jLabel6, gridBagConstraints);

        jdcFechaPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jdcFechaPeriodo.setMinimumSize(new java.awt.Dimension(50, 23));
        jdcFechaPeriodo.setPreferredSize(new java.awt.Dimension(150, 22));
        jdcFechaPeriodo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaPeriodoPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop2.add(jdcFechaPeriodo, gridBagConstraints);

        jSeparator3.setBackground(new java.awt.Color(237, 240, 242));
        jSeparator3.setForeground(new java.awt.Color(237, 240, 242));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 10);
        pnltop2.add(jSeparator3, gridBagConstraints);

        jLabel16.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel16.setText("Fecha.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop2.add(jLabel16, gridBagConstraints);

        pnlInasistencia.add(pnltop2, java.awt.BorderLayout.PAGE_START);

        pnlMid1.setBackground(new java.awt.Color(255, 255, 255));
        pnlMid1.setLayout(new java.awt.GridBagLayout());

        pnlFicha1.setBackground(new java.awt.Color(255, 255, 255));
        pnlFicha1.setLayout(new java.awt.GridBagLayout());

        jLabel17.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel17.setText("Telefono contacto.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha1.add(jLabel17, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel18.setText("Persona contacto.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha1.add(jLabel18, gridBagConstraints);

        txtTelefonoPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtTelefonoPeriodo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTelefonoPeriodo.setEnabled(false);
        txtTelefonoPeriodo.setMinimumSize(new java.awt.Dimension(400, 20));
        txtTelefonoPeriodo.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha1.add(txtTelefonoPeriodo, gridBagConstraints);

        txtAlumno1.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        txtAlumno1.setText("Ficha inasistencia.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnlFicha1.add(txtAlumno1, gridBagConstraints);

        txtMotivoPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMotivoPeriodo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMotivoPeriodo.setEnabled(false);
        txtMotivoPeriodo.setMinimumSize(new java.awt.Dimension(350, 20));
        txtMotivoPeriodo.setPreferredSize(new java.awt.Dimension(350, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha1.add(txtMotivoPeriodo, gridBagConstraints);

        jLabel19.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel19.setText("Fecha retorno.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha1.add(jLabel19, gridBagConstraints);

        txtContactoPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtContactoPeriodo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtContactoPeriodo.setEnabled(false);
        txtContactoPeriodo.setMinimumSize(new java.awt.Dimension(200, 20));
        txtContactoPeriodo.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha1.add(txtContactoPeriodo, gridBagConstraints);

        jLabel20.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel20.setText("Motivo inasistencia.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha1.add(jLabel20, gridBagConstraints);

        txtFechaRetornoPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtFechaRetornoPeriodo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFechaRetornoPeriodo.setEnabled(false);
        txtFechaRetornoPeriodo.setMinimumSize(new java.awt.Dimension(400, 20));
        txtFechaRetornoPeriodo.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha1.add(txtFechaRetornoPeriodo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        pnlMid1.add(pnlFicha1, gridBagConstraints);

        tblInasistenciasPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblInasistenciasPeriodo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblInasistenciasPeriodo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblInasistenciasPeriodo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInasistenciasPeriodoMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblInasistenciasPeriodo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        pnlMid1.add(jScrollPane4, gridBagConstraints);

        pnlInasistencia.add(pnlMid1, java.awt.BorderLayout.CENTER);

        tbpAsistencia.addTab("Consulta inasistencia", pnlInasistencia);

        pnlAsistencia.setBackground(new java.awt.Color(255, 255, 255));
        pnlAsistencia.setLayout(new java.awt.BorderLayout());

        pnltop.setBackground(new java.awt.Color(255, 255, 255));
        pnltop.setLayout(new java.awt.GridBagLayout());

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbPeriodo.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        pnltop.add(cmbPeriodo, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel12.setText("Aula.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop.add(jLabel12, gridBagConstraints);

        cmbAula.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAula.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbAula.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbAula.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAulaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnltop.add(cmbAula, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel4.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop.add(jLabel4, gridBagConstraints);

        jdcFecha.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jdcFecha.setMinimumSize(new java.awt.Dimension(50, 23));
        jdcFecha.setPreferredSize(new java.awt.Dimension(150, 22));
        jdcFecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop.add(jdcFecha, gridBagConstraints);

        jSeparator1.setBackground(new java.awt.Color(237, 240, 242));
        jSeparator1.setForeground(new java.awt.Color(237, 240, 242));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 10);
        pnltop.add(jSeparator1, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        jLabel7.setText("Fecha.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop.add(jLabel7, gridBagConstraints);

        pnlAsistencia.add(pnltop, java.awt.BorderLayout.PAGE_START);

        pnlMid.setBackground(new java.awt.Color(255, 255, 255));
        pnlMid.setLayout(new java.awt.GridBagLayout());

        tblAsistencias.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAsistencias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        tblAsistencias.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAsistencias.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAsistenciasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAsistencias);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        pnlMid.add(jScrollPane1, gridBagConstraints);

        pnlFicha.setBackground(new java.awt.Color(255, 255, 255));
        pnlFicha.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel8.setText("Telefono contacto.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha.add(jLabel8, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel9.setText("Persona contacto.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha.add(jLabel9, gridBagConstraints);

        txtTelefono.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtTelefono.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtTelefono.setEnabled(false);
        txtTelefono.setMinimumSize(new java.awt.Dimension(400, 20));
        txtTelefono.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha.add(txtTelefono, gridBagConstraints);

        txtAlumno.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        txtAlumno.setText("Ficha inasistencia.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnlFicha.add(txtAlumno, gridBagConstraints);

        txtMotivo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMotivo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMotivo.setEnabled(false);
        txtMotivo.setMinimumSize(new java.awt.Dimension(350, 20));
        txtMotivo.setPreferredSize(new java.awt.Dimension(350, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha.add(txtMotivo, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel10.setText("Fecha retorno.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha.add(jLabel10, gridBagConstraints);

        txtContacto.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtContacto.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtContacto.setEnabled(false);
        txtContacto.setMinimumSize(new java.awt.Dimension(200, 20));
        txtContacto.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha.add(txtContacto, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel11.setText("Motivo inasistencia.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlFicha.add(jLabel11, gridBagConstraints);

        txtFechaRetorno.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtFechaRetorno.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtFechaRetorno.setEnabled(false);
        txtFechaRetorno.setMinimumSize(new java.awt.Dimension(400, 20));
        txtFechaRetorno.setPreferredSize(new java.awt.Dimension(400, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlFicha.add(txtFechaRetorno, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        pnlMid.add(pnlFicha, gridBagConstraints);

        pnlAsistencia.add(pnlMid, java.awt.BorderLayout.CENTER);

        tbpAsistencia.addTab("Consulta asistencia", pnlAsistencia);

        pnlMes.setBackground(new java.awt.Color(255, 255, 255));
        pnlMes.setLayout(new java.awt.BorderLayout());

        pnltop1.setBackground(new java.awt.Color(255, 255, 255));
        pnltop1.setLayout(new java.awt.GridBagLayout());

        cmbPeriodoMes.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodoMes.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbPeriodoMes.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbPeriodoMes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoMesItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        pnltop1.add(cmbPeriodoMes, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel13.setText("Aula.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop1.add(jLabel13, gridBagConstraints);

        cmbAulaMes.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAulaMes.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbAulaMes.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbAulaMes.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAulaMesItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnltop1.add(cmbAulaMes, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel5.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop1.add(jLabel5, gridBagConstraints);

        jdcFechaMes.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jdcFechaMes.setMinimumSize(new java.awt.Dimension(50, 23));
        jdcFechaMes.setPreferredSize(new java.awt.Dimension(150, 22));
        jdcFechaMes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaMesPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop1.add(jdcFechaMes, gridBagConstraints);

        jSeparator2.setBackground(new java.awt.Color(237, 240, 242));
        jSeparator2.setForeground(new java.awt.Color(237, 240, 242));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 10);
        pnltop1.add(jSeparator2, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel14.setText("Fecha.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop1.add(jLabel14, gridBagConstraints);

        pnlMes.add(pnltop1, java.awt.BorderLayout.PAGE_START);

        jScrollPane6.setBorder(null);

        pnlCenter1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        tblAsistenciaMes.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAsistenciaMes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblAsistenciaMes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAsistenciaMesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAsistenciaMes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        jPanel3.add(jScrollPane2, gridBagConstraints);

        jScrollPane5.setPreferredSize(new java.awt.Dimension(150, 402));

        tblResumenMes.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblResumenMes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        jScrollPane5.setViewportView(tblResumenMes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 20);
        jPanel3.add(jScrollPane5, gridBagConstraints);

        pnlCenter1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setPreferredSize(new java.awt.Dimension(642, 100));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N

        tblResumenDia.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblResumenDia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane3.setViewportView(tblResumenDia);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 190);
        jPanel7.add(jScrollPane3, gridBagConstraints);

        pnlCenter1.add(jPanel7, java.awt.BorderLayout.CENTER);

        jScrollPane6.setViewportView(pnlCenter1);

        pnlMes.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        pnlBot1.setBackground(new java.awt.Color(255, 255, 255));
        pnlBot1.setLayout(new java.awt.GridBagLayout());

        btnGenerarReporte.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnGenerarReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_printer.png"))); // NOI18N
        btnGenerarReporte.setText("IMPRIMIR REPORTE");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 20);
        pnlBot1.add(btnGenerarReporte, gridBagConstraints);

        pnlMes.add(pnlBot1, java.awt.BorderLayout.PAGE_END);

        tbpAsistencia.addTab("Consulta por mes", pnlMes);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        pnlBot.add(tbpAsistencia, gridBagConstraints);

        add(pnlBot, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        
        if(cmbPeriodo.getSelectedIndex() != -1) {
            idPeriodo = (int) arrayIdPeriodo.get(cmbPeriodo.getSelectedIndex());
            arrayIdAula = matriculaModelo.MostrarComboAulasPeriodo(cmbAula, idPeriodo);
            
            if (jdcFecha.getDate()!= null && cmbPeriodo.getSelectedIndex() != -1 && cmbAula.getSelectedIndex() != -1) {
                CargarTablaAsistencia();
            }
            
        }
        
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void cmbAulaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAulaItemStateChanged

        if (jdcFecha.getDate()!= null && cmbPeriodo.getSelectedIndex() != -1 && cmbAula.getSelectedIndex() != -1)
        {
            CargarTablaAsistencia();
        }
    }//GEN-LAST:event_cmbAulaItemStateChanged

    private void jdcFechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaPropertyChange
        
        if(firstRun) {
            
            if (jdcFecha.getDate()!= null && cmbPeriodo.getSelectedIndex() != -1 && cmbAula.getSelectedIndex() != -1)
            {
                CargarTablaAsistencia();
            } 
            
        }
        
    }//GEN-LAST:event_jdcFechaPropertyChange

    private void tblAsistenciasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAsistenciasMouseClicked

        int column = tblAsistencias.getSelectedColumn();
        int row = tblAsistencias.getSelectedRow();
        Date fechaFicha;
        String idAlumno;                        
        if(row != -1) {    
            
            DefaultTableModel dtmAsistencia = (DefaultTableModel) tblAsistencias.getModel();                
            idAlumno = (String) dtmAsistencia.getValueAt(row, 0);               
            fechaFicha = jdcFecha.getDate();

            LimpiaCampos();
            //se carga la ficha inasistencia                
            LlenarFicha(idAlumno, formatoOriginal.format(fechaFicha));            

        }
    }//GEN-LAST:event_tblAsistenciasMouseClicked

    private void cmbPeriodoMesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoMesItemStateChanged
        
        if(firstRun) {
            
            if(cmbPeriodo.getSelectedIndex() != -1) {
                
                idPeriodoMes = (int) arrayIdPeriodo.get(cmbPeriodoMes.getSelectedIndex());
                arrayIdAulaMes = matriculaModelo.MostrarComboAulasPeriodo(cmbAulaMes, idPeriodoMes);
                
                if (jdcFechaMes.getDate()!= null && cmbPeriodoMes.getSelectedIndex() != -1 && cmbAulaMes.getSelectedIndex() != -1)
                {
                    CargarTablaAsistenciaMes();
                }
            }
            
        }
        
    }//GEN-LAST:event_cmbPeriodoMesItemStateChanged

    private void cmbAulaMesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAulaMesItemStateChanged
        if(firstRun) {
            if (jdcFechaMes.getDate()!= null && cmbPeriodoMes.getSelectedIndex() != -1 && cmbAulaMes.getSelectedIndex() != -1)
            {
                CargarTablaAsistenciaMes();
            }
        }
        
    }//GEN-LAST:event_cmbAulaMesItemStateChanged

    private void jdcFechaMesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaMesPropertyChange
        
        if(firstRun) {
            
            if ( jdcFechaMes.getDate()!= null && 
             cmbPeriodoMes.getSelectedIndex() != -1 && 
             cmbAulaMes.getSelectedIndex() != -1 ) {
            
                CargarTablaAsistenciaMes();
            
            }
        }
        
    }//GEN-LAST:event_jdcFechaMesPropertyChange

    private void cmbPeriodoPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoPeriodoItemStateChanged
        if(firstRun) {
            
            if ( jdcFechaPeriodo.getDate()!= null && 
             cmbPeriodoPeriodo.getSelectedIndex() != -1 ) {
                CargarTablaInasistenciaPeriodo();
                
            }
        }
    }//GEN-LAST:event_cmbPeriodoPeriodoItemStateChanged

    private void jdcFechaPeriodoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaPeriodoPropertyChange
        if(firstRun) {
            
            if ( jdcFechaPeriodo.getDate()!= null && 
             cmbPeriodoPeriodo.getSelectedIndex() != -1 ) {
                CargarTablaInasistenciaPeriodo();
                
            }
                    
        }
    }//GEN-LAST:event_jdcFechaPeriodoPropertyChange

    private void tblInasistenciasPeriodoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInasistenciasPeriodoMouseClicked
        int column = tblInasistenciasPeriodo.getSelectedColumn();
        int row = tblInasistenciasPeriodo.getSelectedRow();
        Date fechaFicha;
        String idAlumno;                        
        if(row != -1) {    
            
            DefaultTableModel dtmInasistencias = (DefaultTableModel) tblInasistenciasPeriodo.getModel();                
            idAlumno = (String) dtmInasistencias.getValueAt(row, 0);               
            fechaFicha = jdcFechaPeriodo.getDate();
            System.out.println(idAlumno + " " + fechaFicha);
            LimpiaCamposPeriodo();
            //se carga la ficha inasistencia                
            LlenarFichaPeriodo(idAlumno, formatoOriginal.format(fechaFicha));            

        }
    }//GEN-LAST:event_tblInasistenciasPeriodoMouseClicked

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed
        
        //AJUSTE DE COMPONENTES PARA IMPRIMIR
        int widthGeneral = jScrollPane6.getPreferredSize().width;
        int heightGeneral = jScrollPane2.getPreferredSize().height + jScrollPane3.getPreferredSize().height + 40;
        jScrollPane6.setPreferredSize(new Dimension(widthGeneral,heightGeneral));
        
        jScrollPane6.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
        pnlBot1.setVisible(false);jPanel4.setVisible(false);
        tbpAsistencia.remove(pnlInasistencia);tbpAsistencia.remove(pnlAsistencia);        
        printComponenet(pnlMes); //Se imprime el panel
        pnlBot1.setVisible(true);jPanel4.setVisible(true);
        tbpAsistencia.add(pnlInasistencia,0);tbpAsistencia.add(pnlAsistencia,1);
        tbpAsistencia.setTitleAt(0, "Consulta inasistencia");tbpAsistencia.setTitleAt(1, "Consulta asistencia");
        jScrollPane6.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
    }//GEN-LAST:event_btnGenerarReporteActionPerformed

    private void tblAsistenciaMesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAsistenciaMesMouseClicked
        
        int column = tblAsistenciaMes.getSelectedColumn();
        int row = tblAsistenciaMes.getSelectedRow();
        
        String idAlumnoMes;  
        String nombreAlumno;
        String mesFecha;
        String diaFecha;
        String fechaFichaMes;
        String asistenciaF;
        if(row != -1) { 
            
            System.out.println("Row: "+row+" Column: "+column+1);
            if(evt.getClickCount() == 2) {
                
                DefaultTableModel dtmAsistenciaMes = (DefaultTableModel) tblAsistenciaMes.getModel();                
                
                diaFecha = dtmAsistenciaMes.getColumnName(column+1);
                diaFecha = diaFecha.substring(1);
                diaFecha = diaFecha.trim();
                
                Calendar calendarioMes = jdcFechaMes.getCalendar();
                int mesCalendarioInt = calendarioMes.get(Calendar.MONTH)+1;
                int anioCalendarioInt = calendarioMes.get(Calendar.YEAR);
                
                fechaFichaMes = anioCalendarioInt +"-"+mesCalendarioInt+"-"+diaFecha;
                
                idAlumnoMes = (String) dtmAsistenciaMes.getValueAt(row, 0);  
                nombreAlumno = (String) dtmAsistenciaMes.getValueAt(row, 2);  
                
                //+1 porque se oculto la columna ID
                asistenciaF = (String) dtmAsistenciaMes.getValueAt(row, column+1);
                //System.out.println("Asistencia: " + asistenciaF+ " idAlumno: "+idAlumnoMes+" Fecha: "+fechaFichaMes);
                
                if(!asistenciaF.equals("A")) {
                    //comprueba que tenga una ficha          
                    boolean ficha = BuscarFichaAlumno(idAlumnoMes, fechaFichaMes);  

                    if (ficha) {
                        
                        AbrirDialogFichaInasistencia(idFichaF,nombreAlumno);
                    }
                    else {
                        JOptionPane.showMessageDialog(null, "El alumno no tiene una ficha de inasistencia creada", "No se encontró ficha", JOptionPane.ERROR_MESSAGE);
                    }
                }                
                
            }            
        }
        
    }//GEN-LAST:event_tblAsistenciaMesMouseClicked

    private void CargarTablaInasistenciaPeriodo() {
        con = ClsConexion.getConection();
        String ficha= ""; String aula;
        idPeriodoPeriodo = (int) arrayIdPeriodoPeriodo.get(cmbPeriodoPeriodo.getSelectedIndex());
        PreparedStatement pstmt;
        ResultSet rs;
        int cont = 1;
        boolean encuentraFicha = false;
        String fechita = formatoOriginal.format(jdcFechaPeriodo.getDate()); 
        String titulos[] = {"ID ALUMNO","N°","ALUMNO","F. INASISTENCIA.","AULA"};
        Object fila[] = new Object[6];
        String sqlQuery = "SELECT ina.mat_alumno_id, ina.inasistencia_ficha_id, ina.inasistencia_ficha_fecha, ina.inasistencia_ficha_motivo,\n" +
                    "ina.inasistencia_ficha_contacto,ina.inasistencia_ficha_telefono, ina.inasistencia_ficha_retorno, ina.inasistencia_ficha_justificada\n" +
                    "FROM mat_inasistencia_ficha as ina\n" +
                    "WHERE ina.mat_alumno_id = ? AND ina.inasistencia_ficha_fecha = ?";
                
        DefaultTableModel dtmInasistencia  = new DefaultTableModel(null,titulos) 
        {        
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;}               
        }; 
        
        arrayAlumnoPeriodo = alumnos.ListarAlumnoPagoPeriodoBasico(String.valueOf(idPeriodoPeriodo), con);
        arrayAsistenciaPeriodo = asistencia.ListarAsistenciaPeriodoBasico(String.valueOf(idPeriodoPeriodo), fechita, con);
        
        for(AlumnoFichaInasistencia asis : arrayAsistenciaPeriodo)
        {            
            arrayAlumnoPeriodo.remove(new AlumnoFichaInasistencia(asis.getId_Alumno(),asis.getApellidos_Nombres(),asis.getAula()));            
        }
        
        for(AlumnoFichaInasistencia alu : arrayAlumnoPeriodo) {
            
            try {
                pstmt = con.prepareStatement(sqlQuery);
                pstmt.setString(1, alu.getId_Alumno());
                pstmt.setString(2, fechita);
                rs = pstmt.executeQuery(); 
                
                while(rs.next()) {
                    
                    encuentraFicha = true;
                }
                
                if(encuentraFicha) {
                    ficha = "SI";
                }
                else {
                    ficha = "NO";
                }
                    
            } catch (SQLException ex) {
                Logger.getLogger(AsistenciaConsulta.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            fila[0] = alu.getId_Alumno();
            fila[1] = cont;
            fila[2] = alu.getApellidos_Nombres();
            fila[3] = ficha;
            fila[4] = alu.getAula();
            
            cont++;
            ficha = "NO";
            encuentraFicha = false;
            dtmInasistencia.addRow(fila);
        }
         
       tblInasistenciasPeriodo.setModel(dtmInasistencia);
       tblInasistenciasPeriodo.setRowHeight(20);
       tblInasistenciasPeriodo.removeColumn(tblInasistenciasPeriodo.getColumnModel().getColumn(0));
       TableColumn colOrden = tblInasistenciasPeriodo.getColumnModel().getColumn(0);colOrden.setMaxWidth(35);
       TableColumn colAlumno = tblInasistenciasPeriodo.getColumnModel().getColumn(1);colAlumno.setPreferredWidth(230);
       TableColumn colFicha = tblInasistenciasPeriodo.getColumnModel().getColumn(2);colAlumno.setPreferredWidth(50);
       TableColumn colAula = tblInasistenciasPeriodo.getColumnModel().getColumn(3);colAlumno.setPreferredWidth(150);
       
       TableCellRenderer tcr =  tblInasistenciasPeriodo.getTableHeader().getDefaultRenderer();
       GeneralRender.MiRender miRender = new GeneralRender.MiRender(tcr);
       miRender.getTableCellRendererComponent(tblInasistenciasPeriodo, fila, true, true, WIDTH, 0);
       miRender.getTableCellRendererComponent(tblInasistenciasPeriodo, fila, true, true, WIDTH, 2);
        
       ClsConexion.closeConnection(con);
    }
    
    private void AbrirDialogFichaInasistencia(String idFicha, String nombreAlumno) {
        Window parentWindow = SwingUtilities.windowForComponent(this);
        AsistenciaConsultaFichaInasistencia inasistenciaFicha = new AsistenciaConsultaFichaInasistencia
        (parentWindow, idFicha, nombreAlumno);        
        inasistenciaFicha.setModal(true);
        inasistenciaFicha.setVisible(true);
    }
    
    public void printComponenet(final Component component){
        
        try {
            PrinterJob pj = PrinterJob.getPrinterJob();
            
            pj.setJobName(" Print Asistencia ");
            PageFormat pf = pj.defaultPage();    
            pf.setOrientation(PageFormat.LANDSCAPE);
            
            pj.setPrintable (new Printable() {
                @Override
                public int print(Graphics pg, PageFormat pf, int pageNum){
                    
                    if (pageNum > 0){
                        return Printable.NO_SUCH_PAGE;
                    }
                    
                    Graphics2D g2 = (Graphics2D) pg;
                    g2.translate(pf.getImageableX(), pf.getImageableY());
                    g2.scale(0.53, 0.67);
                    component.paint(g2);
                    return Printable.PAGE_EXISTS;
                }
            },pf);
            if (pj.printDialog() == false)
                return;
            
            pj.print();
        } catch (PrinterException ex) {
            Logger.getLogger(AsistenciaConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    private void CargarTablaAsistenciaMes() {
        
        int contadorAsistioT; int contadorFaltoT; int contadorJustificadaT;
        
        ArrayList<String> arrayColumnaTitulos = new ArrayList<>();
        ArrayList<String> arrayColumnaTitulosDias = new ArrayList<>();
        ArrayList<String> arrayListDiasMes = new ArrayList<>();
        //String diasSemanaFull[] = {"DOMINGO","LUNES","MARTES","MIERCOLES","JUEVES","VIERNES","SABADO"};
        Locale locale = new Locale("es","PE");
        calendario = jdcFechaMes.getCalendar();
        
        //Mes palabra - mes + 1 - dias del mes
        String mesCalendarioString = calendario.getDisplayName(Calendar.MONTH,Calendar.LONG,locale);
        int mesCalendarioInt = calendario.get(Calendar.MONTH)+1;
        int anioCalendarioInt = calendario.get(Calendar.YEAR);
        int diasMes = calendario.getActualMaximum(Calendar.DAY_OF_MONTH);
        
        String primerDiaMesString = calendario.getDisplayName(Calendar.DAY_OF_WEEK, Calendar.LONG, locale);
                
        //System.out.println(mesCalendarioString + " "+mesCalendarioInt+" "+ diasMes);
        calendario.set(Calendar.DATE, 1);
        int primerDiaMesInt = calendario.get(Calendar.DAY_OF_WEEK)-1;
        //System.out.println(diasSemanaFull[calendario.get(Calendar.DAY_OF_WEEK)-1]);
        
        Object fila[] = new Object[31]; Object filaTotal[] = new Object[4]; Object filaDias[] = new Object[3];
        
        con = ClsConexion.getConection();
        //Lista de alumnos
        idAulaMes = (int) arrayIdAulaMes.get(cmbAulaMes.getSelectedIndex());
        arrayAlumnoMes = alumnos.ListarAlumnoPagoSeccionBasico(String.valueOf(idAulaMes),con);
        
        //titulo dinamico de acuerdo a dias del mes
        String diasSemanaShort[] = {"D","L","M","M","J","V","S"};
        String columnaTitulos[] = new String [32];
        String arrayDiasMes[] = new String [32];
        String columnaTitulosFiltrada[] = new String[32];
        
        //contador de dias de la semana
        int diaContador = primerDiaMesInt;   
        
        //contador de dias del mes
        int diaContadorDefault = 1;
        
        //recorre los dias del mes
        for(int i=0; i < diasMes; i++) {
            
            //verifica solo de lunes a viernes
            if(diaContador != 0 && diaContador != 6) {
                
                columnaTitulos[i] = diasSemanaShort[diaContador]+" "+diaContadorDefault;
                arrayDiasMes[i] = String.valueOf(diaContadorDefault);
            }
            
            diaContador++;
            diaContadorDefault++;
            //si el dia llega a sabado + 1, entonces se resetea el contador
            if(diaContador == 7) {
                diaContador = 0;
            }
        }
        
        //filtra los dias nulos
        for (String columnaTitulo : columnaTitulos) {
            
            if (columnaTitulo != null) {
                arrayColumnaTitulos.add(columnaTitulo);
                arrayColumnaTitulosDias.add(columnaTitulo);
            }
            
        }
        
        for(String mes : arrayDiasMes) {
            
            if(mes != null) {
                arrayListDiasMes.add(mes);
            }
            
        }
        
        DefaultTableModel dtmAsistenciaDias  = new DefaultTableModel() 
        {        
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;}               
        };  
        
        arrayColumnaTitulos.add(0, "ALUMNO");
        arrayColumnaTitulos.add(0, "N°");
        arrayColumnaTitulos.add(0, "ID ALUMNO"); 
        
        DefaultTableModel dtmAsistenciaMes  = new DefaultTableModel(null,arrayColumnaTitulos.toArray()) 
        {        
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;}               
        }; 
        
        String columnaTitulosTotal[]={"TA","TF","TFJ"};
        DefaultTableModel dtmAsistenciaTotal  = new DefaultTableModel(null,columnaTitulosTotal) 
        {        
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;}               
        };
        
        //Llenado filas
        String idAlumno;String nombreAlumno; String asistenciaAlumno;
        boolean encuentra = false;
        PreparedStatement pstmt;
        ResultSet rs;
        String fecha = formatoOriginal.format(jdcFechaMes.getDate());
        Date fechaDate = jdcFechaMes.getDate();
        String sqlQuery="SELECT ina.mat_alumno_id, ina.inasistencia_ficha_id, ina.inasistencia_ficha_fecha, ina.inasistencia_ficha_justificada\n" +
                    "FROM mat_inasistencia_ficha as ina\n" +
                    "WHERE ina.mat_alumno_id = ? AND ina.inasistencia_ficha_fecha = ?";
        
        //Lista de alumnos
        int contadorOrden = 1;        
        
        for(AlumnoFichaInasistencia alu : arrayAlumnoMes) {
            
            contadorAsistioT = 0; contadorFaltoT = 0; contadorJustificadaT = 0;
            
            fila[0] = alu.getId_Alumno();
            fila[1] = String.valueOf(contadorOrden);
            fila[2] = alu.getApellidos_Nombres();
            
            //se obvian las 3 primeras columnas
            int contDia = 3;
            //hacemos consulta por cada dia
            for(String dia : arrayListDiasMes) {
            
                asistenciaAlumno="F";
                //Dias del mes de lunes a viernes (sin sabados y domingos)            
                
                //se crea una fecha
                String fechaPorDia = anioCalendarioInt+"-"+mesCalendarioInt+"-"+dia;
                
                //Asistencia segun la fecha 
                if(asistencia.ComprobarAsistenciaAlumno(alu.getId_Alumno(), fechaPorDia, con)) {
                    
                    asistenciaAlumno = "A";
                                        
                }
                //no asistio
                else {

                    try {

                        pstmt = con.prepareStatement(sqlQuery);
                        pstmt.setString(1, alu.getId_Alumno());
                        pstmt.setString(2, fechaPorDia);
                        rs = pstmt.executeQuery(); 

                        while(rs.next()) {

                            if(rs.getString("inasistencia_ficha_justificada").equals("1")) {
                                asistenciaAlumno = "FJ";
                            }
                            else {
                                asistenciaAlumno = "F";
                            }

                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(AsistenciaConsulta.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                
                fila[contDia] = asistenciaAlumno;
                
                contDia++;  
                
                //Totales
                switch(asistenciaAlumno) {
                    case "A":
                        contadorAsistioT++;
                        break;
                    case "F":
                        contadorFaltoT++;
                        break;
                    case "FJ":
                        contadorJustificadaT++;
                        break;
                }
                
            }
            
            //TablaTotal
            filaTotal[0] = contadorAsistioT;
            filaTotal[1] = contadorFaltoT;
            filaTotal[2] = contadorJustificadaT;
            dtmAsistenciaTotal.addRow(filaTotal);
            
            dtmAsistenciaMes.addRow(fila);
            
            contadorOrden++;
            encuentra = false;    
            
            
            
        }
                        
        tblAsistenciaMes.setModel(dtmAsistenciaMes); tblResumenMes.setModel(dtmAsistenciaTotal);
        tblAsistenciaMes.setRowHeight(20); tblResumenMes.setRowHeight(20);
        
        tblAsistenciaMes.removeColumn(tblAsistenciaMes.getColumnModel().getColumn(0));
        TableColumn colOrden = tblAsistenciaMes.getColumnModel().getColumn(0);colOrden.setMaxWidth(35);colOrden.setMinWidth(35);
        TableColumn colAlumno = tblAsistenciaMes.getColumnModel().getColumn(1);colAlumno.setMinWidth(250);
        
        
        TableCellRenderer tcr =  tblAsistenciaMes.getTableHeader().getDefaultRenderer();
        GeneralRender.MiRender miRender = new GeneralRender.MiRender(tcr);
        tblAsistenciaMes.setDefaultRenderer(Object.class, new RenderPintarRojo());
        
        miRender.getTableCellRendererComponent(tblAsistenciaMes, fila, true, true, WIDTH, 0);
        
        TableCellRenderer tcrTotal =  tblResumenMes.getTableHeader().getDefaultRenderer();  
        GeneralRender.MiRender miRenderTotal = new GeneralRender.MiRender(tcrTotal);
        miRenderTotal.getTableCellRendererComponent(tblResumenMes, filaTotal, true, true, WIDTH, 0);
        miRenderTotal.getTableCellRendererComponent(tblResumenMes, filaTotal, true, true, WIDTH, 1);
        miRenderTotal.getTableCellRendererComponent(tblResumenMes, filaTotal, true, true, WIDTH, 2);
        
        ClsConexion.closeConnection(con);
      
        //Tabla totales por dia
        
        ListModel lm = new AbstractListModel() {
            
            String[] rowHeaders = {" (A) ASISTENCIAS"," (F) FALTAS"," (FJ) FALTAS JUSTIFICADAS"};
           
            @Override
            public Object getElementAt(int index) {
                return rowHeaders[index];
            }

            @Override
            public int getSize() {                
                return rowHeaders.length;
            }
            
        };
        
        JList rowHeader = new JList(lm);   
        rowHeader.setFixedCellHeight(20);
        rowHeader.setFixedCellWidth(250+35);
        
        
        int totalRow = tblAsistenciaMes.getRowCount();
        System.out.println(totalRow + " " +arrayListDiasMes.size());
        int sumaAsistencia; int sumaFaltas; int sumaJustificada;
        String asistenciaTabla;
                
        int contDia = 2;
        int contador = 0;
        for(String dia : arrayListDiasMes) {
            
            sumaAsistencia = 0; sumaFaltas = 0; sumaJustificada = 0;
            
            for(int i = 0; i < totalRow; i++) {
            
                asistenciaTabla = String.valueOf(tblAsistenciaMes.getValueAt(i, contDia));
                
                switch(asistenciaTabla) {
                    case "A":
                        sumaAsistencia++;
                        break;
                    case "F":
                        sumaFaltas++;
                        break;
                    case "FJ":
                        sumaJustificada++;
                        break;
                }
                                                
            }
            
            filaDias[0] = sumaAsistencia;
            filaDias[1] = sumaFaltas;
            filaDias[2] = sumaJustificada;
            dtmAsistenciaDias.addColumn(arrayColumnaTitulosDias.get(contador), filaDias); 
            contDia++; 
            contador++;
        }
        tblResumenDia.setModel(dtmAsistenciaDias);
        tblResumenDia.setRowHeight(20);
        TableCellRenderer tcrDia =  tblResumenDia.getTableHeader().getDefaultRenderer(); 
        GeneralRender.MiRender miRenderDia = new GeneralRender.MiRender(tcrDia);
        
        for(int i = 0; i < arrayColumnaTitulosDias.size();i++) {
            miRenderDia.getTableCellRendererComponent(tblResumenDia, filaDias, true, true, WIDTH, i);
        }
        rowHeader.setCellRenderer(new RowHeaderRender(tblResumenDia));
        jScrollPane3.setRowHeaderView(rowHeader);
        
        //Reescala la tabla principal
        int width = jScrollPane2.getPreferredSize().width;
        int height = (tblAsistenciaMes.getRowCount() * tblAsistenciaMes.getRowHeight())+tblAsistenciaMes.getRowHeight();
        jScrollPane2.setPreferredSize(new Dimension(width,height));
        
    }
    
    public void printComponent(Component comp) {
        PrinterJob pj = PrinterJob.getPrinterJob();
        pj.setJobName(" Print Component ");

        pj.setPrintable(new ComponentPrintable(comp));
//        PageFormat pf=pj.defaultPage();
//        pf.setOrientation(PageFormat.LANDSCAPE);
        if (!pj.printDialog()) {
            return;
        }
        try {
            pj.print();
        } catch (PrinterException ex) {
            System.out.println(ex);
        }
    }
    
    
    
    private void LimpiaCampos() {
        txtMotivo.setText("");
        txtContacto.setText("");
        txtTelefono.setText("");
        txtFechaRetorno.setText("");
    }
    
    private void LimpiaCamposPeriodo() {
        txtMotivoPeriodo.setText("");
        txtContactoPeriodo.setText("");
        txtTelefonoPeriodo.setText("");
        txtFechaRetornoPeriodo.setText("");
    }
            
    private void CargarTablaAsistencia() {
        
        idAula = (int) arrayIdAula.get(cmbAula.getSelectedIndex());
        String idAlumno;String nombreAlumno; String asistenciaAlumno;
        String fichaAlumno;
        boolean encuentraAsistencia = false;
        boolean encuentraFicha = false;
        PreparedStatement pstmt;
        ResultSet rs;
        String fecha = formatoOriginal.format(jdcFecha.getDate());
        int contador = 1;
        String sqlQuery="SELECT ina.mat_alumno_id, ina.inasistencia_ficha_id, ina.inasistencia_ficha_fecha, ina.inasistencia_ficha_justificada\n" +
                    "FROM mat_inasistencia_ficha as ina\n" +
                    "WHERE ina.mat_alumno_id = ? AND ina.inasistencia_ficha_fecha = ?";
        String columnaTitulos[]={"ID ALUMNO","N°","ALUMNO","ASISTENCIA", "F. INASISTENCIA"};
        Object fila[] = new Object[5];
        
        DefaultTableModel dtmAsistencia  = new DefaultTableModel(null,columnaTitulos) 
        {        
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;}               
        }; 
        con = ClsConexion.getConection();
        //lista completa de alumnos
        arrayAlumno = alumnos.ListarAlumnoPagoSeccionBasico(String.valueOf(idAula),con);
        
        //lista asistencias
        arrayAsistencia = asistencia.ListarAsistenciaAulaBasico(String.valueOf(idAula), fecha, con);
        
        //ver asistencias-faltas-faltas justificadas
        for(AlumnoFichaInasistencia alu : arrayAlumno) {
            
            asistenciaAlumno="F";
            fichaAlumno="";
            for(AlumnoFichaInasistencia asis : arrayAsistencia) {
                
                if( alu.getId_Alumno().equals(asis.getId_Alumno()) ) {
                
                    //alumno si asistio
                    asistenciaAlumno = "A";
                    encuentraAsistencia = true;
                }               
            }
            
            if(encuentraAsistencia == false) {
                
                try {
                        
                pstmt = con.prepareStatement(sqlQuery);
                pstmt.setString(1, alu.getId_Alumno());
                pstmt.setString(2, fecha);
                rs = pstmt.executeQuery(); 
                
                    
                while(rs.next()) {

                    if(rs.getString("inasistencia_ficha_justificada").equals("1")) {
                        asistenciaAlumno = "FJ";
                    }
                    else {
                        asistenciaAlumno = "F";
                    }                    
                    encuentraFicha = true;
                } 
                

                } catch (SQLException ex) {
                    Logger.getLogger(AsistenciaConsulta.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if(encuentraFicha) {
                fichaAlumno = "SI";
                }
                else {
                    fichaAlumno = "NO";
                }
            }
            
            
            
            fila[0] = alu.getId_Alumno();
            fila[1] = contador;
            fila[2] = alu.getApellidos_Nombres();
            fila[3] = asistenciaAlumno;
            fila[4] = fichaAlumno;
            
            contador++;
            encuentraFicha = false;
            encuentraAsistencia = false;
            dtmAsistencia.addRow(fila);
        }
        tblAsistencias.setModel(dtmAsistencia);
        tblAsistencias.setRowHeight(20);
                
        tblAsistencias.removeColumn(tblAsistencias.getColumnModel().getColumn(0));
        
        TableColumn colOrden = tblAsistencias.getColumnModel().getColumn(0);colOrden.setMaxWidth(35);
        TableColumn colAlu = tblAsistencias.getColumnModel().getColumn(1);colAlu.setPreferredWidth(300);
        TableColumn colAsis = tblAsistencias.getColumnModel().getColumn(2);colAsis.setPreferredWidth(40);
        
        TableCellRenderer tcr =  tblAsistencias.getTableHeader().getDefaultRenderer();
        ClsMisc.miRender miRender = new ClsMisc.miRender(tcr); 
        miRender.getTableCellRendererComponent(tblAsistencias, fila, true, true, WIDTH, 0);
        miRender.getTableCellRendererComponent(tblAsistencias, fila, true, true, WIDTH, 2);
        miRender.getTableCellRendererComponent(tblAsistencias, fila, true, true, WIDTH, 3);
        
        
        ClsConexion.closeConnection(con);
    }
    
    private void LlenarFicha(String idAlumnoFicha, String fechaFicha)
    {
        con = ClsConexion.getConection();
        PreparedStatement pstmt;
        ResultSet rs;
        String sqlQuery="SELECT ina.inasistencia_ficha_motivo, ina.inasistencia_ficha_contacto,\n" +
        "ina.inasistencia_ficha_telefono,ina.inasistencia_ficha_retorno, ina.inasistencia_ficha_justificada\n" +
        "FROM mat_inasistencia_ficha as ina WHERE ina.mat_alumno_id = ? AND ina.inasistencia_ficha_fecha = ?";
        
        try 
        {
            pstmt = con.prepareStatement(sqlQuery);
            pstmt.setString(1, idAlumnoFicha);
            pstmt.setString(2, fechaFicha);
            rs = pstmt.executeQuery();
            
            while(rs.next())
            {                
                txtMotivo.setText(rs.getString("inasistencia_ficha_motivo"));
                txtContacto.setText(rs.getString("inasistencia_ficha_contacto"));
                txtTelefono.setText(rs.getString("inasistencia_ficha_telefono"));
                txtFechaRetorno.setText(formato.format(formatoOriginal.parse(rs.getString("inasistencia_ficha_retorno"))));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AsistenciaDocenteFichaInasistenciaEditar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AsistenciaConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ClsConexion.closeConnection(con);
    }
    
    private boolean BuscarFichaAlumno(String idAlumnoFicha, String fechaFicha) {
        
        boolean fichaEncontrada = false;
        con = ClsConexion.getConection();
        PreparedStatement pstmt;
        ResultSet rs;
        String sqlQuery="SELECT inasistencia_ficha_id, ina.inasistencia_ficha_motivo, ina.inasistencia_ficha_contacto,\n" +
        "ina.inasistencia_ficha_telefono,ina.inasistencia_ficha_retorno, ina.inasistencia_ficha_justificada\n" +
        "FROM mat_inasistencia_ficha as ina WHERE ina.mat_alumno_id = ? AND ina.inasistencia_ficha_fecha = ?";
                        
        try 
        {
            pstmt = con.prepareStatement(sqlQuery);
            pstmt.setString(1, idAlumnoFicha);
            pstmt.setString(2, fechaFicha);
            rs = pstmt.executeQuery();
            
            while(rs.next()) {
                fichaEncontrada = true;
                idFichaF = rs.getString("inasistencia_ficha_id");                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AsistenciaDocenteFichaInasistenciaEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ClsConexion.closeConnection(con);
        
        return fichaEncontrada;
    }
    
    private void LlenarFichaPeriodo(String idAlumnoFicha, String fechaFicha)
    {
        con = ClsConexion.getConection();
        PreparedStatement pstmt;
        ResultSet rs;
        String sqlQuery="SELECT ina.inasistencia_ficha_motivo, ina.inasistencia_ficha_contacto,\n" +
        "ina.inasistencia_ficha_telefono,ina.inasistencia_ficha_retorno, ina.inasistencia_ficha_justificada\n" +
        "FROM mat_inasistencia_ficha as ina WHERE ina.mat_alumno_id = ? AND ina.inasistencia_ficha_fecha = ?";
        
        try 
        {
            pstmt = con.prepareStatement(sqlQuery);
            pstmt.setString(1, idAlumnoFicha);
            pstmt.setString(2, fechaFicha);
            rs = pstmt.executeQuery();
            
            while(rs.next())
            {                
                txtMotivoPeriodo.setText(rs.getString("inasistencia_ficha_motivo"));
                txtContactoPeriodo.setText(rs.getString("inasistencia_ficha_contacto"));
                txtTelefonoPeriodo.setText(rs.getString("inasistencia_ficha_telefono"));
                txtFechaRetornoPeriodo.setText(formato.format(formatoOriginal.parse(rs.getString("inasistencia_ficha_retorno"))));
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AsistenciaDocenteFichaInasistenciaEditar.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AsistenciaConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        ClsConexion.closeConnection(con);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JComboBox<String> cmbAula;
    private javax.swing.JComboBox<String> cmbAulaMes;
    private javax.swing.JComboBox<String> cmbPeriodo;
    private javax.swing.JComboBox<String> cmbPeriodoMes;
    private javax.swing.JComboBox<String> cmbPeriodoPeriodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private com.toedter.calendar.JDateChooser jdcFecha;
    private com.toedter.calendar.JDateChooser jdcFechaMes;
    private com.toedter.calendar.JDateChooser jdcFechaPeriodo;
    private javax.swing.JPanel pnlAsistencia;
    private javax.swing.JPanel pnlBot;
    private javax.swing.JPanel pnlBot1;
    private javax.swing.JPanel pnlCenter1;
    private javax.swing.JPanel pnlFicha;
    private javax.swing.JPanel pnlFicha1;
    private javax.swing.JPanel pnlInasistencia;
    private javax.swing.JPanel pnlMes;
    private javax.swing.JPanel pnlMid;
    private javax.swing.JPanel pnlMid1;
    private javax.swing.JPanel pnltop;
    private javax.swing.JPanel pnltop1;
    private javax.swing.JPanel pnltop2;
    private javax.swing.JTable tblAsistenciaMes;
    private javax.swing.JTable tblAsistencias;
    private javax.swing.JTable tblInasistenciasPeriodo;
    private javax.swing.JTable tblResumenDia;
    private javax.swing.JTable tblResumenMes;
    private javax.swing.JTabbedPane tbpAsistencia;
    private javax.swing.JLabel txtAlumno;
    private javax.swing.JLabel txtAlumno1;
    private javax.swing.JTextField txtContacto;
    private javax.swing.JTextField txtContactoPeriodo;
    private javax.swing.JTextField txtFechaRetorno;
    private javax.swing.JTextField txtFechaRetornoPeriodo;
    private javax.swing.JTextField txtMotivo;
    private javax.swing.JTextField txtMotivoPeriodo;
    private javax.swing.JTextField txtTelefono;
    private javax.swing.JTextField txtTelefonoPeriodo;
    // End of variables declaration//GEN-END:variables
}
