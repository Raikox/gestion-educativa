/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadAlumnoPago;
import PckEntidad.ClsEntidadAsistencia;
import PckHilo.HiloReloj;
import PckNegocio.ClsAlumno;
import PckNegocio.ClsAsistencia;
import PckNegocio.ClsMatricula;
import PckNegocio.ClsSeccion;
import PckRenderTabla.GeneralRender;
import PckRenderTabla.Render;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import mpsModel.MatriculaModelo;
import static prymatricula.ClsMisc.formatoFechaOriginal;

/**
 *
 * @author Kevin
 */
public class AsistenciaAdministracion extends javax.swing.JPanel {

    MatriculaModelo matriculaModelo = new MatriculaModelo();
    ClsMatricula matricula = new ClsMatricula();
    ClsAsistencia asistencia = new ClsAsistencia();
    ClsSeccion seccion = new ClsSeccion();
    ClsEntidadAsistencia entidadAsitencia = new ClsEntidadAsistencia();
    
    HiloReloj reloj = new HiloReloj();
    
    Connection con = null;
    
    ArrayList<Object> arrayIdPeriodo = new ArrayList();
    ArrayList<Object> arrayIdAula = new ArrayList();
    
    ClsAlumno alumnos = new ClsAlumno();
    ArrayList<ClsEntidadAlumnoPago> arrayAlumno = new ArrayList<>();
    
    int idPeriodo;
    int idAula;
    
    Date date = new Date();
    
    SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
    
    boolean editarAsistenciaTodos = false;
    
    /**
     * Creates new form AsistenciaAdministracion
     */
    public AsistenciaAdministracion() {
        initComponents();
        
        java.awt.GridBagConstraints gridBagConstraints;
        reloj.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        reloj.setMinimumSize(new java.awt.Dimension(61, 22));
        reloj.setPreferredSize(new java.awt.Dimension(101, 22));
        reloj.setEnabled(false);
        reloj.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop.add(reloj, gridBagConstraints);
       
        jdcFecha.setDate(date);
        
        arrayIdPeriodo = matriculaModelo.MostrarComboPeriodos(cmbPeriodo);
        idPeriodo = (int) arrayIdPeriodo.get(cmbPeriodo.getSelectedIndex());
        arrayIdAula = matriculaModelo.MostrarComboAulasPeriodo(cmbAula, idPeriodo);
        
        editarAsistenciaTodos = false;
        
        ActualizarTablaAsistencia();
        
        //Si alumnos asistieron se selecciona asistenciaTodos sin tomar asistencia 2 veces.
        if(AlumnosAsistieron()) {
            cbxTodos.setSelected(true);
        }
        else {
            cbxTodos.setSelected(false);
        }
        
        editarAsistenciaTodos = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        pnlDerecha = new javax.swing.JPanel();
        pnltop = new javax.swing.JPanel();
        cmbPeriodo = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cmbAula = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jdcFecha = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        pnlbot = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAsistencia = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtCon = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSin = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtLoncheras = new javax.swing.JTextField();
        cbxTodos = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(237, 240, 242));
        jPanel4.setPreferredSize(new java.awt.Dimension(911, 50));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(237, 240, 242));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        jLabel1.setText("ADMINISTRAR ASISTENCIA");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(237, 240, 242));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        pnlDerecha.setBackground(new java.awt.Color(255, 255, 255));
        pnlDerecha.setMinimumSize(new java.awt.Dimension(200, 414));
        pnlDerecha.setPreferredSize(new java.awt.Dimension(300, 400));
        pnlDerecha.setLayout(new java.awt.BorderLayout());

        pnltop.setBackground(new java.awt.Color(255, 255, 255));
        pnltop.setLayout(new java.awt.GridBagLayout());

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbPeriodo.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 20);
        pnltop.add(cmbPeriodo, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel12.setText("Aula.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop.add(jLabel12, gridBagConstraints);

        cmbAula.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAula.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbAula.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbAula.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAulaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnltop.add(cmbAula, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel4.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop.add(jLabel4, gridBagConstraints);

        jdcFecha.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jdcFecha.setMinimumSize(new java.awt.Dimension(50, 23));
        jdcFecha.setPreferredSize(new java.awt.Dimension(150, 22));
        jdcFecha.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnltop.add(jdcFecha, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel5.setText("Fecha.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop.add(jLabel5, gridBagConstraints);

        jSeparator1.setForeground(new java.awt.Color(237, 240, 242));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 10);
        pnltop.add(jSeparator1, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel7.setText("Hora.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 10, 0);
        pnltop.add(jLabel7, gridBagConstraints);

        pnlDerecha.add(pnltop, java.awt.BorderLayout.PAGE_START);

        pnlbot.setBackground(new java.awt.Color(255, 255, 255));
        pnlbot.setLayout(new java.awt.GridBagLayout());

        tblAsistencia.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAsistencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        tblAsistencia.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAsistencia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAsistenciaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblAsistencia);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        pnlbot.add(jScrollPane1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Con alimentacion.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel2, gridBagConstraints);

        txtCon.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtCon.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtCon.setEnabled(false);
        txtCon.setMinimumSize(new java.awt.Dimension(40, 20));
        txtCon.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        pnlbot.add(txtCon, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel3.setText("Sin alimentacion.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel3, gridBagConstraints);

        txtSin.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtSin.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtSin.setEnabled(false);
        txtSin.setMinimumSize(new java.awt.Dimension(40, 20));
        txtSin.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        pnlbot.add(txtSin, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel6.setText("Loncheras del dia.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel6, gridBagConstraints);

        txtLoncheras.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtLoncheras.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtLoncheras.setEnabled(false);
        txtLoncheras.setMinimumSize(new java.awt.Dimension(40, 20));
        txtLoncheras.setPreferredSize(new java.awt.Dimension(40, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 10, 0, 0);
        pnlbot.add(txtLoncheras, gridBagConstraints);

        cbxTodos.setBackground(new java.awt.Color(255, 255, 255));
        cbxTodos.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cbxTodos.setText("Seleccionar todos los alumnos");
        cbxTodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxTodosItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 20);
        pnlbot.add(cbxTodos, gridBagConstraints);

        pnlDerecha.add(pnlbot, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel3.add(pnlDerecha, gridBagConstraints);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        
        if(cmbPeriodo.getSelectedIndex() != -1) {
            idPeriodo = Integer.parseInt(String.valueOf(arrayIdPeriodo.get(cmbPeriodo.getSelectedIndex())));
            arrayIdAula = matriculaModelo.MostrarComboAulasPeriodo(cmbAula, idPeriodo);
            
            if(cmbAula.getSelectedIndex() != -1) {
            
                editarAsistenciaTodos = false;

                ActualizarTablaAsistencia();         
                if(AlumnosAsistieron()) {
                    cbxTodos.setSelected(true);
                }
                else {
                    cbxTodos.setSelected(false);
                }

                editarAsistenciaTodos = true;
            }
        }
        
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void cmbAulaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAulaItemStateChanged
        if(cmbAula.getSelectedIndex() != -1) {
            
            editarAsistenciaTodos = false;
        
            ActualizarTablaAsistencia();         
            if(AlumnosAsistieron()) {
                cbxTodos.setSelected(true);
            }
            else {
                cbxTodos.setSelected(false);
            }

            editarAsistenciaTodos = true;
        }
        
    }//GEN-LAST:event_cmbAulaItemStateChanged

    private void jdcFechaPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaPropertyChange
        
        if (jdcFecha.getDate()!= null && cmbPeriodo.getSelectedIndex() != -1 && cmbAula.getSelectedIndex() != -1)
        {
            ActualizarTablaAsistencia();
        }
    }//GEN-LAST:event_jdcFechaPropertyChange

    private void tblAsistenciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAsistenciaMouseClicked
       
        int column = tblAsistencia.getSelectedColumn();
        int row = tblAsistencia.getSelectedRow();
        
        if(row != -1)
        {
            

            DefaultTableModel dtmAsistencia = (DefaultTableModel) tblAsistencia.getModel();
            boolean asiste = (boolean) dtmAsistencia.getValueAt(row, 4);
            
            System.out.println(asiste);
            
        }
    }//GEN-LAST:event_tblAsistenciaMouseClicked

    private void cbxTodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxTodosItemStateChanged

        if(editarAsistenciaTodos) {
            
            if(cbxTodos.isSelected()) {
            
            con = ClsConexion.getConection();
            
            idAula = Integer.parseInt(String.valueOf(arrayIdAula.get(cmbAula.getSelectedIndex())));
            ArrayList<ClsEntidadAlumnoPago> arrayAlumnoTodos = alumnos.ListarAlumnoPagoSeccion(String.valueOf(idAula),con);

            ClsEntidadAsistencia easistencia = new ClsEntidadAsistencia();

            for(ClsEntidadAlumnoPago alu : arrayAlumnoTodos) {

                //ASISTE, CREAR REGISTRO ASISTENCIA
                easistencia.setAsistencia_Alumno_Id(String.valueOf(alu.getId_Alumno()));
                easistencia.setAsistencia_Fecha(formatoFechaOriginal(jdcFecha.getDate()));
                easistencia.setAsistencia_Hora(reloj.getText());
                asistencia.InsertarAsistencia(easistencia, con);
            }

            ClsConexion.closeConnection(con);
            ActualizarTablaAsistencia();

            } else {

                con = ClsConexion.getConection();

                idAula = Integer.parseInt(String.valueOf(arrayIdAula.get(cmbAula.getSelectedIndex())));
                ArrayList<ClsEntidadAlumnoPago> arrayAlumnoTodos = alumnos.ListarAlumnoPagoSeccion(String.valueOf(idAula),con);


                ClsEntidadAsistencia easistencia = new ClsEntidadAsistencia();

                for(ClsEntidadAlumnoPago alu : arrayAlumnoTodos) {

                    //ASISTE, CREAR REGISTRO ASISTENCIA
                    easistencia.setAsistencia_Alumno_Id(String.valueOf(alu.getId_Alumno()));
                    easistencia.setAsistencia_Fecha(formatoFechaOriginal(jdcFecha.getDate()));
                    asistencia.BorrarAsistencia(easistencia, con);
                }

                ClsConexion.closeConnection(con);
                ActualizarTablaAsistencia();

            }
        }
        
    }//GEN-LAST:event_cbxTodosItemStateChanged
    
    private boolean AlumnosAsistieron() {
        
        boolean alumnoAsistio = false;
        con = ClsConexion.getConection();
        idAula = Integer.parseInt(String.valueOf(arrayIdAula.get(cmbAula.getSelectedIndex())));
        
        ArrayList<ClsEntidadAlumnoPago> arrayAlumnoTodos = alumnos.ListarAlumnoPagoSeccion(String.valueOf(idAula),con);
        for(ClsEntidadAlumnoPago alu : arrayAlumnoTodos) {
            alumnoAsistio = asistencia.VerificarAlumnoAsistencia(alu.getId_Alumno(), formatoFechaOriginal(jdcFecha.getDate()), con);
        }
        
        return alumnoAsistio;
    }
    
    private void ActualizarTablaAsistencia() 
    {
        int conAlimentacion = 0;
        int sinAlimentacion = 0;
        idAula = (int) arrayIdAula.get(cmbAula.getSelectedIndex());
        JCheckBox cbxAsistio = new JCheckBox("");
        cbxAsistio.setName("cbxAsistio");        
        Connection con = ClsConexion.getConection();
        String sql = "select a.asistencia_id, a.asistencia_hora from mat_asistencia as a where a.asistencia_alumno_id = ? and a.asistencia_fecha = ?";
        String cabecera[] = {"ID ALUMNO","N°","ALUMNO","ALIMENTACION","ASISTIO","HORA"};
        final boolean colEditables[]  = {false,false,false,false,true,false};
        Object fila[] = new Object[7];
        ResultSet rs = null;
        String fecha = formatoOriginal.format(jdcFecha.getDate());
        String hora="";
        boolean asistio = false;
        int count =1 ;
        PreparedStatement pstmt = null;
        DefaultTableModel dtmAsistencia = new DefaultTableModel(null,cabecera)
        {
            Class types[] = new Class[]
            {
                Object.class,Object.class,Object.class,Object.class,Boolean.class,Object.class
            };
            
            @Override
            public Class getColumnClass(int columnIndex) 
            {return types[columnIndex];}
            
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex)
            {return colEditables[columnIndex];}
        };
        System.out.println(idAula);
        arrayAlumno = alumnos.ListarAlumnoPagoSeccion(String.valueOf(idAula),con);
        
        for(ClsEntidadAlumnoPago alu : arrayAlumno)
        {
            try 
            {
                pstmt = con.prepareStatement(sql);
                pstmt.setString(1, alu.getId_Alumno());
                pstmt.setString(2, fecha);
                rs = pstmt.executeQuery();            
                while(rs.next())
                {
                    asistio = true;
                    hora = rs.getString("asistencia_hora");
                }
            } catch (SQLException ex) {
                Logger.getLogger(AsistenciaAdministracion.class.getName()).log(Level.SEVERE, null, ex);
            }
                        
            fila[0] = alu.getId_Alumno();            
            fila[1] = count;
            fila[2] = alu.getApellidos_Nombres();
            fila[3] = alu.getS_Alimentacion();
            fila[4] = asistio;
            fila[5] = hora;
            
            
            dtmAsistencia.addRow(fila);
            count++;
            
            if(fila[3].equals("SI"))
            {
                conAlimentacion = conAlimentacion +1;
            }
            else
            {
                sinAlimentacion = sinAlimentacion +1;
            }
            hora = "";
            asistio = false;
        }
        
        txtCon.setText(String.valueOf(conAlimentacion));
        txtSin.setText(String.valueOf(sinAlimentacion));
                
        tblAsistencia.setModel(dtmAsistencia);
        tblAsistencia.setRowHeight(20);
        
        tblAsistencia.removeColumn(tblAsistencia.getColumnModel().getColumn(0));
        
        TableColumn colOrden = tblAsistencia.getColumnModel().getColumn(0);colOrden.setMaxWidth(35);
        TableColumn colAlumno = tblAsistencia.getColumnModel().getColumn(1);colAlumno.setPreferredWidth(300);
        
        TableCellRenderer tcr =  tblAsistencia.getTableHeader().getDefaultRenderer();
        GeneralRender.MiRender miRender = new GeneralRender.MiRender(tcr);            
        tblAsistencia.setDefaultRenderer(Object.class, new Render());
        miRender.getTableCellRendererComponent(tblAsistencia, fila, true, true, WIDTH, 0);
        miRender.getTableCellRendererComponent(tblAsistencia, fila, true, true, WIDTH, 2);
        miRender.getTableCellRendererComponent(tblAsistencia, fila, true, true, WIDTH, 4);
        
        txtLoncheras.setText(seccion.LoncherasPorSalon(String.valueOf(idAula),fecha,con));
        ClsConexion.closeConnection(con);
        
        tblAsistencia.getModel().addTableModelListener(new CheckBoxModelListener());
        
    }
    
    public class CheckBoxModelListener implements TableModelListener {

        @Override
        public void tableChanged(TableModelEvent e) {
            
            int row = e.getFirstRow();
            int column = e.getColumn();
            int idAlumno;            
            if (column == 4) 
            {
                TableModel model = (TableModel) e.getSource();                
                Boolean checked = (Boolean) model.getValueAt(row, column);
                if (checked) 
                {
                    con = ClsConexion.getConection();
                    //ASISTE, CREAR REGISTRO ASISTENCIA
                    idAlumno = Integer.parseInt((String) model.getValueAt(row, 0));
                    System.out.println("Id Alumno: "+ idAlumno);
                    entidadAsitencia.setAsistencia_Alumno_Id(String.valueOf(idAlumno));
                    entidadAsitencia.setAsistencia_Fecha(formatoFechaOriginal(jdcFecha.getDate())); 
                    entidadAsitencia.setAsistencia_Hora(reloj.getText());
                    asistencia.InsertarAsistencia(entidadAsitencia, con);                    
                    ClsConexion.closeConnection(con);
                    ActualizarTablaAsistencia();
                } 
                else 
                {
                    con = ClsConexion.getConection();
                    //NO ASISTE, BORRAR REGISTRO ASISTENCIA
                    idAlumno = Integer.parseInt((String) model.getValueAt(row, 0));
                    entidadAsitencia.setAsistencia_Alumno_Id(String.valueOf(idAlumno));
                    entidadAsitencia.setAsistencia_Fecha(formatoFechaOriginal(jdcFecha.getDate())); 
                    asistencia.BorrarAsistencia(entidadAsitencia, con);
                    ClsConexion.closeConnection(con);
                    ActualizarTablaAsistencia();
                }
            }
        }
    }
    
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbxTodos;
    private javax.swing.JComboBox<String> cmbAula;
    private javax.swing.JComboBox<String> cmbPeriodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private com.toedter.calendar.JDateChooser jdcFecha;
    private javax.swing.JPanel pnlDerecha;
    private javax.swing.JPanel pnlbot;
    private javax.swing.JPanel pnltop;
    private javax.swing.JTable tblAsistencia;
    private javax.swing.JTextField txtCon;
    private javax.swing.JTextField txtLoncheras;
    private javax.swing.JTextField txtSin;
    // End of variables declaration//GEN-END:variables
}
