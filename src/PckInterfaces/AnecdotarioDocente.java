/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadAlumnoAnecdotario;
import PckEntidad.ClsEntidadAlumnoPago;
import PckEntidad.ClsEntidadAnecdotario;
import PckEntidad.ClsEntidadAnecdotarioComentario;
import PckEntidad.ClsEntidadSeccion;
import PckNegocio.ClsAlumno;
import PckNegocio.ClsAnecdotario;
import PckNegocio.ClsAnecdotarioComentario;
import PckRenderTabla.GeneralRender;
import PckRenderTabla.GeneralRender.MiRender;
import PckRenderTabla.Render;
import java.awt.Window;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import prymatricula.ClsMisc;

/**
 *
 * @author Kevin
 */
public class AnecdotarioDocente extends javax.swing.JPanel {

    ArrayList<String> codigoAula = new ArrayList();
    ArrayList<String> codigoPeriodo = new ArrayList(); 
    ArrayList<String> codigoAulaTodos = new ArrayList();
    ArrayList<String> nombreSeccion = new ArrayList(); 
    SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
    int alturaCelda = 20;
    Date date = new Date();
    Connection con=null;
    
    private String idMatricula;
    private String nombreAlumno;
    private String _idA;
    private String _estadoA;
    private String _anecdotaA;
    private String _comentarioA;
    
    /**
     * Creates new form AnecdotarioAdministracionView
     */
    public AnecdotarioDocente() {
        initComponents();
        jdcFechaAnecdotario.setDate(new Date());
        
        grupo.add(rbnFinalizado);
        grupo.add(rbnPendiente);
        grupo.add(rbnRevisado);
        grupo.add(rbnTodos);
        
        CargarComboPeriodo();
        CargarComboAula();
        
        if(!codigoAula.isEmpty())
        {
            CargarTablaAlumno();
        }
        
        CargarTablaAnecdotario();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        grupo = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnAnecdotarioNuevo = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        tpnAlumno = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAlumno = new javax.swing.JTable();
        txtBusqueda = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbAula = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cmbPeriodo = new javax.swing.JComboBox<>();
        tpnAnecdotario = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAnecdotario = new javax.swing.JTable();
        rbnPendiente = new javax.swing.JRadioButton();
        rbnRevisado = new javax.swing.JRadioButton();
        rbnFinalizado = new javax.swing.JRadioButton();
        rbnTodos = new javax.swing.JRadioButton();
        jdcFechaAnecdotario = new com.toedter.calendar.JDateChooser();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblAnecdotarioAlumno = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAnecdota = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtComentario = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        txtEstado = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtComentarioAdministracion = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblComentario = new javax.swing.JTable();

        setBackground(new java.awt.Color(237, 237, 237));
        setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(237, 237, 237));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        btnAnecdotarioNuevo.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnAnecdotarioNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_add_black_24dp.png"))); // NOI18N
        btnAnecdotarioNuevo.setText("NUEVO ANECDOTARIO");
        btnAnecdotarioNuevo.setEnabled(false);
        btnAnecdotarioNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnecdotarioNuevoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 20);
        jPanel3.add(btnAnecdotarioNuevo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel2.add(jPanel3, gridBagConstraints);

        add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBackground(new java.awt.Color(237, 237, 237));
        jPanel4.setPreferredSize(new java.awt.Dimension(911, 50));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(237, 240, 242));
        jPanel5.setMinimumSize(new java.awt.Dimension(227, 17));
        jPanel5.setPreferredSize(new java.awt.Dimension(911, 50));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        jLabel1.setText("ANECDOTARIOS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(237, 240, 242));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        tpnAlumno.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setMinimumSize(new java.awt.Dimension(350, 58));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jSeparator3.setForeground(new java.awt.Color(224, 224, 224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel6.add(jSeparator3, gridBagConstraints);

        tblAlumno.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tblAlumno.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblAlumno.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAlumno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAlumnoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAlumno);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanel6.add(jScrollPane2, gridBagConstraints);

        txtBusqueda.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtBusqueda.setMinimumSize(new java.awt.Dimension(250, 20));
        txtBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBusquedaMouseClicked(evt);
            }
        });
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel6.add(txtBusqueda, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel4.setText("Búsqueda.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        jPanel6.add(jLabel4, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Aula.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 0);
        jPanel6.add(jLabel2, gridBagConstraints);

        cmbAula.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAula.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAulaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        jPanel6.add(cmbAula, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel6.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        jPanel6.add(jLabel6, gridBagConstraints);

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel6.add(cmbPeriodo, gridBagConstraints);

        tpnAlumno.addTab("Listado Alumnos", jPanel6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel1.add(tpnAlumno, gridBagConstraints);

        tpnAnecdotario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        tblAnecdotario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAnecdotario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tblAnecdotario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblAnecdotario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAnecdotarioMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAnecdotario);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        jPanel7.add(jScrollPane3, gridBagConstraints);

        rbnPendiente.setBackground(new java.awt.Color(255, 255, 255));
        rbnPendiente.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnPendiente.setText("Pendiente");
        rbnPendiente.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnPendienteItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel7.add(rbnPendiente, gridBagConstraints);

        rbnRevisado.setBackground(new java.awt.Color(255, 255, 255));
        rbnRevisado.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnRevisado.setText("Revisado");
        rbnRevisado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnRevisadoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel7.add(rbnRevisado, gridBagConstraints);

        rbnFinalizado.setBackground(new java.awt.Color(255, 255, 255));
        rbnFinalizado.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnFinalizado.setText("Finalizado");
        rbnFinalizado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnFinalizadoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel7.add(rbnFinalizado, gridBagConstraints);

        rbnTodos.setBackground(new java.awt.Color(255, 255, 255));
        rbnTodos.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnTodos.setSelected(true);
        rbnTodos.setLabel("Todos");
        rbnTodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnTodosItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        jPanel7.add(rbnTodos, gridBagConstraints);

        jdcFechaAnecdotario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jdcFechaAnecdotario.setPreferredSize(new java.awt.Dimension(120, 22));
        jdcFechaAnecdotario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcFechaAnecdotarioPropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 20);
        jPanel7.add(jdcFechaAnecdotario, gridBagConstraints);

        tpnAnecdotario.addTab("Listado Anecdotarios", jPanel7);

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        tblAnecdotarioAlumno.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAnecdotarioAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FECHA", "ESTADO", "ANECDOTA"
            }
        ));
        tblAnecdotarioAlumno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAnecdotarioAlumnoMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblAnecdotarioAlumno);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        jPanel10.add(jScrollPane7, gridBagConstraints);

        tpnAnecdotario.addTab("Anecdotarios por alumno", jPanel10);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        jPanel1.add(tpnAnecdotario, gridBagConstraints);

        jTabbedPane1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(350, 85));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel8.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel8.setText("Anécdota.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel8.add(jLabel8, gridBagConstraints);

        txtAnecdota.setEditable(false);
        txtAnecdota.setColumns(20);
        txtAnecdota.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtAnecdota.setLineWrap(true);
        txtAnecdota.setRows(5);
        txtAnecdota.setWrapStyleWord(true);
        txtAnecdota.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(txtAnecdota);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel8.add(jScrollPane1, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel9.setText("Comentario o solución.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel8.add(jLabel9, gridBagConstraints);

        txtComentario.setEditable(false);
        txtComentario.setColumns(20);
        txtComentario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtComentario.setLineWrap(true);
        txtComentario.setRows(5);
        txtComentario.setWrapStyleWord(true);
        txtComentario.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane4.setViewportView(txtComentario);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        jPanel8.add(jScrollPane4, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel10.setText("Estado.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel8.add(jLabel10, gridBagConstraints);

        txtEstado.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtEstado.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtEstado.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel8.add(txtEstado, gridBagConstraints);

        jTabbedPane1.addTab("Detalle Anecdotario", jPanel8);

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel13.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel13.setText("Comentario administración.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel9.add(jLabel13, gridBagConstraints);

        txtComentarioAdministracion.setEditable(false);
        txtComentarioAdministracion.setColumns(20);
        txtComentarioAdministracion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtComentarioAdministracion.setLineWrap(true);
        txtComentarioAdministracion.setRows(5);
        txtComentarioAdministracion.setWrapStyleWord(true);
        txtComentarioAdministracion.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPane6.setViewportView(txtComentarioAdministracion);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        jPanel9.add(jScrollPane6, gridBagConstraints);

        jScrollPane5.setMinimumSize(new java.awt.Dimension(23, 250));

        tblComentario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblComentario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "FECHA", "PERSONA"
            }
        ));
        tblComentario.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblComentario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblComentarioMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblComentario);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel9.add(jScrollPane5, gridBagConstraints);

        jTabbedPane1.addTab("Comentario Administración", jPanel9);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 10);
        jPanel1.add(jTabbedPane1, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void txtBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBusquedaMouseClicked
        
        int fin = txtBusqueda.getHeight();
        txtBusqueda.setSelectionStart(0);
        txtBusqueda.setSelectionEnd(fin);
        
    }//GEN-LAST:event_txtBusquedaMouseClicked

    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped
        
        String a = txtBusqueda.getText();
        if(a.equals(""))
        {
            CargarTablaAlumno();
            btnAnecdotarioNuevo.setEnabled(false);
        }
        else
        {            
            CargarTablaAlumnoBusqueda(a);
            btnAnecdotarioNuevo.setEnabled(false);
        }
    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void tblAlumnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAlumnoMouseClicked
        
        int reg;
        DefaultTableModel defaultTableModel;
        reg = tblAlumno.getSelectedRow();
        if(reg == -1)
        {JOptionPane.showMessageDialog(null, "Debe Seleccionar una opción");}
        else
        {
            defaultTableModel = (DefaultTableModel)tblAlumno.getModel();
            idMatricula = ((String)defaultTableModel.getValueAt(reg, 0));
            System.out.println("idMatricula: "+idMatricula);
            nombreAlumno = (String) defaultTableModel.getValueAt(reg, 2);
            
            CargarTablaAnecdotarioAlumno(obtenerIdAlumno());
            
            btnAnecdotarioNuevo.setEnabled(true);
        }
        
    }//GEN-LAST:event_tblAlumnoMouseClicked

    private void tblAnecdotarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAnecdotarioMouseClicked
       
        
        DefaultTableModel dtm = (DefaultTableModel)tblAnecdotario.getModel();
        int row = tblAnecdotario.getSelectedRow();
        int column = tblAnecdotario.getSelectedColumn();
        String idAnecdotario="";
                
        if(row == -1)
        {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro");
        }
        else
        {
            Object value = tblAnecdotario.getValueAt(row, column);
            //btnAnecdotarioNuevo.setEnabled(false);
            try 
            {
                PreparedStatement st;
                ResultSet rs;

                String sql = "select a.anecdotario_anecdota, a.anecdotario_solucion, a.anecdotario_estado, "
                        + " DATE_FORMAT(a.anecdotario_fecha, '%d/%m/%Y') as 'fecha_anecdotario', alu.id_alumno, "
                        + " concat(alu.apellidop_alumno,' ',alu.apellidom_alumno, ', ',alu.nombre_alumno) as 'apellidos_nombres' "
                        + " from mps_anecdotario as a inner join mat_alumno as alu on a.id_alumno = alu.id_alumno"
                        + " where anecdotario_id = ?";

                idAnecdotario = ((String) dtm.getValueAt(row, 0));

                con = ClsConexion.getConection();
                System.out.println(idAnecdotario);
                st = con.prepareStatement(sql);
                st.setString(1, idAnecdotario);                
                rs = st.executeQuery();

                while (rs.next())
                {
                    _estadoA = rs.getString("anecdotario_estado");
                    _anecdotaA = rs.getString("anecdotario_anecdota");
                    _comentarioA = rs.getString("anecdotario_solucion");
                    String fecha = rs.getString("fecha_anecdotario");
                    nombreAlumno = rs.getString("apellidos_nombres");
                }
                ClsConexion.closeConnection(con);                

            } catch (SQLException ex) {
                Logger.getLogger(AnecdotarioDocente.class.getName()).log(Level.SEVERE, null, ex);
            }
                                    
            if(value instanceof JButton)
            {
                ((JButton)value).doClick();
                JButton boton = (JButton) value;
                if(boton.getName().equals("btnEditar")) //BOTON EDITAR
                {
                    Window parentWindow = SwingUtilities.windowForComponent(this);
                    AnecdotarioDocenteEditar anecdotarioDocenteNuevo = new AnecdotarioDocenteEditar
                                                    (
                                                        parentWindow,idAnecdotario, nombreAlumno,
                                                        _anecdotaA,_comentarioA,_estadoA
                                                    );
                    anecdotarioDocenteNuevo.FormularioPadre(this);
                    anecdotarioDocenteNuevo.setModal(true);
                    anecdotarioDocenteNuevo.setVisible(true);
                    anecdotarioDocenteNuevo.toFront();
                }
            }
            else
            {
                switch (_estadoA)
                {
                    case "FINALIZADO":
                        txtEstado.setText("FINALIZADO");
                        break;
                    case "PENDIENTE":
                        txtEstado.setText("PENDIENTE");
                        break;
                    case "REVISADO":
                        txtEstado.setText("REVISADO");
                        break;
                }
                txtEstado.setText(_estadoA);
                txtAnecdota.setText(_anecdotaA);
                txtComentario.setText(_comentarioA);
                CargarTablaAnecdotarioComentario(idAnecdotario);
            }
          
        }
    }//GEN-LAST:event_tblAnecdotarioMouseClicked

    private void CargarTablaAnecdotarioComentario(String idAnecdotario)
    {
        String titulos[] = {"IDComentario","IDPersonal","COMENTARIO ADMINISTRACION","FECHA","PERSONA"};
        ClsAnecdotarioComentario anecdotarios = new ClsAnecdotarioComentario();
        con = ClsConexion.getConection();
        ArrayList<ClsEntidadAnecdotarioComentario> nivel = anecdotarios.SeleccionarAnecdotarioComentario(idAnecdotario, con);
        Iterator it = nivel.iterator();
        ClsConexion.closeConnection(con); 
        DefaultTableModel dtm = new DefaultTableModel(null,titulos){ 
        @Override
        public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
        };    
        String fila[] = new String[6];
        while(it.hasNext())
        {
            ClsEntidadAnecdotarioComentario Anecdotario = (ClsEntidadAnecdotarioComentario) it.next(); 
            fila[0] = Anecdotario.getComentario_id();
            fila[1] = Anecdotario.getPersonal_id();            
            fila[2] = Anecdotario.getComentario_comentario();
            fila[3] = Anecdotario.getComentario_fecha();
            fila[4] = Anecdotario.getPersonal_nombre();            
            dtm.addRow(fila);
            
        }
        
        tblComentario.setModel(dtm);
        tblComentario.setRowHeight(alturaCelda);
        
        tblComentario.removeColumn(tblComentario.getColumnModel().getColumn(0));         
        tblComentario.removeColumn(tblComentario.getColumnModel().getColumn(0));  
        tblComentario.removeColumn(tblComentario.getColumnModel().getColumn(0)); 
        
        TableColumn  cfecha =tblComentario.getColumnModel().getColumn(0);
        cfecha.setPreferredWidth(100);
        TableColumn  cPersona =tblComentario.getColumnModel().getColumn(1);
        cPersona.setPreferredWidth(200);
        
        //CENTRAR COLUMNAS Y FILAS (ClsMisc)
        TableCellRenderer tcr =  tblAnecdotario.getTableHeader().getDefaultRenderer();                       
        MiRender mr = new MiRender(tcr);
        tblAnecdotario.setDefaultRenderer(Object.class, mr);
        mr.getTableCellRendererComponent(tblAnecdotario, fila, true, true, WIDTH, 0);
        
        //tblAnecdotario.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    
    private void tblComentarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblComentarioMouseClicked
        int reg;
        DefaultTableModel dtm;
        reg = tblComentario.getSelectedRow();
        if(reg == -1)
        {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro");
        }
        else
        {
            
            dtm = (DefaultTableModel)tblComentario.getModel();    
            System.out.println((String) dtm.getValueAt(reg, 2));
            txtComentarioAdministracion.setText((String) dtm.getValueAt(reg, 2));           
           
        }
    }//GEN-LAST:event_tblComentarioMouseClicked

    private void btnAnecdotarioNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnecdotarioNuevoActionPerformed
        String idAlumno = obtenerIdAlumno();
       
        Window parentWindow = SwingUtilities.windowForComponent(this);
        AnecdotarioDocenteNuevo anecdotarioDocenteNuevo = new AnecdotarioDocenteNuevo(parentWindow,idAlumno, nombreAlumno);
        anecdotarioDocenteNuevo.FormularioPadre(this);
        anecdotarioDocenteNuevo.setModal(true);
        anecdotarioDocenteNuevo.setVisible(true);
        anecdotarioDocenteNuevo.toFront();
    }//GEN-LAST:event_btnAnecdotarioNuevoActionPerformed

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        
        if(cmbPeriodo.getSelectedIndex() != -1)
        {
            CargarComboAula();
            
            if(cmbAula.getSelectedIndex() != -1)
            {
                CargarTablaAlumno();
                CargarTablaAnecdotario();
            }
        }
        
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void cmbAulaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAulaItemStateChanged
       
        if(cmbAula.getSelectedIndex() != -1)
        {
            CargarTablaAlumno();
            CargarTablaAnecdotario();
        }
        
    }//GEN-LAST:event_cmbAulaItemStateChanged

    private void rbnPendienteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnPendienteItemStateChanged
        if(rbnPendiente.isSelected()){
            CargarTablaAnecdotario();
        }
    }//GEN-LAST:event_rbnPendienteItemStateChanged

    private void rbnRevisadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnRevisadoItemStateChanged
        if(rbnRevisado.isSelected()) {
            CargarTablaAnecdotario();
        }
    }//GEN-LAST:event_rbnRevisadoItemStateChanged

    private void rbnFinalizadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnFinalizadoItemStateChanged
        if(rbnFinalizado.isSelected()) {
            CargarTablaAnecdotario();
        }
    }//GEN-LAST:event_rbnFinalizadoItemStateChanged

    private void rbnTodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnTodosItemStateChanged
        if(rbnTodos.isSelected()) {
            CargarTablaAnecdotario();
        }
    }//GEN-LAST:event_rbnTodosItemStateChanged

    private void jdcFechaAnecdotarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcFechaAnecdotarioPropertyChange
       if(jdcFechaAnecdotario.getDate() != null) {
            CargarTablaAnecdotario();
        }
    }//GEN-LAST:event_jdcFechaAnecdotarioPropertyChange

    private void tblAnecdotarioAlumnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAnecdotarioAlumnoMouseClicked
       DefaultTableModel dtm = (DefaultTableModel)tblAnecdotarioAlumno.getModel();
        int row = tblAnecdotarioAlumno.getSelectedRow();
        int column = tblAnecdotarioAlumno.getSelectedColumn();        
                
        if(row == -1)
        {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro");
        }
        else
        {
            Object value = tblAnecdotarioAlumno.getValueAt(row, column);
            //btnAnecdotarioNuevo.setEnabled(false);
            try 
            {
                PreparedStatement st;
                ResultSet rs;

                String sql = "select a.anecdotario_anecdota, a.anecdotario_solucion, a.anecdotario_estado, "
                        + " DATE_FORMAT(a.anecdotario_fecha, '%d/%m/%Y') as 'fecha_anecdotario', alu.id_alumno, "
                        + " concat(alu.apellidop_alumno,' ',alu.apellidom_alumno, ', ',alu.nombre_alumno) as 'apellidos_nombres' "
                        + " from mps_anecdotario as a inner join mat_alumno as alu on a.id_alumno = alu.id_alumno"
                        + " where anecdotario_id = ?";

                _idA = ((String) dtm.getValueAt(row, 0));

                con = ClsConexion.getConection();
                System.out.println(_idA);
                st = con.prepareStatement(sql);
                st.setString(1, _idA);                
                rs = st.executeQuery();

                while (rs.next())
                {
                    _estadoA = rs.getString("anecdotario_estado");
                    _anecdotaA = rs.getString("anecdotario_anecdota");
                    _comentarioA = rs.getString("anecdotario_solucion");
                    String fecha = rs.getString("fecha_anecdotario");
                    nombreAlumno = rs.getString("apellidos_nombres");
                }
                ClsConexion.closeConnection(con);                

            } catch (SQLException ex) {
                Logger.getLogger(AnecdotarioAdministracion.class.getName()).log(Level.SEVERE, null, ex);
            }
                                    
            if(value instanceof JButton)
            {
                ((JButton)value).doClick();
                JButton boton = (JButton) value;
                if(boton.getName().equals("btnEditar")) //BOTON EDITAR
                {
//                    Window parentWindow = SwingUtilities.windowForComponent(this);
//                    AnecdotarioDocenteEditar anecdotarioDocenteNuevo = new AnecdotarioDocenteEditar
//                                                    (
//                                                        parentWindow,idAnecdotario, nombreAlumno,
//                                                        _anecdotaA,_comentarioA,_estadoA
//                                                    );
//                    anecdotarioDocenteNuevo.FormularioPadre(this);
//                    anecdotarioDocenteNuevo.setModal(true);
//                    anecdotarioDocenteNuevo.setVisible(true);
//                    anecdotarioDocenteNuevo.toFront();
                }
            }
            else
            {
                switch (_estadoA)
                {
                    case "FINALIZADO":
                        txtEstado.setText("FINALIZADO");
                        break;
                    case "PENDIENTE":
                        txtEstado.setText("PENDIENTE");
                        break;
                    case "REVISADO":
                        txtEstado.setText("REVISADO");
                        break;
                }
                txtEstado.setText(_estadoA);
                txtAnecdota.setText(_anecdotaA);
                txtComentario.setText(_comentarioA);
                CargarTablaAnecdotarioComentario(_idA);
            }
          
        }
    }//GEN-LAST:event_tblAnecdotarioAlumnoMouseClicked

    public void LimpiarCampos()
    {
        txtEstado.setText("");
        txtAnecdota.setText("");
        txtComentario.setText("");
        txtComentarioAdministracion.setText("");
    }
    
    public void CargarTablaAnecdotarioAlumno(String idAlumno)
    {           
        //tblAnecdotario.setDefaultRenderer(Object.class, new DefaultTableCellRenderer());
        String titulos[] = {"ID ANECDOTARIO","FECHA","ESTADO","ANÉCDOTA",""};
        ClsAnecdotario anecdotarios = new ClsAnecdotario();
        Object fila[] = new Object[7];
        JButton btnEditar = new JButton("");
        
        con = ClsConexion.getConection();
        ArrayList<ClsEntidadAnecdotario> listaAnecdotario = anecdotarios.SeleccionarAnecdotario(idAlumno, con);        
        ClsConexion.closeConnection(con); 
        
        btnEditar.setName("btnEditar");        
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/edit_black.png")));    
        
        DefaultTableModel dtm = new DefaultTableModel(null,titulos)
        { 
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex)
            {return false;} 
        };    
        
        for(ClsEntidadAnecdotario ea : listaAnecdotario)
        {            
            try {
                fila[0] = ea.getAnecdotario_id();
                fila[1] = formato.format(formatoOriginal.parse(ea.getAnecdotario_fecha()));
                fila[2] = ea.getAnecdotario_estado();
                fila[3] = ea.getAnecdotario_anecdota();
                fila[4] = btnEditar;
                dtm.addRow(fila);
            } catch (ParseException ex) {
                Logger.getLogger(AnecdotarioDocente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }   
        
        tblAnecdotarioAlumno.setModel(dtm);
        tblAnecdotarioAlumno.setRowHeight(alturaCelda);
        
        tblAnecdotarioAlumno.removeColumn(tblAnecdotarioAlumno.getColumnModel().getColumn(0)); 
                
        TableColumn  cfecha =tblAnecdotarioAlumno.getColumnModel().getColumn(0);
        cfecha.setPreferredWidth(50);
        TableColumn  cestado =tblAnecdotarioAlumno.getColumnModel().getColumn(1);
        cestado.setPreferredWidth(100);
        TableColumn  canecdota =tblAnecdotarioAlumno.getColumnModel().getColumn(2);
        canecdota.setPreferredWidth(200);                
        TableColumn  cBoton =tblAnecdotarioAlumno.getColumnModel().getColumn(3);
        cBoton.setPreferredWidth(50);
        
        //CENTRAR COLUMNAS Y FILAS (ClsMisc)
        TableCellRenderer tcr =  tblAnecdotarioAlumno.getTableHeader().getDefaultRenderer();
        GeneralRender.MiRender miRender = new GeneralRender.MiRender(tcr);            
        tblAnecdotarioAlumno.setDefaultRenderer(Object.class, new Render());
        miRender.getTableCellRendererComponent(tblAnecdotarioAlumno, fila, true, true, WIDTH, 0);
        miRender.getTableCellRendererComponent(tblAnecdotarioAlumno, fila, true, true, WIDTH, 1);
        

    }
    
    private void CargarTablaAnecdotario()
    {
        String fecha = formatoOriginal.format(jdcFechaAnecdotario.getDate());
        String titulos[] = {"ID","ALUMNO","FECHA","ESTADO","AULA",""};
        ClsAnecdotario anecdotarios = new ClsAnecdotario();
        
        con = ClsConexion.getConection();
        String condicion ="";
        if(rbnPendiente.isSelected()) {
            condicion = "pendiente";
        }
        else if(rbnRevisado.isSelected()) {
            condicion = "revisado";
        }
        else if(rbnFinalizado.isSelected()) {
            condicion = "finalizado";
        }
        else if(rbnTodos.isSelected()) {
            condicion = "todo";
        }
        ArrayList<ClsEntidadAlumnoAnecdotario> nivel = anecdotarios.SeleccionarAnecdotarioUltimo(condicion,fecha,con);
        Iterator it = nivel.iterator();
        JButton btnEditar = new JButton("");
        ClsConexion.closeConnection(con); 
        DefaultTableModel dtm = new DefaultTableModel(null,titulos){ 
        @Override
        public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
        };
        Object fila[] = new Object[7];
        btnEditar.setName("btnEditar");        
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/edit_black.png")));    
        while(it.hasNext())
        {
            ClsEntidadAlumnoAnecdotario Anecdotario = (ClsEntidadAlumnoAnecdotario) it.next(); 
            //El array codigoSeccionTodos se lleno con las secciones asignadas al prof.
            Iterator itSecciones = codigoAulaTodos.iterator();
            //Se recorre el arrayList
            while (itSecciones.hasNext())
            {
                //Se compara con la consulta y se agregan coincidencias
                if(Anecdotario.getSeccion_id().equals(itSecciones.next()))
                {
                    try {
                        fila[0] = Anecdotario.getAnecdotario_id();
                        fila[1] = Anecdotario.getNombreCompleto();
                        fila[2] = formato.format(formatoOriginal.parse(Anecdotario.getAnecdotario_fecha()));
                        fila[3] = Anecdotario.getAnecdotario_estado();
                        fila[4] = Anecdotario.getNombre_seccion();
                        fila[5] = btnEditar;
                        dtm.addRow(fila);
                    } catch (ParseException ex) {
                        Logger.getLogger(AnecdotarioDocente.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        tblAnecdotario.setModel(dtm);
        tblAnecdotario.setRowHeight(alturaCelda);
        
        tblAnecdotario.removeColumn(tblAnecdotario.getColumnModel().getColumn(0));  
           
        TableColumn cAlumno =tblAnecdotario.getColumnModel().getColumn(0); cAlumno.setPreferredWidth(250); 
        TableColumn cFecha =tblAnecdotario.getColumnModel().getColumn(1); cFecha.setPreferredWidth(50); 
        TableColumn cEstado =tblAnecdotario.getColumnModel().getColumn(2); cEstado.setPreferredWidth(100);               
        TableColumn cAula =tblAnecdotario.getColumnModel().getColumn(3); cAula.setPreferredWidth(200);
        TableColumn  cBoton =tblAnecdotario.getColumnModel().getColumn(4);
        cBoton.setPreferredWidth(50);
        
        TableCellRenderer tcr =  tblAnecdotario.getTableHeader().getDefaultRenderer();        
        GeneralRender.MiRender miRender = new GeneralRender.MiRender(tcr); 
        tblAnecdotario.setDefaultRenderer(Object.class, new Render());
        miRender.getTableCellRendererComponent(tblAnecdotario, fila, true, true, WIDTH, 1);
        miRender.getTableCellRendererComponent(tblAnecdotario, fila, true, true, WIDTH, 2);
        miRender.getTableCellRendererComponent(tblAnecdotario, fila, true, true, WIDTH, 3);
        
        //tblAnecdotario.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        //tblAnecdotario.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    
    private void CargarComboPeriodo()
    {
        codigoPeriodo.clear();
        codigoAulaTodos.clear();
        System.out.println("Personal ="+FrmPrincipal.idPersonalLogeado);
        //comprobar si es profesor        
        ClsAnecdotario ane = new ClsAnecdotario();
        con = ClsConexion.getConection();        
        ArrayList<ClsEntidadSeccion> seccion = ane.ListarSeccionProfesor(FrmPrincipal.idPersonalLogeado, con);
        ClsConexion.closeConnection(con);        
        DefaultComboBoxModel dcbPeriodo = new DefaultComboBoxModel();
        dcbPeriodo.removeAllElements();
        cmbPeriodo.removeAllItems();
        Iterator it = seccion.iterator();
        String periodo="";
        
        while(it.hasNext())
        {           
            ClsEntidadSeccion Seccion;
            Seccion = (ClsEntidadSeccion) it.next();
            //periodo                       
            if(!periodo.equals(Seccion.getNombre_Periodo()))
            {
                dcbPeriodo.addElement(Seccion.getNombre_Periodo()); 
                codigoPeriodo.add(Seccion.getId_Periodo());                
                codigoAulaTodos.add(Seccion.getId_Seccion());
                periodo = Seccion.getNombre_Periodo();               
            }                    
        }
        cmbPeriodo.setModel(dcbPeriodo);
    }
    
    private String obtenerIdAlumno()
    {
        String aux = "";
        con = ClsConexion.getConection();
        ResultSet rs;
        try 
        {
            PreparedStatement st = con.prepareStatement("select MPS_Alumno_id_alumno from mat_matricula where"
                    + " id_matricula = ?");
            st.setString(1, idMatricula);
            rs = st.executeQuery();
            
            while(rs.next())
            {
                aux = rs.getString("MPS_Alumno_id_alumno");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AnecdotarioDocente.class.getName()).log(Level.SEVERE, null, ex);
        }
        return aux;
    }
    
    private void CargarComboAula()
    {
        codigoAula.clear();        
        ClsAnecdotario ane = new ClsAnecdotario();
        con = ClsConexion.getConection();        
        
        System.out.println("Personal ="+FrmPrincipal.idPersonalLogeado);
        
        //comprobar si es profesor        
        ArrayList<ClsEntidadSeccion> seccion = ane.ListarSeccionProfesor(FrmPrincipal.idPersonalLogeado, con);
        ClsConexion.closeConnection(con);
        DefaultComboBoxModel dcbSeccion = new DefaultComboBoxModel();
        dcbSeccion.removeAllElements();
        cmbAula.removeAllItems();        
        String sec="";
        String idPer = codigoPeriodo.get(cmbPeriodo.getSelectedIndex());
        
        //carga solo las aulas asignadas al docente
        for(ClsEntidadSeccion es : seccion)
        {              
            if(idPer.equals(es.getId_Periodo()))
            {
                dcbSeccion.addElement(es.getNombre_Seccion());
                codigoAula.add(es.getId_Seccion());
            }            
        }
        cmbAula.setModel(dcbSeccion);
    }
    
    private void CargarTablaAlumno()
    {
        int p=1;
        String idSeccion = codigoAula.get(cmbAula.getSelectedIndex());
        String titulos[] = {"ID","N°","APELLIDOS Y NOMBRES"};
        String fila[] = new String[6];  
        con = ClsConexion.getConection();
        ClsAlumno alumnos = new ClsAlumno();
        ArrayList<ClsEntidadAlumnoPago> alumnoo = alumnos.ListarAlumnoPagoSeccion(idSeccion,con);    
        
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos)
        { 
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex)
            {return false;}
        };
        
        for(ClsEntidadAlumnoPago ap : alumnoo)
        {
            fila[0] = ap.getId_Matricula();
            fila[1] = String.valueOf(p);
            fila[2] = ap.getApellidos_Nombres();
            fila[3] = ap.getId_Seccion(); 
            p++;
            defaultTableModel.addRow(fila); 
        }            
                
        ClsConexion.closeConnection(con);
        tblAlumno.setModel(defaultTableModel);
        tblAlumno.setRowHeight(alturaCelda);              
        
        tblAlumno.removeColumn(tblAlumno.getColumnModel().getColumn(0));
        TableColumn  columnaN =tblAlumno.getColumnModel().getColumn(0);
        columnaN.setPreferredWidth(30);
        TableColumn  columnaPer =tblAlumno.getColumnModel().getColumn(1);
        columnaPer.setPreferredWidth(250);
        
        
        TableCellRenderer tcr =  tblAlumno.getTableHeader().getDefaultRenderer();
        ClsMisc.miRender mr = new ClsMisc.miRender(tcr);
        mr.getTableCellRendererComponent(tblAlumno, fila, true, true, WIDTH, 0);
        tblAlumno.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);
        
    }
    
    private void CargarTablaAlumnoBusqueda(String texto)
    {
        int p=1;
        String titulos[] = {"ID","N°","APELLIDOS Y NOMBRES","AULA"};
        con = ClsConexion.getConection();
        ClsAlumno alumnos = new ClsAlumno();
        ArrayList<ClsEntidadAlumnoPago> alumnoo = alumnos.ListarAlumnoBusqueda(texto,con);
        Iterator iterator = alumnoo.iterator();                    
        String fila[] = new String[12];    
        
        DefaultTableModel dtmBusqueda =new DefaultTableModel(null,titulos)
        { 
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex)
            {return false;}
        };
        
        for(ClsEntidadAlumnoPago ap : alumnoo)
        {
            //compara el aula de la busqueda con als aulas del docente
            for(String aula : codigoAula)
            {
                if(ap.getId_Seccion().equals(aula))
                {
                    fila[0] = ap.getId_Matricula();
                    fila[1] = String.valueOf(p);
                    fila[2] = ap.getApellidos_Nombres();
                    fila[3] = ap.getNombre_Seccion();
                    fila[4] = ap.getNombre_Periodo();
                    
                    dtmBusqueda.addRow(fila);
                    p++;
                }
            }            
        }        
             
        ClsConexion.closeConnection(con);
        tblAlumno.setModel(dtmBusqueda);
        tblAlumno.setRowHeight(alturaCelda);
        
        tblAlumno.removeColumn(tblAlumno.getColumnModel().getColumn(0));
        TableColumn  columnaN =tblAlumno.getColumnModel().getColumn(0);
        columnaN.setPreferredWidth(30);
        TableColumn  colAlumno =tblAlumno.getColumnModel().getColumn(1);
        colAlumno.setPreferredWidth(250);
        TableColumn  colAula =tblAlumno.getColumnModel().getColumn(2);
        colAula.setPreferredWidth(150);
        
        TableCellRenderer tcr =  tblAlumno.getTableHeader().getDefaultRenderer();
        ClsMisc.miRender mr = new ClsMisc.miRender(tcr);
        mr.getTableCellRendererComponent(tblAlumno, fila, true, true, WIDTH, 0);
        mr.getTableCellRendererComponent(tblAlumno, fila, true, true, WIDTH, 2);
        
        tblAlumno.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }
    
    private String ObtenerIdMatricula(String _idAlumno)
    {
        String aux = "";
        con = ClsConexion.getConection();
        ResultSet rs;
        try 
        {
            PreparedStatement st = con.prepareStatement("select id_matricula from mat_matricula where"
                    + " MPS_Alumno_id_alumno = ?");
            st.setString(1, _idAlumno);
            rs = st.executeQuery();
            
            while(rs.next())
            {
                aux = rs.getString("id_matricula");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AnecdotarioDocente.class.getName()).log(Level.SEVERE, null, ex);
        }
        return aux;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnecdotarioNuevo;
    private javax.swing.JComboBox<String> cmbAula;
    private javax.swing.JComboBox<String> cmbPeriodo;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.toedter.calendar.JDateChooser jdcFechaAnecdotario;
    private javax.swing.JRadioButton rbnFinalizado;
    private javax.swing.JRadioButton rbnPendiente;
    private javax.swing.JRadioButton rbnRevisado;
    private javax.swing.JRadioButton rbnTodos;
    private javax.swing.JTable tblAlumno;
    private javax.swing.JTable tblAnecdotario;
    private javax.swing.JTable tblAnecdotarioAlumno;
    private javax.swing.JTable tblComentario;
    private javax.swing.JTabbedPane tpnAlumno;
    private javax.swing.JTabbedPane tpnAnecdotario;
    private javax.swing.JTextArea txtAnecdota;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextArea txtComentario;
    private javax.swing.JTextArea txtComentarioAdministracion;
    private javax.swing.JTextField txtEstado;
    // End of variables declaration//GEN-END:variables
}
