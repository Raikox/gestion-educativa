/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadAlumnoPago;
import PckEntidad.ClsEntidadComida;
import PckEntidad.ClsEntidadComidaAjuste;
import PckEntidad.ClsEntidadDeudas;
import PckEntidad.ClsEntidadPeriodo;
import PckEntidad.ClsEntidadSeccion;
import PckNegocio.ClsAlumno;
import PckNegocio.ClsComidaAjuste;
import PckNegocio.ClsDeudas;
import PckNegocio.ClsGenerar;
import PckNegocio.ClsMatMen;
import PckNegocio.ClsMatricula;
import PckNegocio.ClsPeriodo;
import PckNegocio.ClsSeccion;
import java.sql.Connection;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import static prymatricula.ClsMisc.formatoFecha;
import static prymatricula.ClsMisc.obtenerAnioActual;
import static prymatricula.ClsMisc.obtenerDiasDelMes;
import static prymatricula.ClsMisc.obtenerMesNombre;
import static prymatricula.ClsMisc.obtenerMesNumero;
import static prymatricula.ClsMisc.obtenerMeses;




/**
 *
 * @author Montes De Oca
 */
public class FrmLoncheraAjuste extends javax.swing.JInternalFrame {
    Connection con = null;
    String idMatricula;
    String mesSelecconado;
    Double monto, total = 0.0;
    Double pendiente = 0.0;
    int cont=0;
    DefaultTableModel dtm;
    int mes=0;
    DefaultListModel dlmFecha = new DefaultListModel();
    DefaultListModel dlmMesNombre = new DefaultListModel();
    String DeudaId;
    //almacena los codigos de Seccion del CombBox
    ArrayList<String> codigoSeccion = new ArrayList();
    //almacena los codigos de Periodo del CombBox
    ArrayList<String> codigoPeriodo = new ArrayList(); 
    
    public FrmLoncheraAjuste() {
        initComponents();
        
        cargaComboPeriodo();
        cargaComboSeccion();
        
        actualizarTablaAlumno(codigoSeccion.get(cmbSeccion.getSelectedIndex()));
        
        dlmFecha.removeAllElements();
        
        grupo.add(rdComidaSi);
        grupo.add(rdComidaNo);
        lista.setModel(dlmFecha);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblAlumno = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        txtBusqueda = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cmbPeriodo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbSeccion = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        txtAlimentacion = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPendiente = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        calendario = new com.toedter.calendar.JCalendar();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnQuitar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        rdComidaSi = new javax.swing.JRadioButton();
        rdComidaNo = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jdcComida = new com.toedter.calendar.JDateChooser();
        jLabel4 = new javax.swing.JLabel();
        btnSalir1 = new javax.swing.JButton();
        btnEditarFecha = new javax.swing.JButton();

        setTitle("Ajuste del servicio de Alimentación");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione un alumno"));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblAlumno.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblAlumno.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        tblAlumno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAlumnoMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblAlumno);

        jPanel10.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 360, 410));

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Búsqueda"));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBusqueda.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBusquedaMouseClicked(evt);
            }
        });
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });
        jPanel11.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 240, -1));

        jPanel10.add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 300, 50));

        jLabel8.setText("Seleccione Periodo:");
        jPanel10.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 80, 120, 20));

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        jPanel10.add(cmbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 220, -1));

        jLabel9.setText("Seleccione Sección:");
        jPanel10.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 130, -1, 20));

        cmbSeccion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbSeccion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSeccionItemStateChanged(evt);
            }
        });
        jPanel10.add(cmbSeccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 220, -1));

        jPanel1.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 410, 620));

        jLabel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel1.setText("Servicio de alimentación:");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, -1, 20));

        txtAlimentacion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel1.add(txtAlimentacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 40, 30, -1));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Deudas"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblPendiente.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblPendiente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "CONCEPTO", "TOTAL", "PENDIENTE"
            }
        ));
        tblPendiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPendienteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblPendiente);

        jPanel5.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 380, 160));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 80, 450, 230));

        jTabbedPane1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N

        panel.setBackground(new java.awt.Color(255, 255, 255));
        panel.setEnabled(false);
        panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione días"));
        jPanel3.setEnabled(false);
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        calendario.setEnabled(false);
        calendario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        calendario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                calendarioMouseClicked(evt);
            }
        });
        calendario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                calendarioPropertyChange(evt);
            }
        });
        jPanel3.add(calendario, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 220, 170));

        panel.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 240, 200));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Días sin lonchera"));
        jPanel4.setEnabled(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lista.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lista.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lista.setEnabled(false);
        lista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lista);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 130, 110));

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Total:");
        jLabel2.setEnabled(false);
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, -1, 20));

        txtTotal.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtTotal.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtTotal.setEnabled(false);
        jPanel4.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, 30, -1));

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel3.setText("Quitar:");
        jLabel3.setEnabled(false);
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, -1, 20));

        btnQuitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/erase.png"))); // NOI18N
        btnQuitar.setEnabled(false);
        btnQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarActionPerformed(evt);
            }
        });
        jPanel4.add(btnQuitar, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 160, 20, 20));

        panel.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 20, 180, 200));

        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/ic_mode_edit_black_24dp.png"))); // NOI18N
        btnEditar.setText("Editar servicio");
        btnEditar.setEnabled(false);
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        panel.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, -1, 30));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/ic_exit_to_app_black_24dp.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        panel.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 250, 90, 30));

        jTabbedPane1.addTab("Editar por días", panel);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rdComidaSi.setBackground(new java.awt.Color(255, 255, 255));
        rdComidaSi.setText("SI");
        rdComidaSi.setEnabled(false);
        rdComidaSi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdComidaSiItemStateChanged(evt);
            }
        });
        jPanel2.add(rdComidaSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 60, 50, 20));

        rdComidaNo.setBackground(new java.awt.Color(255, 255, 255));
        rdComidaNo.setText("NO");
        rdComidaNo.setEnabled(false);
        rdComidaNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdComidaNoItemStateChanged(evt);
            }
        });
        jPanel2.add(rdComidaNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 60, 60, 20));

        jLabel5.setText("A partir del:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 110, 60, 20));

        jdcComida.setEnabled(false);
        jPanel2.add(jdcComida, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, 170, -1));

        jLabel4.setText("Servicio:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, -1, 20));

        btnSalir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/ic_exit_to_app_black_24dp.png"))); // NOI18N
        btnSalir1.setText("Salir");
        btnSalir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalir1ActionPerformed(evt);
            }
        });
        jPanel2.add(btnSalir1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 220, 90, 30));

        btnEditarFecha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_mode_edit_black_24dp.png"))); // NOI18N
        btnEditarFecha.setText("Editar Servicio");
        btnEditarFecha.setEnabled(false);
        btnEditarFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarFechaActionPerformed(evt);
            }
        });
        jPanel2.add(btnEditarFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 220, 140, 30));

        jTabbedPane1.addTab("Editar a partir de una fecha", jPanel2);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 320, 490, 320));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblAlumnoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAlumnoMouseClicked
        int reg;
        DefaultTableModel defaultTableModel;
        reg = tblAlumno.getSelectedRow();
        if(reg == -1)
        {JOptionPane.showMessageDialog(null, "Debe Seleccionar una opción");}
        else
        {
            defaultTableModel = (DefaultTableModel)tblAlumno.getModel();
            idMatricula = ((String)defaultTableModel.getValueAt(reg, 0));
            System.out.println("idAlumno: "+idMatricula);
            ////////////////
            calendario.setEnabled(true);
            btnEditar.setEnabled(true);
            txtTotal.setEnabled(true);
            jLabel2.setEnabled(true);
            jPanel4.setEnabled(true);
            jPanel3.setEnabled(true);
            panel.setEnabled(true);
            lista.setEnabled(true);
            rdComidaSi.setEnabled(true);
            rdComidaNo.setEnabled(true);
            jdcComida.setEnabled(true);
            btnEditarFecha.setEnabled(true);
            ///////////////deudas
            mes = actualizarDatosGenerales(idMatricula);
            actualizarTablaDeuda(mes);    
            
            dlmFecha.removeAllElements();
            lista.setModel(dlmFecha);
            cont=0;
        }
    }//GEN-LAST:event_tblAlumnoMouseClicked

    private void txtBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBusquedaMouseClicked
        int fin = txtBusqueda.getHeight();
        txtBusqueda.setSelectionStart(0);
        txtBusqueda.setSelectionEnd(fin);
    }//GEN-LAST:event_txtBusquedaMouseClicked
    private int actualizarDatosGenerales(String codMatricula)
        {
            int mmes;
            String inicioClases = "";
            ClsMatricula matricula = new ClsMatricula();
            ResultSet rsMatricula;            
            Connection conx = ClsConexion.getConection();
            try 
            {
                rsMatricula = matricula.SeleccionarMatriculaSolo(codMatricula,conx);
                while(rsMatricula.next())
                {
                    
                    inicioClases = rsMatricula.getString("inicio_clases");
                    txtAlimentacion.setText(rsMatricula.getString("comida_alumno"));
                    if(rsMatricula.getString("comida_alumno").equals("SI"))
                    {
                        rdComidaSi.setSelected(true);
                    }
                    else
                    {
                        rdComidaNo.setSelected(true);
                    }
                }                
                
            } catch (Exception ex) {
                Logger.getLogger(FrmPagoTodo.class.getName()).log(Level.SEVERE, null, ex);
            }
            ClsConexion.closeConnection(conx);
            mmes = Integer.parseInt(inicioClases.substring(3, 5))-1;
            return mmes;
        }
    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped

        String a = txtBusqueda.getText();
        if(a.equals(""))
        {
           
        }
        else
        {
            actualizarTablaAlumnoBusqueda(a);
        }
    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        if(cmbPeriodo.getSelectedIndex() != -1)
        {
            cargaComboSeccion();
            actualizarTablaAlumno(codigoSeccion.get(cmbSeccion.getSelectedIndex()));
        }
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void cmbSeccionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSeccionItemStateChanged
        if(cmbSeccion.getSelectedIndex() != -1)
        {
            actualizarTablaAlumno(codigoSeccion.get(cmbSeccion.getSelectedIndex()));
        }
    }//GEN-LAST:event_cmbSeccionItemStateChanged

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        //PROCESO DE REDUCIR ALIMENTACION
        double loncheraDia = 0;
        double quitar;
        //se obtiene el monto de la alimentacion x dia
        ClsPeriodo per = new ClsPeriodo();
        try {
            ResultSet rs = per.SeleccionarPeriodo(codigoPeriodo.get(cmbPeriodo.getSelectedIndex()));
            
            while (rs.next())
            {                
                loncheraDia= Double.parseDouble(rs.getString("alimentacion_dia"));
            }            
        } catch (Exception ex) {
            Logger.getLogger(FrmPeriodo.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        //FILTRO POR MESES
        int limite = dlmFecha.getSize();
        int limite2 = dlmMesNombre.getSize();        
        int mesAnterior; 
        ClsComidaAjuste ajuste = new ClsComidaAjuste();
        ClsEntidadComidaAjuste eajuste;
        String mesNombre;
        con = ClsConexion.getConection();
        //recorre la lista de dias que se han seleccionado segun calendario
        for(int i=0;i<limite;i++)
        {
            //obtengo mes segun lista
            String fecha = dlmFecha.get(i).toString();
            mesAnterior = Integer.parseInt(fecha.substring(3, 5))-1;
            System.out.println("mes: "+mesAnterior);
            mesNombre = obtenerMesNombre(mesAnterior);
            //
            for(int j=0;j<limite2;j++)
            {
                //dlmMesNombre son los meses que tienen deudas
                String m = dlmMesNombre.get(j).toString();
                //Se verifica que los meses de la lista elegidos tengan deudas
                if(m.equals(mesNombre))
                {
                    //insertar fechas en comida_ajuste
                    eajuste = new ClsEntidadComidaAjuste(
                                "",
                                fecha,
                                DeudaId
                    );
                    
                    //System.out.println(arrayDeudaId);
                    ajuste.InsertarComidaAjuste(eajuste, con);
                }
            }
            
            //se registran los datos en la nueva tabla
        }
        
        //total a quitar = dias que no recibira servicio * precio lonchera x dia
        quitar = Double.parseDouble(txtTotal.getText()) * loncheraDia;
        ClsEntidadComida eco = new ClsEntidadComida();
        ClsMatMen mm = new ClsMatMen();        
        monto = monto - quitar;
        total = monto;
        pendiente = pendiente - quitar;
        eco.setMonto_Comida(monto);
        eco.setTotal_Comida(total);
        eco.setPendiente_Comida(pendiente);
        mm.ModificarPagoComida(idMatricula, mesSelecconado, eco, con);
        actualizarTablaDeuda(mes);
        ClsConexion.closeConnection(con);
        
    }//GEN-LAST:event_btnEditarActionPerformed

    private void calendarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_calendarioPropertyChange
        Date date = calendario.getDate();
        Date actual = new Date();
        SimpleDateFormat sdf1 = new SimpleDateFormat("MM");
        SimpleDateFormat sdf2 = new SimpleDateFormat("dd");
        String month, day, today;  
        month = obtenerMesNombre(Integer.parseInt(sdf1.format(date))-1);
        day = sdf2.format(date);
        today = sdf2.format(actual);
        System.out.println("------------------------");
        System.out.println("mes del calendar: "+month);
        System.out.println("mes seleccionado de la tabla: "+mesSelecconado);
        if(month.equals(mesSelecconado))
        {
            
                dlmFecha.addElement(formatoFecha(calendario.getDate()));
                lista.setModel(dlmFecha);
                cont++;
                txtTotal.setText(String.valueOf(cont));
                        
        }
        
    }//GEN-LAST:event_calendarioPropertyChange

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
    }//GEN-LAST:event_formComponentShown

    private void listaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaMouseClicked
        int reg = lista.getSelectedIndex();
        if(reg == -1)
        {JOptionPane.showMessageDialog(null, "Debe Seleccionar una opción");}
        else
        {
            jLabel3.setEnabled(true);
            btnQuitar.setEnabled(true);
        }
    }//GEN-LAST:event_listaMouseClicked

    private void btnQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarActionPerformed
        
        if(lista.getSelectedIndex() != -1)
        {
            cont--;
            txtTotal.setText(String.valueOf(cont));
            dlmFecha.remove(lista.getSelectedIndex());
            lista.setModel(dlmFecha);
        }
        
    }//GEN-LAST:event_btnQuitarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void tblPendienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPendienteMouseClicked
        dlmFecha.removeAllElements();
        lista.setModel(dlmFecha);
        cont=0;
        int reg;
        DefaultTableModel dtmRevision;
        reg = tblPendiente.getSelectedRow();
        int anio = Integer.parseInt(obtenerAnioActual());
        int auxMes;
        if(reg == -1)
        {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro");
        }
        else
        {
            dtmRevision = (DefaultTableModel)tblPendiente.getModel();
            DeudaId = ((String) dtmRevision.getValueAt(reg, 0));
            mesSelecconado = ((String) dtmRevision.getValueAt(reg, 1));
            monto = Double.parseDouble((String) dtmRevision.getValueAt(reg, 3));
            total = monto;
            pendiente = Double.parseDouble((String) dtmRevision.getValueAt(reg, 4));
            
            auxMes = obtenerMesNumero(mesSelecconado);
            //calculo del dia inicial y final segun mes.
            Calendar calendar = Calendar.getInstance();            
            calendar.set(anio,auxMes, 1);
            calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));            
            Date fin = calendar.getTime();            
            calendar.set(Calendar.DATE, calendar.getActualMinimum(Calendar.DATE));
            Date inicio = calendar.getTime();
            calendario.setSelectableDateRange(inicio, fin);
            
        }
        
    }//GEN-LAST:event_tblPendienteMouseClicked

    private void calendarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_calendarioMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_calendarioMouseClicked

    private void rdComidaSiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdComidaSiItemStateChanged
        
    }//GEN-LAST:event_rdComidaSiItemStateChanged

    private void rdComidaNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdComidaNoItemStateChanged
       
    }//GEN-LAST:event_rdComidaNoItemStateChanged

    private void btnSalir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalir1ActionPerformed
       this.dispose();
    }//GEN-LAST:event_btnSalir1ActionPerformed

    private void btnEditarFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarFechaActionPerformed
       if(jdcComida.getDate() != null)
       {
            if(rdComidaSi.isSelected())
            {
               ModificarComida(idMatricula,formatoFecha(jdcComida.getDate()),"SI");   
               con = ClsConexion.getConection();    
               ClsMatricula m = new ClsMatricula();
               m.ModificarMatriculaComida("SI", idMatricula,con);
               mes = actualizarDatosGenerales(idMatricula);
               ClsConexion.closeConnection(con);
               actualizarTablaDeuda(mes);
            }
            else if(rdComidaNo.isSelected())
            {
                con = ClsConexion.getConection();
                ClsMatricula m = new ClsMatricula();
                m.ModificarMatriculaComida("NO", idMatricula,con);
                ModificarComida(idMatricula,formatoFecha(jdcComida.getDate()),"NO");
                mes = actualizarDatosGenerales(idMatricula);
                ClsConexion.closeConnection(con);
                actualizarTablaDeuda(mes);
            }
           
       }
        
    }//GEN-LAST:event_btnEditarFechaActionPerformed
   
    private void ModificarComida(String codMatricula,String fechaComida, String alimentacion){
     DecimalFormat df = new DecimalFormat("0.00");           
        ClsAlumno alumnos = new ClsAlumno();
        String month[] = {"ENERO","FEBRERO","MARZO","ABRIL","MAYO","JUNIO","JULIO","AGOSTO","SEPTIEMBRE","OCTUBRE","NOVIEMBRE","DICIEMBRE"};
        
        //variables
        String inicioClases="";
        String entrada="";
        String salida="";
        
        String codSeccion="";
        String codPeriodo="";
        double comidabase = 0.00;
        double comida = 0.0;
        
        //Obtengo datos necesarios para trabajar
        ClsGenerar genera = new ClsGenerar();        
        try
        {   
            con = ClsConexion.getConection();
            ResultSet rsGenera = genera.SeleccionarPagoMatricula(codMatricula,con);      
            while(rsGenera.next())
            {
                inicioClases = rsGenera.getString("inicio_clases");
                entrada      = rsGenera.getString("horarioe_matricula");
                salida       = rsGenera.getString("horarios_matricula");
                
                codSeccion   = rsGenera.getString("seccion_id");     
                codPeriodo   = rsGenera.getString("id_periodo");
            }
            ClsConexion.closeConnection(con);
        }
        catch(Exception ex)
        {  ex.printStackTrace();  } 
        
        String mesi2;
        String mesf2 = null;
        ClsMatMen mame = new ClsMatMen();
        try 
        {
            con = ClsConexion.getConection();
            ResultSet rsPer = mame.SeleccionarFechasPeriodo(codPeriodo,con);            
            while (rsPer.next())
            {
                //mes de fin periodo
                mesf2 = rsPer.getString("fin_periodo").substring(3, 5);
            }
            ClsConexion.closeConnection(con);
        } catch (Exception ex) 
        { Logger.getLogger(FrmLoncheraAjuste.class.getName()).log(Level.SEVERE, null, ex);
        }
         mesi2 = fechaComida.substring(3, 5);
        int a2 = Integer.parseInt(mesi2)-1;  
        int i;
        int meses = obtenerMeses(mesi2,mesf2);
        
        switch (alimentacion) {
            case "SI":
                //obtener cantidad de meses para usarlo en el for (desde periodo)
                for(i=0;i<=meses;i++)
                {
                    ClsEntidadComida em = new ClsEntidadComida();
                    em.setMes_Comida(month[a2+i]);
                    //se calcula a partir de la fecha de inicio de S. Alimentación
                    //por default coincide co el inicio de clases
                    String mes2 = fechaComida.substring(3, 5);
                    String diaInicio2 = fechaComida.substring(0,2);
                    int diasmes2 = obtenerDiasDelMes(Integer.parseInt(mes2)-1);
                    int diasrestantes2 = diasmes2 - Integer.parseInt(diaInicio2)+1;
                    //Se obtiene la alimentacion base segun el periodo asignado
                    //es el precio del sevicio de alimentación
                    comidabase = obtenerAlimentacionBase(codPeriodo);
                    comida = (comidabase / diasmes2) * (diasrestantes2);
                    if(i==0) //solo para el primer mes se agrega la comida proporcional
                    {
                        em.setMonto_Comida(comida);
                        em.setTotal_Comida(comida);
                        em.setPendiente_Comida(comida);
                        int asd = a2+i+1;
                        em.setVencimiento_Comida("15/"+String.valueOf(asd)+fechaComida.substring(5));
                        em.setId_Matricula(codMatricula);
                        con = ClsConexion.getConection();
                        mame.AgregarAlumnoPagoComida(em,con);
                        ClsConexion.closeConnection(con);
                    }
                    else
                    {
                        em.setMonto_Comida(comidabase);
                        em.setTotal_Comida(comidabase);
                        em.setPendiente_Comida(comidabase);
                        int asd = a2+i+1;
                        em.setVencimiento_Comida("15/"+String.valueOf(asd)+fechaComida.substring(5));
                        em.setId_Matricula(codMatricula);
                        con = ClsConexion.getConection();
                        mame.AgregarAlumnoPagoComida(em,con);
                        ClsConexion.closeConnection(con);
                    }
                }   break;
 
                //volver si el registro de matricula
                
            case "NO":
                //eliminar con meses e id_matricula
                //se necesita a partir de que dia se va a retirar (dias que se le va a cobrar)
                //y a partir del siguiente mes se borran las deudas
                 for(i=0;i<=meses;i++)
                {
                    ClsEntidadComida em = new ClsEntidadComida();
                    em.setMes_Comida(month[a2+i]);
                    //se calcula a partir de la fecha de inicio de S. Alimentación
                    //por default coincide co el inicio de clases
                    String mes2 = fechaComida.substring(3, 5);
                    String diaInicio2 = fechaComida.substring(0,2);
                    int diasmes2 = obtenerDiasDelMes(Integer.parseInt(mes2)-1);
                    int diasrestantes2 = diasmes2 - Integer.parseInt(diaInicio2)+1;
                    //Se obtiene la alimentacion base segun el periodo asignado
                    //es el precio del sevicio de alimentación
                    //comidabase = obtenerAlimentacionBase(codPeriodo);
                    //comida = (comidabase / diasmes2) * (diasrestantes2);
                    /*
                    if(i==0) //solo para fecha que se retirara = comida proporcional
                    {
                        em.setMonto_Comida(comida);
                        em.setTotal_Comida(comida);
                        em.setPendiente_Comida(comida);
                        int asd = a2+i+1;
                        em.setVencimiento_Comida("15/"+String.valueOf(asd)+fechaComida.substring(5));
                        em.setId_Matricula(codMatricula);        
                        con = ClsConexion.getConection();
                        mame.ModificarPagoComida(codMatricula,month[a2+i],em,con);
                        ClsConexion.closeConnection(con);
                    }
                    else*/                    
                    {
                        //ELIMINAR MESES                
                        con = ClsConexion.getConection();
                       mame.EliminarPagoComida(codMatricula, month[a2+i],con);    
                       ClsConexion.closeConnection(con);
                    }
                }   break;
        }
                  
    }
    
    private Double obtenerAlimentacionBase(String CodPeriodo)
    {
        Double base=0.0;
        ClsPeriodo pe = new ClsPeriodo();
           try {
               ResultSet rsp = pe.SeleccionarPeriodo(CodPeriodo);
               while (rsp.next())
               {
                   String montox = rsp.getString("alimentacion_periodo");

                   base = Double.parseDouble(montox);

               }                          
           } catch (Exception ex) {
               Logger.getLogger(FrmLoncheraAjuste.class.getName()).log(Level.SEVERE, null, ex);
           }
           return base;
    }
    private void actualizarTablaDeuda(int mess)
    {
   
        String titulos[] = {"ID","MES","CONCEPTO","TOTAL","PENDIENTE"};
        ClsDeudas deudas = new ClsDeudas();
        con = ClsConexion.getConection();
        ArrayList<ClsEntidadDeudas> deuda = deudas.ListarDeudasSinVencer(idMatricula,con);
        ClsConexion.closeConnection(con);
        Iterator iterator = deuda.iterator();
           
            dtm =new DefaultTableModel(null,titulos);             
            String fila[] = new String[12];    
            int aux2=0;
            int aux3=0;
            
            while(iterator.hasNext())
            {
                ClsEntidadDeudas Deuda ; 
                Deuda = (ClsEntidadDeudas) iterator.next();
                fila[0] = Deuda.getId_Deuda();
                fila[1] = Deuda.getMes();
                fila[2] = Deuda.getConcepto();
                fila[3] = Deuda.getUnitario();
                fila[4] = Deuda.getImporte();                                                
                
                if(fila[2].length()>11)
                {
                    if(fila[2].substring(0,12).equals("ALIMENTACION"))
                    { 
                    //cumple, por lo tanto la siguiente palabra es un mes                    
                        switch (fila[2].substring(13)) 
                        {
                            case "ENERO":aux2 = 0;break;
                            case "FEBRERO":aux2=1;break;
                            case "MARZO":aux2=2;break;
                            case "ABRIL":aux2=3;break;
                            case "MAYO":aux2=4;break;
                            case "JUNIO":aux2=5;break;
                            case "JULIO":aux2=6;break;
                            case "AGOSTO":aux2=7;break;
                            case "SEPTIEMBRE":aux2=8;break;
                            case "OCTUBRE":aux2=9;break;
                            case "NOVIEMBRE":aux2=10;break;
                            case "DICIEMBRE":aux2=11;break;
                        }
                        //si el mes es mayor que la fecha de inicio de clases se mostrara en la tabla
                        if(aux2>=mess)
                        {
                            dtm.addRow(fila);
                            dlmMesNombre.addElement(fila[2].substring(13));                  
                        }
                        //si nada de esto ocurre comparamos que despues de ALIMENTACION haya un espacio en blanco
                        //si es asi, existen caracteres despues de ese espacio y deben mostrarse en la tabla
                        //caso "ALIMENTACION MES DE .... "
                        else if(fila[2].substring(12,13).equals(" "))
                        {
                            dtm.addRow(fila);
                        }
                    }  
                }            
            }
            tblPendiente.setModel(dtm);
            tblPendiente.removeColumn(tblPendiente.getColumnModel().getColumn(0));
            tblPendiente.removeColumn(tblPendiente.getColumnModel().getColumn(0));
            TableColumn  columnaPer =tblPendiente.getColumnModel().getColumn(0);
            columnaPer.setPreferredWidth(200);
            columnaPer.setMinWidth(170);

    }
    
    
    private void actualizarTablaAlumno(String idSeccion)
    {
        
        int p=1;
        String titulos[] = {"ID","N°","Apellidos y nombres"};
        con =ClsConexion.getConection();
        ClsAlumno alumnos = new ClsAlumno();
        ArrayList<ClsEntidadAlumnoPago> alumnoo = alumnos.ListarAlumnoPagoSeccion(idSeccion,con);
        Iterator iterator = alumnoo.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos){ 
        @Override
        public boolean isCellEditable(int rowIndex,int columnIndex){return false;}
        }; 
        System.out.println(codigoSeccion.get(cmbSeccion.getSelectedIndex()));
        String fila[] = new String[12];                
        while(iterator.hasNext())
        {
            ClsEntidadAlumnoPago Alumno;
            Alumno = (ClsEntidadAlumnoPago) iterator.next();
            fila[0] = Alumno.getId_Matricula();
            fila[1] = String.valueOf(p);
            fila[2] = Alumno.getApellidos_Nombres();
            fila[3] = Alumno.getId_Seccion(); 
                p++;
                defaultTableModel.addRow(fila); 
        }         
        ClsConexion.closeConnection(con);
        tblAlumno.setModel(defaultTableModel);
        tblAlumno.removeColumn(tblAlumno.getColumnModel().getColumn(0));
        TableColumn  columnaN =tblAlumno.getColumnModel().getColumn(0);
        columnaN.setPreferredWidth(15);
        TableColumn  columnaPer =tblAlumno.getColumnModel().getColumn(1);
        columnaPer.setPreferredWidth(250);
        
    }
    
    private void cargaComboPeriodo()
    {
        
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
        String fila[] = new String[4];

        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo;
        Periodo = (ClsEntidadPeriodo) iterator.next();               
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getEstado_Periodo();        
            if(fila[1].equals("Activo"))
            {   
            codigoPeriodo.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(fila[0]);  
            }        
        }
        cmbPeriodo.setModel(DefaultComboBoxModel);
        
    }
    
    
    private void cargaComboSeccion()
    {
        
        codigoSeccion.clear();
        ClsSeccion secciones = new ClsSeccion();
        ArrayList<ClsEntidadSeccion> seccion =  secciones.ListarSeccion();
        Iterator it = seccion.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbSeccion.removeAllItems();
        String fila2[] = new String[5];        
        while(it.hasNext())
        {
        ClsEntidadSeccion Seccion = (ClsEntidadSeccion) it.next();             
        fila2[0] = Seccion.getNombre_Seccion();
        fila2[1] = Seccion.getEstado_Periodo();       
        fila2[3] = Seccion.getNombre_Periodo();

            if (codigoPeriodo.get(cmbPeriodo.getSelectedIndex()).equals(Seccion.getId_Periodo())) 
            {
                codigoSeccion.add(Seccion.getId_Seccion());
                DefaultComboBoxModel.addElement(fila2[0]);
            }       
        }
        cmbSeccion.setModel(DefaultComboBoxModel);
        
    }
    
    private void actualizarTablaAlumnoBusqueda(String texto)
    {
        
        int p=1;
        String titulos[] = {"ID","N°","Apellidos y nombres","Sección","Periodo"};
        ClsAlumno alumnos = new ClsAlumno();
        con = ClsConexion.getConection();
        ArrayList<ClsEntidadAlumnoPago> alumnoo = alumnos.ListarAlumnoBusqueda(texto,con);
        Iterator iterator = alumnoo.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);               
        String fila[] = new String[12];                
        while(iterator.hasNext())
        {
            ClsEntidadAlumnoPago Alumno;
            Alumno = (ClsEntidadAlumnoPago) iterator.next();
            fila[0] = Alumno.getId_Matricula();
            fila[1] = String.valueOf(p);
            fila[2] = Alumno.getApellidos_Nombres();
            fila[3] = Alumno.getNombre_Seccion();
            fila[4] = Alumno.getNombre_Periodo();
            p++;
            defaultTableModel.addRow(fila);     
                      
        }
        ClsConexion.closeConnection(con);
        tblAlumno.setModel(defaultTableModel);
        tblAlumno.removeColumn(tblAlumno.getColumnModel().getColumn(0));
        TableColumn  columnaN =tblAlumno.getColumnModel().getColumn(0);
        columnaN.setPreferredWidth(12);
        TableColumn  columnaPer =tblAlumno.getColumnModel().getColumn(1);
        columnaPer.setPreferredWidth(150);
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEditarFecha;
    private javax.swing.JButton btnQuitar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnSalir1;
    private com.toedter.calendar.JCalendar calendario;
    private javax.swing.JComboBox cmbPeriodo;
    private javax.swing.JComboBox cmbSeccion;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private com.toedter.calendar.JDateChooser jdcComida;
    private javax.swing.JList<String> lista;
    private javax.swing.JPanel panel;
    private javax.swing.JRadioButton rdComidaNo;
    private javax.swing.JRadioButton rdComidaSi;
    private javax.swing.JTable tblAlumno;
    private javax.swing.JTable tblPendiente;
    private javax.swing.JTextField txtAlimentacion;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
