/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckHilo.HiloReloj;
import PckNegocio.ClsMatricula;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.awt.Color;
import java.awt.Image;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author Kevin
 */
public class AsistenciaHuella extends javax.swing.JFrame {

    private DPFPFeatureSet huellaInscripcion;
    private DPFPFeatureSet huellaVerificacion;
    private DPFPTemplate huellaPlantilla;
    
    //Inicia el dispositivo
    private final DPFPCapture FINGERPRINT_4500 = DPFPGlobal.getCaptureFactory().createCapture();
    
    //Permite inscribir una huella capturada
    private final DPFPEnrollment FINGERPRINT_ENROLLMENT = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    
    //Permite verificar una huella una huella capturada para compararla
    private final DPFPVerification FINGERPRINT_VERIFICATION = DPFPGlobal.getVerificationFactory().createVerification();

    SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
    
    HiloReloj reloj = new HiloReloj();
    
    private AudioInputStream audioCorrecto;
    private AudioInputStream audioIncorrecto;
    private Clip clipCorrecto;
    private Clip clipIncorrecto;
    
    /**
     * Creates new form AsistenciaHuella
     */
    public AsistenciaHuella() {
        initComponents();
                
        java.awt.GridBagConstraints gridBagConstraints;
        reloj.setFont(new java.awt.Font("Droid Sans", 1, 18)); // NOI18N
        reloj.setMinimumSize(new java.awt.Dimension(61, 22));
        reloj.setPreferredSize(new java.awt.Dimension(101, 22));
        reloj.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        //gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        pnlbot.add(reloj, gridBagConstraints);
                
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }

            @Override
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        pnltop = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        pnlbot = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lblHuella = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAula = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAlumno = new javax.swing.JTextField();
        lblMensaje = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Asistencia.");
        setMinimumSize(new java.awt.Dimension(769, 566));
        setPreferredSize(new java.awt.Dimension(769, 566));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new java.awt.BorderLayout());

        pnltop.setBackground(new java.awt.Color(255, 255, 255));
        pnltop.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        jLabel3.setText("ASISTENCIA POR HUELLA DIGITAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        pnltop.add(jLabel3, gridBagConstraints);

        jSeparator2.setForeground(new java.awt.Color(224, 224, 224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 269;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnltop.add(jSeparator2, gridBagConstraints);

        jPanel1.add(pnltop, java.awt.BorderLayout.PAGE_START);

        pnlbot.setBackground(new java.awt.Color(255, 255, 255));
        pnlbot.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        jLabel4.setText("Huella Digital.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlbot.add(jLabel4, gridBagConstraints);

        jSeparator3.setForeground(new java.awt.Color(224, 224, 224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlbot.add(jSeparator3, gridBagConstraints);

        lblHuella.setBackground(new java.awt.Color(204, 204, 204));
        lblHuella.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHuella.setMinimumSize(new java.awt.Dimension(250, 250));
        lblHuella.setName(""); // NOI18N
        lblHuella.setPreferredSize(new java.awt.Dimension(250, 250));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 0);
        pnlbot.add(lblHuella, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        jLabel6.setText("Aula.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlbot.add(jLabel6, gridBagConstraints);

        txtAula.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        txtAula.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAula.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtAula, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        jLabel7.setText("Alumno.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnlbot.add(jLabel7, gridBagConstraints);

        txtAlumno.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        txtAlumno.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAlumno.setEnabled(false);
        txtAlumno.setPreferredSize(new java.awt.Dimension(450, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtAlumno, gridBagConstraints);

        lblMensaje.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        lblMensaje.setMinimumSize(new java.awt.Dimension(30, 17));
        lblMensaje.setPreferredSize(new java.awt.Dimension(30, 17));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlbot.add(lblMensaje, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 14)); // NOI18N
        jLabel1.setText("HORA:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnlbot.add(jLabel1, gridBagConstraints);

        txtDescripcion.setColumns(20);
        txtDescripcion.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        txtDescripcion.setRows(5);
        jScrollPane1.setViewportView(txtDescripcion);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        pnlbot.add(jScrollPane1, gridBagConstraints);

        jPanel1.add(pnlbot, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(AsistenciaHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(AsistenciaHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(AsistenciaHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(AsistenciaHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new AsistenciaHuella().setVisible(true);
//            }
//        });
//    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        StopCapture();
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        Iniciar();
        StartCapture();
    }
    
    protected void Iniciar() {
        
        FINGERPRINT_4500.addDataListener(new DPFPDataAdapter() {

            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        
                        EnviarTexto("• La Huella Digital ha sido Capturada");
                        ProcesarCaptura(e.getSample());
                        IdentificarHuella();
                        FINGERPRINT_ENROLLMENT.clear();
                    }
                });
            }
            
        });
        
        FINGERPRINT_4500.addReaderStatusListener(new DPFPReaderStatusAdapter() {
                    
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTexto("• El Sensor de Huella Digital esta Activado o Conectado");
                    }
                });
            }
                                    
            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    }
                });
            }        
        });
        
        FINGERPRINT_4500.addSensorListener(new DPFPSensorAdapter() {
                        
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTexto("- El dedo ha sido colocado sobre el Lector de Huella");
                    }
                });
            }
            
            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTexto("- El dedo ha sido quitado del Lector de Huella");
                    }
                });
            }
        });
        
        FINGERPRINT_4500.addErrorListener(new DPFPErrorAdapter() {
            
            public void errorReader(final DPFPErrorEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTexto("Error: " + e.getError());
                    }
                });
            }
        });
        
    }
    
    private void IdentificarHuella() {
                        
        boolean exito = false;
        ClsMatricula matricula = new ClsMatricula();
        int resultadoInsert=0;
        Calendar calendario = Calendar.getInstance();
        Date fechaActual = new Date();
        String hora = calendario.get(calendario.HOUR_OF_DAY) + ":" + calendario.get(calendario.MINUTE) + ":" + calendario.get(calendario.SECOND);
        Connection con = ClsConexion.getConection();
        DPFPTemplate referenceTemplate;
        DPFPVerificationResult resultadoTemplate;
        byte templateBuffer[] = null; 
        ResultSet rs = null;
        ResultSet rsAsistenciaComprueba;        
        String idAlumno,nombreAula,nombreAlumno;
        PreparedStatement pstmt = null;
        PreparedStatement pstmtAsistenciaComprueba;
        PreparedStatement pstmtAsistenciaInserta;
        String fecha = formatoOriginal.format(fechaActual);
        String sqlQueryAsistenciaInserta = "INSERT INTO mat_asistencia (asistencia_alumno_id,asistencia_fecha,asistencia_hora,asistencia_asistencia) "
                                        + "VALUES (?,?,?,?)"; 
        
        String sqlQueryAsistenciaComprueba = "SELECT a.asistencia_asistencia FROM mat_asistencia AS a "
                + "WHERE a.asistencia_fecha = ?  AND a.asistencia_alumno_id = ?";
        
        String sqlQuery = "SELECT mh.id_matricula, mh.HuellaDigital, s.id_seccion, a.id_alumno, "
                + "CONCAT(a.nombre_alumno,' ',a.apellidop_alumno, ' ',a.apellidom_alumno) as 'alumno', "
                + "s.nombre_seccion \n" +
                "FROM mat_matricula_huella as mh\n" +
                "INNER JOIN mat_matricula as m ON mh.id_matricula = m.id_matricula\n" +
                "INNER JOIN mat_alumno as a ON m.MPS_Alumno_id_alumno = a.id_alumno\n" +
                "INNER JOIN mat_seccion as s ON m.seccion_id = s.id_seccion";
        
        try {
        audioCorrecto = AudioSystem.getAudioInputStream(getClass().getResource("/resources/sounds/correct.wav"));
        audioIncorrecto = AudioSystem.getAudioInputStream(getClass().getResource("/resources/sounds/failure.wav"));         
        clipCorrecto = AudioSystem.getClip();
        clipIncorrecto = AudioSystem.getClip();
        
        clipCorrecto.open(audioCorrecto);
        clipIncorrecto.open(audioIncorrecto);
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            Logger.getLogger(AsistenciaHuella.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            
            pstmt = con.prepareStatement(sqlQuery);
            rs = pstmt.executeQuery();
            
            while(rs.next()) {
                
                templateBuffer = rs.getBytes("HuellaDigital");
                idAlumno = rs.getString("id_alumno");
                nombreAula = rs.getString("nombre_seccion");
                nombreAlumno = rs.getString("alumno");
                referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
                EstablecerTemplate(referenceTemplate);
                resultadoTemplate = FINGERPRINT_VERIFICATION.verify(huellaVerificacion, ObtenerTemplate());
                
                if( resultadoTemplate.isVerified() ) {
                    
                    //verifica si ya tomo asistencia
                    pstmtAsistenciaComprueba = con.prepareStatement(sqlQueryAsistenciaComprueba);
                    pstmtAsistenciaComprueba.setString(1, fecha);
                    pstmtAsistenciaComprueba.setString(2, idAlumno);
                    rsAsistenciaComprueba = pstmtAsistenciaComprueba.executeQuery();
                    
                    //ya se tomo asistencia de este alumno
                    if(rsAsistenciaComprueba.next()) {
                        
                        lblMensaje.setForeground(new Color(255,51,0));
                        txtAlumno.setText(nombreAlumno);
                        txtAula.setText(nombreAula);
                        lblMensaje.setText("YA SE TOMO LA ASISTENCIA DE ESTE ALUMNO");
                        clipIncorrecto.start();
                        exito = true;
                    }
                    //no se tomo la asistencia
                    else {
                    
                        pstmtAsistenciaInserta = con.prepareStatement(sqlQueryAsistenciaInserta);
                        pstmtAsistenciaInserta.setString(1, idAlumno);
                        pstmtAsistenciaInserta.setString(2, fecha);
                        pstmtAsistenciaInserta.setString(3, reloj.getText());
                        pstmtAsistenciaInserta.setString(4, "A");
                        resultadoInsert = pstmtAsistenciaInserta.executeUpdate();
                        
                        //Error al ingresar a la base de datos
                        if(resultadoInsert == 0) {
                            lblMensaje.setForeground(new Color(255,51,0));
                            lblMensaje.setText("ERROR AL INSERTAR EN LA BASE DE DATOS");
                            clipIncorrecto.start();
                        }
                        else
                        {
                            exito = true;
                            clipCorrecto.start();
                            txtAlumno.setText(nombreAlumno);
                            txtAula.setText(nombreAula);
                            lblMensaje.setForeground(new Color(0,153,51));
                            lblMensaje.setText("ASISTENCIA TOMADA CORRECTAMENTE");                            
                        }
                    }
                }
                else {
                    //a veces la huella no coincide 100% pero se puede aceptar
                    if(exito==false) {
                        
                        txtAlumno.setText("");
                        txtAula.setText("");
                        lblMensaje.setForeground(new Color(255,51,0));
                        lblMensaje.setText("NO SE RECONOCE LA HUELLA DIGITAL");
                        clipIncorrecto.start();
                    }                    
                }
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ClsMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
    }
            
    
    private void ProcesarCaptura(DPFPSample sample) {
        
        huellaInscripcion = ExtraerCaracteristicasHuella(sample,DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT); 
        huellaVerificacion = ExtraerCaracteristicasHuella(sample,DPFPDataPurpose.DATA_PURPOSE_VERIFICATION); 
        
        //Se obtuvieron caracteristicas correctas de la huella
        if(huellaInscripcion != null) {
            
            try {
                
                //Agregamos las caracteristicas a la plantilla de inscripcion.
                FINGERPRINT_ENROLLMENT.addFeatures(huellaInscripcion);
                
                //Creamos una imagen y la mostramos en pantalla
                Image huellaImagen = ObtenerImagenHuella(sample);
                MostrarHuella(huellaImagen);
                
            } catch (DPFPImageQualityException ex) {
                Logger.getLogger(AsistenciaHuella.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                
                //Comprobamos el estado de la plantilla con la huella
                switch(FINGERPRINT_ENROLLMENT.getTemplateStatus()) {
                    
                    //Detemos la captura, guardamos el template y mostramos mensaje
                    case TEMPLATE_STATUS_READY:
                        //StopCapture();
                        EstablecerTemplate(FINGERPRINT_ENROLLMENT.getTemplate());
//                        lblMensaje.setForeground(new Color(0,153,51));
//                        lblMensaje.setText("La plantilla de huella a sido creada, puede guardar la huella.");
//                        btnGuardar.setEnabled(true);
                        
                        break;
                        
                    //Se reinicia el capturador de huellas si falla el template
                    case TEMPLATE_STATUS_FAILED:
                        FINGERPRINT_ENROLLMENT.clear();
                        StopCapture();
                        EstablecerTemplate(null);
                        txtDescripcion.setText("");
                        lblMensaje.setForeground(new Color(255,51,0));
                        lblMensaje.setText("La plantilla de huella no pudo ser creada, repita el proceso.");
                        StartCapture();
                        
                        break;
                }
            }
        }
    }    
    
    private DPFPFeatureSet ExtraerCaracteristicasHuella(DPFPSample sample, DPFPDataPurpose purpose) {
        
        DPFPFeatureExtraction extractorHuella = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        
        try {
            return extractorHuella.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException ex) {
            Logger.getLogger(AsistenciaHuella.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    
    private void EstablecerTemplate(DPFPTemplate template) {
        DPFPTemplate oldTemplate = this.huellaPlantilla;
        this.huellaPlantilla = template;        
        firePropertyChange("huellaPlantilla",oldTemplate,template);
    }
    
    private DPFPTemplate ObtenerTemplate() {
        return huellaPlantilla;
    }
    
    private Image ObtenerImagenHuella(DPFPSample sample) {
        
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }
    
    private void MostrarHuella(Image image) {
        
        int width = lblHuella.getWidth();
        int height = lblHuella.getHeight();
        
        lblHuella.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_DEFAULT)));
    }
    
    private void StartCapture() {
        
        FINGERPRINT_4500.startCapture();
        EnviarTexto("• Utilizando el dispositivo de captura.");
    }
    
    private void StopCapture() {
        FINGERPRINT_4500.stopCapture();
        EnviarTexto("• Se dejó de utilizar el dispositivo de captura.");
    }
    
    private void EnviarTexto(String string) {
        txtDescripcion.append(string + "\n");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblHuella;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JPanel pnlbot;
    private javax.swing.JPanel pnltop;
    private javax.swing.JTextField txtAlumno;
    private javax.swing.JTextField txtAula;
    private javax.swing.JTextArea txtDescripcion;
    // End of variables declaration//GEN-END:variables
}
