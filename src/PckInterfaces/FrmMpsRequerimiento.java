/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadSeccion;
import static PckInterfaces.FrmPrincipal.dskpPrincipal;
import PckNegocio.ClsAnecdotario;
import PckNegocio.ClsAsistencia;
import PckNegocio.ClsPagoAula;
import java.awt.Font;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import static prymatricula.ClsMisc.obtenerAnioActual;

/**
 *
 * @author John Kevin Montes De Oca Vizcarra
 * @email jkevin.mv@gmail.com
 */
public class FrmMpsRequerimiento extends javax.swing.JInternalFrame {
    static boolean error=false;
    Font fuente=new Font("Droid", Font.BOLD, 14);
    Connection con = null;
    
    DefaultListModel dlmItem = new DefaultListModel();
    //almacena los codigos de Seccion del CombBox
    ArrayList<String> arrayAulaId = new ArrayList();
    //almacena los codigos de Periodo del CombBox
    ArrayList<String> arrayPeriodoId = new ArrayList();       
    ArrayList<String> arrayItemId = new ArrayList();
    
    
    Boolean asistenciaModificar=true;
    
    public FrmMpsRequerimiento() {
        initComponents();
        txtUsuario.setFont(fuente);
        txtUsuario.setText(FrmPrincipal.usuarioLogeado);
        
        CargarComboPeriodo();       
        CargarComboAula();  
        
        String seleccionado = CargaComboAnio();
        cmbAnioo.setSelectedItem(seleccionado);
        
        if(lstItem.getSelectedIndex() != -1)
        {
            lstItem.setSelectedIndex(0);
        }
    }
    
    
    private void LlamaRequerimientoAula()
    {       
        
        PckInterfaces.FrmMpsRequerimientoAula obj = new PckInterfaces.FrmMpsRequerimientoAula();
        if(error==false)
        {
            int x = (dskpPrincipal.getWidth() / 2) - obj.getWidth() / 2;
            int y = (dskpPrincipal.getHeight() / 2) - obj.getHeight() / 2; 

            if (obj.isShowing()) {
                obj.setLocation(x, y);
            } else {
                dskpPrincipal.add(obj);
                obj.setLocation(x, y);
                obj.show();
                //this.dispose();
            }
         }       
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cmbPeriodo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cmbAula = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        cmbAnioo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstItem = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        txtEstado = new javax.swing.JTextArea();

        setTitle("Cumplimientos del Aula");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione su aula"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel8.setText("Seleccione Periodo:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 120, 20));

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        jPanel2.add(cmbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 220, -1));

        jLabel9.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel9.setText("Seleccione Aula:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, 20));

        cmbAula.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAula.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAulaItemStateChanged(evt);
            }
        });
        jPanel2.add(cmbAula, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 220, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 300, 150));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSalir.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_exit_to_app_black_24dp.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setToolTipText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel3.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 30, 130, 40));

        btnModificar.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_mode_edit_black_24dp.png"))); // NOI18N
        btnModificar.setText("<html> <p align=center>Evaluar</p> <p align=center>Requerimiento</p> </html>");
        btnModificar.setToolTipText("Editar asistencia");
        btnModificar.setEnabled(false);
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel3.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 130, 40));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 410, 380, 90));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("Profesor(a):");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 80, 30));

        txtUsuario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtUsuario.setDisabledTextColor(new java.awt.Color(51, 51, 51));
        txtUsuario.setEnabled(false);
        jPanel1.add(txtUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, 340, 30));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione requerimiento"));

        cmbAnioo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAnioo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAnioo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAniooItemStateChanged(evt);
            }
        });

        lstItem.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lstItem.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstItemValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstItem);

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Items añadidos.");

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel3.setText("Año:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbAnioo, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(2, 2, 2)
                            .addComponent(jLabel3))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAnioo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, 270, 280));
        jPanel4.getAccessibleContext().setAccessibleName("Seleccione cumplimiento");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Estado Cumplimiento"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEstado.setColumns(20);
        txtEstado.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        txtEstado.setLineWrap(true);
        txtEstado.setRows(5);
        txtEstado.setDisabledTextColor(new java.awt.Color(0, 0, 204));
        txtEstado.setEnabled(false);
        txtEstado.setPreferredSize(new java.awt.Dimension(270, 105));
        jPanel5.add(txtEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(16, 27, -1, 65));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(28, 280, 300, 110));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        if(cmbPeriodo.getSelectedIndex() != -1)
        {
            CargarComboAula();            
        }
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        
        if(lstItem.getSelectedIndex() != -1)
        {
            
            String id = arrayItemId.get(lstItem.getSelectedIndex());
            FrmMpsRequerimientoAula.idItem = id;
            FrmMpsRequerimientoAula.idAula = arrayAulaId.get(cmbAula.getSelectedIndex());
            FrmMpsRequerimientoAula.nombreAula = cmbAula.getSelectedItem().toString();
            FrmMpsRequerimientoAula.requerimiento = lstItem.getSelectedValue();
            LlamaRequerimientoAula();
            
        }   
        
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void cmbAniooItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAniooItemStateChanged

        if(cmbAnioo.getSelectedIndex() != -1)
        {
            CargarListaItem();
        }

    }//GEN-LAST:event_cmbAniooItemStateChanged

    private void lstItemValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstItemValueChanged
        
        if(lstItem.getSelectedIndex() != -1)
        {
            ClsPagoAula pagoAula = new ClsPagoAula();        
            Connection conexion;
            ResultSet rsResultado;
            String idItem = arrayItemId.get(lstItem.getSelectedIndex());
            conexion = ClsConexion.getConection();            
            try 
            {
                rsResultado = pagoAula.SeleccionarPagoAulaItem(conexion,idItem);
                while(rsResultado.next())
                {
                    if(rsResultado.getString("pgo_aula_estado").equals("A"))
                    {
                        btnModificar.setEnabled(true);   
                        txtEstado.setText("El item seleccionado se encuentra habilitado, puede editar el cumplimiento :D");
                    }
                    else if(rsResultado.getString("pgo_aula_estado").equals("D"))
                    {
                        btnModificar.setEnabled(false);
                        txtEstado.setText("El item seleccionado no se encuentra habilitado para su edición, contacte con el administrador :(");
                    }
                }
                
                ClsConexion.closeConnection(conexion);
            }
            catch (Exception ex) 
            {
                Logger.getLogger(FrmPagoAula.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_lstItemValueChanged

    private void cmbAulaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAulaItemStateChanged
        if(cmbAula.getSelectedIndex() != -1)
        {
            CargarListaItem();
        }
    }//GEN-LAST:event_cmbAulaItemStateChanged

    
    private void CargarListaItem() {
        
        ClsPagoAula pagoAula = new ClsPagoAula();        
        Connection conexion;
        ResultSet rsResultado;
        String anio;
        
        dlmItem.removeAllElements();
        arrayItemId.clear();
                
        conexion = ClsConexion.getConection();
        anio = cmbAnioo.getSelectedItem().toString();
        String id="0";
        
        try
        {
            id= arrayAulaId.get(cmbAula.getSelectedIndex());
        }        
        catch(Exception exx)
        {
            JOptionPane.showMessageDialog(null, "Usted no tiene un aula asignada.");
        }
        try 
        {
            
            rsResultado = pagoAula.SeleccionarPagoAulaRelacion(id,conexion);
            while(rsResultado.next())
            {
                if(rsResultado.getString("pgo_aula_anio").equals(anio))
                {
                    dlmItem.addElement(rsResultado.getString("pgo_aula_nombre"));
                    arrayItemId.add(rsResultado.getString("pgo_aula_id"));
                }                
            }
            lstItem.setModel(dlmItem);
            ClsConexion.closeConnection(conexion);
        }
        catch (Exception ex) 
        {
            Logger.getLogger(FrmPagoAula.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
    private String CargaComboAnio() {        
        
        cmbAnioo.removeAllItems();
        //obtengo año actual
        int Anioactual = Integer.parseInt(obtenerAnioActual());   
        int burbuja[] = new int[4];
        //lleno la matriz inicial (2015-2014-2013-2012-2011)
        //es necesario ordenarla
        for (int i=0;i<4;i++)
        {
           burbuja[i] = Anioactual - i;
        }        
        int temp;
        for(int m=0;m<burbuja.length;m++)//recorre cada elemento
        {            
            for(int n=0;n<burbuja.length-1;n++)//el elemento es comparado con todos
            {                
                if(burbuja[n]>burbuja[n+1]) //+1 porque ya tomamos el valor 0
                {
                    temp = burbuja[n];
                    burbuja[n] = burbuja[n+1];
                    burbuja[n+1] = temp;
                }
            }
        }
        //agrego los años ordenados
        for(int o=0;o<burbuja.length;o++)
        {
            
            cmbAnioo.addItem(String.valueOf(burbuja[o]));
        }        
        //agrego los 4 años siguientes
        for (int j=1;j<5;j++)
        {
           
           cmbAnioo.addItem(String.valueOf(Anioactual + j));
        }
        
        return String.valueOf(Anioactual);
        
    }
    
    private void CargarComboPeriodo() {
        
        arrayPeriodoId.clear();       
        System.out.println("Personal ="+FrmPrincipal.idPersonalLogeado);
        //comprobar si es profesor        
        ClsAnecdotario ane = new ClsAnecdotario();
        con = ClsConexion.getConection();        
        ArrayList<ClsEntidadSeccion> seccion = ane.ListarSeccionProfesor(FrmPrincipal.idPersonalLogeado, con);
        ClsConexion.closeConnection(con);        
        DefaultComboBoxModel dcbPeriodo = new DefaultComboBoxModel();
        dcbPeriodo.removeAllElements();
        cmbPeriodo.removeAllItems();
        Iterator it = seccion.iterator();
        String periodo="";        
        while(it.hasNext())
        {           
            ClsEntidadSeccion Seccion;
            Seccion = (ClsEntidadSeccion) it.next();
            //periodo                       
            if(!periodo.equals(Seccion.getNombre_Periodo()))
            {
                dcbPeriodo.addElement(Seccion.getNombre_Periodo()); 
                arrayPeriodoId.add(Seccion.getId_Periodo());               
                
                periodo = Seccion.getNombre_Periodo();               
            }                    
        }
        cmbPeriodo.setModel(dcbPeriodo);
        
    }
    
    private void CargarComboAula() {
        
        arrayAulaId.clear();       
        System.out.println("Personal ="+FrmPrincipal.idPersonalLogeado);
        //comprobar si es profesor        
        ClsAnecdotario ane = new ClsAnecdotario();
        con = ClsConexion.getConection();        
        ArrayList<ClsEntidadSeccion> seccion = ane.ListarSeccionProfesor(FrmPrincipal.idPersonalLogeado, con);
        ClsConexion.closeConnection(con);
        DefaultComboBoxModel dcbSeccion = new DefaultComboBoxModel();
        dcbSeccion.removeAllElements();
        cmbAula.removeAllItems();
        Iterator it = seccion.iterator();
        String sec="";        
        while(it.hasNext())
        {           
            ClsEntidadSeccion Seccion;
            Seccion = (ClsEntidadSeccion) it.next();
            //seccion      
            if(!sec.equals(Seccion.getNombre_Seccion()))
            {                
                if(arrayPeriodoId.get(cmbPeriodo.getSelectedIndex()).equals(Seccion.getId_Periodo()))
                {
                    dcbSeccion.addElement(Seccion.getNombre_Seccion()); 
                    arrayAulaId.add(Seccion.getId_Seccion());
                    sec = Seccion.getNombre_Seccion();
                }                
            }
        }
        cmbAula.setModel(dcbSeccion);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JComboBox<String> cmbAnioo;
    private javax.swing.JComboBox cmbAula;
    private javax.swing.JComboBox cmbPeriodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> lstItem;
    private javax.swing.JTextArea txtEstado;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
