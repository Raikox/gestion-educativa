/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckNegocio.ClsMatricula;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import java.awt.Color;
import java.awt.Image;
import java.awt.Window;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author Kevin
 */
public class MatriculaHuellaEditar extends javax.swing.JDialog {

    int idMatricula;
    String nombreAlumno;
    boolean tieneHuella = false;
    public MatriculaHuella matriculaHuella;    
    
    //Variables para almacenar las caracteristicas de la huella
    private DPFPFeatureSet huellaInscripcion;
    private DPFPFeatureSet huellaVerificacion;
    
    //Template de la huella donde se almacena las caracteristicas d ela huella
    private DPFPTemplate huellaPlantilla;
    
    //Inicia el dispositivo
    private final DPFPCapture FINGERPRINT_4500 = DPFPGlobal.getCaptureFactory().createCapture();
    
    //Permite inscribir una huella capturada
    private final DPFPEnrollment FINGERPRINT_ENROLLMENT = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    
    //Permite verificar una huella una huella capturada para compararla
    private final DPFPVerification FINGERPRINT_VERIFICATION = DPFPGlobal.getVerificationFactory().createVerification();
    
    private AudioInputStream audioCorrecto;
    private AudioInputStream audioIncorrecto;
    private Clip clipCorrecto;
    private Clip clipIncorrecto;
        
    /**
     * Creates new form MatriculaHuellaEditar
     * @param parentWindow
     * @param idMatricula
     * @param nombreAlumno
     * @param tieneHuella
     */
    public MatriculaHuellaEditar(Window parentWindow, int idMatricula, String nombreAlumno, boolean tieneHuella) {
        super(parentWindow);
        this.idMatricula = idMatricula;
        this.nombreAlumno = nombreAlumno;
        this.tieneHuella = tieneHuella;
        initComponents();
        
        this.setTitle(nombreAlumno);
        this.setLocationRelativeTo(null);
                
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            
            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }

            @Override
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnlDerecha = new javax.swing.JPanel();
        pnltop = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        pnlbot = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        btnGuardar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescripcionHuella = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        lblHuella = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtDescripcionDedos = new javax.swing.JTextArea();
        lblMensaje = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(769, 566));
        setPreferredSize(new java.awt.Dimension(769, 566));

        pnlDerecha.setBackground(new java.awt.Color(255, 255, 255));
        pnlDerecha.setMinimumSize(new java.awt.Dimension(618, 442));
        pnlDerecha.setPreferredSize(new java.awt.Dimension(618, 442));
        pnlDerecha.setLayout(new java.awt.BorderLayout());

        pnltop.setBackground(new java.awt.Color(255, 255, 255));
        pnltop.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        jLabel3.setText("EDITAR HUELLA DIGITAL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        pnltop.add(jLabel3, gridBagConstraints);

        jSeparator2.setForeground(new java.awt.Color(224, 224, 224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 269;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnltop.add(jSeparator2, gridBagConstraints);

        pnlDerecha.add(pnltop, java.awt.BorderLayout.PAGE_START);

        pnlbot.setBackground(new java.awt.Color(255, 255, 255));
        pnlbot.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        jLabel4.setText("Huella Digital.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlbot.add(jLabel4, gridBagConstraints);

        jSeparator3.setForeground(new java.awt.Color(224, 224, 224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        pnlbot.add(jSeparator3, gridBagConstraints);

        btnGuardar.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_save_black_24dp.png"))); // NOI18N
        btnGuardar.setText("GUARDAR HUELLA");
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setEnabled(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 20);
        pnlbot.add(btnGuardar, gridBagConstraints);

        jScrollPane3.setMinimumSize(new java.awt.Dimension(200, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 96));

        txtDescripcionHuella.setColumns(20);
        txtDescripcionHuella.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        txtDescripcionHuella.setRows(5);
        txtDescripcionHuella.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDescripcionHuella.setEnabled(false);
        txtDescripcionHuella.setPreferredSize(new java.awt.Dimension(264, 95));
        jScrollPane3.setViewportView(txtDescripcionHuella);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(jScrollPane3, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        jLabel5.setText("Descripcion Captura Huella.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlbot.add(jLabel5, gridBagConstraints);

        lblHuella.setBackground(new java.awt.Color(204, 204, 204));
        lblHuella.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblHuella.setMinimumSize(new java.awt.Dimension(140, 250));
        lblHuella.setPreferredSize(new java.awt.Dimension(140, 250));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 0);
        pnlbot.add(lblHuella, gridBagConstraints);

        jScrollPane4.setMinimumSize(new java.awt.Dimension(200, 100));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(250, 96));

        txtDescripcionDedos.setColumns(20);
        txtDescripcionDedos.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        txtDescripcionDedos.setRows(5);
        txtDescripcionDedos.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDescripcionDedos.setEnabled(false);
        txtDescripcionDedos.setPreferredSize(new java.awt.Dimension(264, 95));
        jScrollPane4.setViewportView(txtDescripcionDedos);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        pnlbot.add(jScrollPane4, gridBagConstraints);

        lblMensaje.setFont(new java.awt.Font("Droid Sans", 0, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnlbot.add(lblMensaje, gridBagConstraints);

        pnlDerecha.add(pnlbot, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlDerecha, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        StopCapture();
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        Iniciar();
        StartCapture();
    }
    
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        ByteArrayInputStream huellaDatos = new ByteArrayInputStream(huellaPlantilla.serialize());
        int huellaSize = huellaPlantilla.serialize().length;
        int resultado;
        
        ClsMatricula matricula = new ClsMatricula();
        Connection con = ClsConexion.getConection();
        
        //Tiene huella - Update
        if(tieneHuella) {
            
            resultado = matricula.ActualizarMatriculaHuella(idMatricula, huellaDatos, huellaSize, con);
        }
        //No tiene huella - Insert
        else {
            
            resultado = matricula.InsertarMatriculaHuella(idMatricula, huellaDatos, huellaSize, con);            
        }
            
        ClsConexion.closeConnection(con);
        
        if(resultado == 1) {
            JOptionPane.showMessageDialog(null, "Huella guardada correctamente.", "Operacion exitosa", JOptionPane.INFORMATION_MESSAGE);
            matriculaHuella.CargarTablaAlumnoHuella();
            this.dispose();
        }
        else {
            JOptionPane.showMessageDialog(null, "Error al guardar la huella en la base de datos.", "Operacion fallida", JOptionPane.ERROR_MESSAGE);            
        }        

    }//GEN-LAST:event_btnGuardarActionPerformed

    protected void Iniciar() {
        
        FINGERPRINT_4500.addDataListener(new DPFPDataAdapter() {

            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        
                        EnviarTextoHuella("• La Huella Digital ha sido Capturada");
                        ProcesarCaptura(e.getSample());
                    }
                });
            }
            
        });
        
        FINGERPRINT_4500.addReaderStatusListener(new DPFPReaderStatusAdapter() {
                    
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTextoHuella("• El Sensor de Huella Digital esta Activado o Conectado");
                    }
                });
            }
                                    
            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTextoHuella("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    }
                });
            }        
        });
        
        FINGERPRINT_4500.addSensorListener(new DPFPSensorAdapter() {
                        
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTextoDedo("- El dedo ha sido colocado sobre el Lector de Huella");
                    }
                });
            }
            
            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTextoDedo("- El dedo ha sido quitado del Lector de Huella");
                    }
                });
            }
        });
        
        FINGERPRINT_4500.addErrorListener(new DPFPErrorAdapter() {
            
            public void errorReader(final DPFPErrorEvent e) {
                
                SwingUtilities.invokeLater(new Runnable() {
                    
                    @Override
                    public void run() {
                        EnviarTextoHuella("Error: " + e.getError());
                    }
                });
            }
        });
        
    }
    
    private void ProcesarCaptura(DPFPSample sample) {
        
        huellaInscripcion = ExtraerCaracteristicasHuella(sample,DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT); 
        huellaVerificacion = ExtraerCaracteristicasHuella(sample,DPFPDataPurpose.DATA_PURPOSE_VERIFICATION); 
        
        try {
        audioCorrecto = AudioSystem.getAudioInputStream(getClass().getResource("/resources/sounds/correct.wav"));
        audioIncorrecto = AudioSystem.getAudioInputStream(getClass().getResource("/resources/sounds/failure.wav"));         
        clipCorrecto = AudioSystem.getClip();
        clipIncorrecto = AudioSystem.getClip();
        
        clipCorrecto.open(audioCorrecto);
        clipIncorrecto.open(audioIncorrecto);
        } catch (UnsupportedAudioFileException | IOException | LineUnavailableException ex) {
            Logger.getLogger(MatriculaHuellaEditar.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Se obtuvieron caracteristicas correctas de la huella
        if(huellaInscripcion != null) {
            
            try {
                
                //Agregamos las caracteristicas a la plantilla de inscripcion.
                FINGERPRINT_ENROLLMENT.addFeatures(huellaInscripcion);
                
                //Creamos una imagen y la mostramos en pantalla
                Image huellaImagen = ObtenerImagenHuella(sample);
                MostrarHuella(huellaImagen);
                
            } catch (DPFPImageQualityException ex) {
                Logger.getLogger(MatriculaHuellaEditar.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                
                //Comprobamos el estado de la plantilla con la huella
                switch(FINGERPRINT_ENROLLMENT.getTemplateStatus()) {
                    
                    //Detemos la captura, guardamos el template y mostramos mensaje
                    case TEMPLATE_STATUS_READY:
                        StopCapture();
                        EstablecerTemplate(FINGERPRINT_ENROLLMENT.getTemplate());
                        lblMensaje.setForeground(new Color(0,153,51));
                        lblMensaje.setText("La plantilla de huella a sido creada, puede guardar la huella.");
                        clipCorrecto.start();
                        btnGuardar.setEnabled(true);
                        
                        break;
                        
                    //Se reinicia el capturador de huellas si falla el template
                    case TEMPLATE_STATUS_FAILED:
                        FINGERPRINT_ENROLLMENT.clear();
                        StopCapture();
                        EstablecerTemplate(null);
                        btnGuardar.setEnabled(false);
                        txtDescripcionHuella.setText("");
                        txtDescripcionDedos.setText("");
                        lblMensaje.setForeground(new Color(255,51,0));
                        clipIncorrecto.start();
                        lblMensaje.setText("La plantilla de huella no pudo ser creada, repita el proceso.");
                        StartCapture();
                        
                        break;
                }
            }
        }
    }
    
    private DPFPFeatureSet ExtraerCaracteristicasHuella(DPFPSample sample, DPFPDataPurpose purpose) {
        
        DPFPFeatureExtraction extractorHuella = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        
        try {
            return extractorHuella.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException ex) {
            Logger.getLogger(MatriculaHuellaEditar.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
    }
    
    private void StartCapture() {
        
        FINGERPRINT_4500.startCapture();
        EnviarTextoHuella("• Utilizando el dispositivo de captura.");
    }
    
    private void StopCapture() {
        FINGERPRINT_4500.stopCapture();
        EnviarTextoHuella("• Se dejó de utilizar el dispositivo de captura.");
    }
    
    private void EstablecerTemplate(DPFPTemplate template) {
        DPFPTemplate oldTemplate = this.huellaPlantilla;
        this.huellaPlantilla = template;        
        firePropertyChange("huellaPlantilla",oldTemplate,template);
    }
    
    private DPFPTemplate ObtenerTemplate() {
        return huellaPlantilla;
    }
    
    private void EnviarTextoHuella(String string) {
        txtDescripcionHuella.append(string + "\n");
    }
    
    private void EnviarTextoDedo(String string) {
        txtDescripcionDedos.append(string + "\n");
    }
    /**
    * @description Crea una imagen a partir de la huella capturada
    */
    private Image ObtenerImagenHuella(DPFPSample sample) {
        
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }
    
    /**
     * @description Muestra la huella capturada en pantalla
     * @param image 
     */
    private void MostrarHuella(Image image) {
        
        int width = lblHuella.getWidth();
        int height = lblHuella.getHeight();
        
        lblHuella.setIcon(new ImageIcon(image.getScaledInstance(width, height, Image.SCALE_DEFAULT)));
    }

    public void FormularioPadre(MatriculaHuella matriculaHuella)
    {
        this.matriculaHuella = matriculaHuella;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel lblHuella;
    private javax.swing.JLabel lblMensaje;
    private javax.swing.JPanel pnlDerecha;
    private javax.swing.JPanel pnlbot;
    private javax.swing.JPanel pnltop;
    private javax.swing.JTextArea txtDescripcionDedos;
    private javax.swing.JTextArea txtDescripcionHuella;
    // End of variables declaration//GEN-END:variables
}


