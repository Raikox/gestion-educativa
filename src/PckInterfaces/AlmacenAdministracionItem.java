/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadPeriodo;
import PckEntidad.ClsEntidadSeccion;
import PckNegocio.ClsPeriodo;
import PckNegocio.ClsSeccion;
import PckRenderTabla.GeneralRender;
import PckRenderTabla.Render;
import mpsModel.AlmacenModelo;
import java.awt.Window;
import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import mpsDAL.ItemDAL;
import mpsDAL.ItemStockDAL;
import mpsEntity.ItemStockEntity;
import mpsModel.MatriculaModelo;


/**
 *
 * @author Kevin
 */
public class AlmacenAdministracionItem extends javax.swing.JPanel {

    AlmacenModelo almacenModelo = new AlmacenModelo();
    ItemDAL itemDAL = new ItemDAL();
    MatriculaModelo matriculaModelo = new MatriculaModelo();
    ArrayList<String> arrayIdPeriodo = new ArrayList(); 
    ArrayList<Object> arrayIdAula = new ArrayList<>();
    ArrayList<String> arrayAlmacenId = new ArrayList();
    int IdItem;
    int UniAsignadas;
    boolean Consumo = true;
    /**
     * Creates new form AlmacenAdministracionn
     */
    public AlmacenAdministracionItem() {
        initComponents();
               
        grupo.add(rbnConsumo);
        grupo.add(rbnInventario);
        
        
        CargarComboPeriodo();
        
        if(cmbPeriodo.getSelectedIndex() != -1) {
            
            int idPeriodo = Integer.parseInt(arrayIdPeriodo.get(cmbPeriodo.getSelectedIndex()));
            arrayIdAula = matriculaModelo.MostrarComboAulasPeriodo(
                    cmbAula, idPeriodo
                );
            
            if(!arrayIdAula.isEmpty())
            {
                CargarComboAlmacen();

                if(!arrayAlmacenId.isEmpty()) {
                    CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),Consumo);
                }

            } 
        }        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        grupo = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        pnlIzquierda = new javax.swing.JPanel();
        pnlIbot = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        btnAsignar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        cmbAlmacen = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        cmbAula = new javax.swing.JComboBox<>();
        btnVer = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        rbnConsumo = new javax.swing.JRadioButton();
        rbnInventario = new javax.swing.JRadioButton();
        cmbPeriodo = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlDerecha = new javax.swing.JPanel();
        pnlbot = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtMedida = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescripcion = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        txtRestantes = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtAsignadas = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtUtilizadas = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblUnidades = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtPersona = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(583, 414));
        setPreferredSize(new java.awt.Dimension(583, 414));
        setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(237, 237, 237));
        jPanel4.setPreferredSize(new java.awt.Dimension(911, 50));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(237, 240, 242));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        jLabel1.setText("ADMINISTRAR ITEMS ALMACEN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jPanel5, gridBagConstraints);

        add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel1.setBackground(new java.awt.Color(237, 240, 242));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(null);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        pnlIzquierda.setBackground(new java.awt.Color(255, 255, 255));
        pnlIzquierda.setMinimumSize(new java.awt.Dimension(200, 390));
        pnlIzquierda.setPreferredSize(new java.awt.Dimension(400, 10));
        pnlIzquierda.setLayout(new java.awt.BorderLayout());

        pnlIbot.setBackground(new java.awt.Color(255, 255, 255));
        pnlIbot.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setMinimumSize(new java.awt.Dimension(23, 250));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(452, 420));

        tblItems.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblItems.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblItems);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        pnlIbot.add(jScrollPane1, gridBagConstraints);

        btnAsignar.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnAsignar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_add_black_24dp.png"))); // NOI18N
        btnAsignar.setText("ASIGNAR ALMACEN");
        btnAsignar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAsignar.setEnabled(false);
        btnAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAsignarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 20);
        pnlIbot.add(btnAsignar, gridBagConstraints);

        btnNuevo.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_add_black_24dp.png"))); // NOI18N
        btnNuevo.setText("NUEVO ITEM");
        btnNuevo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 20);
        pnlIbot.add(btnNuevo, gridBagConstraints);

        cmbAlmacen.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAlmacen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAlmacenItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        pnlIbot.add(cmbAlmacen, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel11.setText("Tipo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlIbot.add(jLabel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel12.setText("Aula.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        pnlIbot.add(jLabel12, gridBagConstraints);

        cmbAula.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAula.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAulaItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        pnlIbot.add(cmbAula, gridBagConstraints);

        btnVer.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/eye.png"))); // NOI18N
        btnVer.setText("<html> <p align=center>Ver items</p> <p align=center>sin asignar</p> </html>");
        btnVer.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnVer.setMinimumSize(new java.awt.Dimension(130, 50));
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlIbot.add(btnVer, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel14.setText("Almacen.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 0);
        pnlIbot.add(jLabel14, gridBagConstraints);

        rbnConsumo.setBackground(new java.awt.Color(255, 255, 255));
        rbnConsumo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnConsumo.setSelected(true);
        rbnConsumo.setText("DE CONSUMO");
        rbnConsumo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnConsumoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlIbot.add(rbnConsumo, gridBagConstraints);

        rbnInventario.setBackground(new java.awt.Color(255, 255, 255));
        rbnInventario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnInventario.setText("INVENTARIO");
        rbnInventario.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbnInventarioItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlIbot.add(rbnInventario, gridBagConstraints);

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlIbot.add(cmbPeriodo, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel8.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlIbot.add(jLabel8, gridBagConstraints);

        pnlIzquierda.add(pnlIbot, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(pnlIzquierda, gridBagConstraints);

        jTabbedPane1.setBackground(new java.awt.Color(237, 237, 237));
        jTabbedPane1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N

        pnlDerecha.setBackground(new java.awt.Color(255, 255, 255));
        pnlDerecha.setMinimumSize(new java.awt.Dimension(200, 414));
        pnlDerecha.setPreferredSize(new java.awt.Dimension(170, 400));
        pnlDerecha.setLayout(new java.awt.BorderLayout());

        pnlbot.setBackground(new java.awt.Color(255, 255, 255));
        pnlbot.setLayout(new java.awt.GridBagLayout());

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel4.setText("Descripcion.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel5.setText("U. Medida.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel5, gridBagConstraints);

        txtMedida.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMedida.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMedida.setEnabled(false);
        txtMedida.setMinimumSize(new java.awt.Dimension(200, 20));
        txtMedida.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtMedida, gridBagConstraints);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 100));
        jScrollPane2.setPreferredSize(new java.awt.Dimension(250, 96));

        txtDescripcion.setColumns(20);
        txtDescripcion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtDescripcion.setRows(5);
        txtDescripcion.setWrapStyleWord(true);
        txtDescripcion.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtDescripcion.setEnabled(false);
        txtDescripcion.setPreferredSize(new java.awt.Dimension(264, 95));
        jScrollPane2.setViewportView(txtDescripcion);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        pnlbot.add(jScrollPane2, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel6.setText("U. Restantes.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel6, gridBagConstraints);

        txtRestantes.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtRestantes.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtRestantes.setEnabled(false);
        txtRestantes.setMinimumSize(new java.awt.Dimension(200, 20));
        txtRestantes.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtRestantes, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel7.setText("Nombre.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel7, gridBagConstraints);

        txtNombre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtNombre.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtNombre.setEnabled(false);
        txtNombre.setMinimumSize(new java.awt.Dimension(200, 20));
        txtNombre.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtNombre, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel9.setText("U. Asignadas.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel9, gridBagConstraints);

        txtAsignadas.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtAsignadas.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtAsignadas.setEnabled(false);
        txtAsignadas.setMinimumSize(new java.awt.Dimension(200, 20));
        txtAsignadas.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtAsignadas, gridBagConstraints);

        jLabel10.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel10.setText("U. Utilizadas");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlbot.add(jLabel10, gridBagConstraints);

        txtUtilizadas.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtUtilizadas.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtUtilizadas.setEnabled(false);
        txtUtilizadas.setMinimumSize(new java.awt.Dimension(200, 20));
        txtUtilizadas.setPreferredSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        pnlbot.add(txtUtilizadas, gridBagConstraints);

        pnlDerecha.add(pnlbot, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Detalle Item", pnlDerecha);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane5.setMinimumSize(new java.awt.Dimension(23, 250));
        jScrollPane5.setPreferredSize(new java.awt.Dimension(300, 350));

        tblUnidades.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        tblUnidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "FECHA", "U. ASIGNADAS"
            }
        ));
        tblUnidades.setEnabled(false);
        tblUnidades.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblUnidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblUnidadesMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblUnidades);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 0, 20);
        jPanel2.add(jScrollPane5, gridBagConstraints);

        btnAgregar.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_add_black_24dp.png"))); // NOI18N
        btnAgregar.setText("AGREGAR UNIDADES");
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.setEnabled(false);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 20, 20);
        jPanel2.add(btnAgregar, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        jLabel13.setText("Persona.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        jPanel2.add(jLabel13, gridBagConstraints);

        txtPersona.setFont(new java.awt.Font("Droid Sans", 0, 12)); // NOI18N
        txtPersona.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPersona.setEnabled(false);
        txtPersona.setMinimumSize(new java.awt.Dimension(250, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(10, 20, 20, 20);
        jPanel2.add(txtPersona, gridBagConstraints);

        jSeparator1.setForeground(new java.awt.Color(224, 224, 224));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jSeparator1, gridBagConstraints);

        jTabbedPane1.addTab("Unidades Asignadas", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(jTabbedPane1, gridBagConstraints);

        jScrollPane3.setViewportView(jPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel1.add(jScrollPane3, gridBagConstraints);

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAsignarActionPerformed
        
        int FilasSeleccionadas[] = tblItems.getSelectedRows();
        int IdSeleccionados[] = new int[FilasSeleccionadas.length];
        String _Nombre[] = new String[FilasSeleccionadas.length];
        String _Medida[] = new String[FilasSeleccionadas.length];
        int _Stock[]  = tblItems.getSelectedRows();
        String _Descripcion[] = new String[FilasSeleccionadas.length];
        String _Tipo[] = new String[FilasSeleccionadas.length];
        String auxTipo;
        DefaultTableModel dtmItems = (DefaultTableModel) tblItems.getModel();
       
        if(FilasSeleccionadas.length != 0)
        {
            if(Consumo)
            {
                auxTipo = "DE CONSUMO";
            }
            else
            {
                auxTipo = "INVENTARIO";
            }
            for(int i = 0; i<FilasSeleccionadas.length; i++)
            {               
                IdSeleccionados[i] = (int) dtmItems.getValueAt(FilasSeleccionadas[i], 0);
                _Nombre[i] = String.valueOf(dtmItems.getValueAt(FilasSeleccionadas[i], 4)).trim();
                _Medida[i] = (String) dtmItems.getValueAt(FilasSeleccionadas[i], 5);
                _Stock[i] = (int) dtmItems.getValueAt(FilasSeleccionadas[i], 6);
                _Descripcion[i] = String.valueOf(dtmItems.getValueAt(FilasSeleccionadas[i], 2));
                _Tipo[i] = String.valueOf(auxTipo);
            }
            
            AbrirDialogAlmacenAsignar(IdSeleccionados, _Nombre, _Medida, _Stock, _Descripcion,_Tipo);
        }
       
    }//GEN-LAST:event_btnAsignarActionPerformed
    
    private void tblItemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemsMouseClicked
        
        int column = tblItems.getSelectedColumn();
        int row = tblItems.getSelectedRow();
        
        if(row != -1)
        {
            Object value = tblItems.getValueAt(row, column);
            if(value instanceof JButton) 
            {
                ((JButton)value).doClick();
                JButton boton = (JButton) value;
                if(boton.getName().equals("btnEditar")) //BOTON EDITAR
                {
                    DefaultTableModel dtmItems = (DefaultTableModel) tblItems.getModel();
                    int idItem = (int) dtmItems.getValueAt(row, 0);
                    Object datos[] = ObtenerDatosItem(idItem);
                    AbrirDialogItemEditar(
                            idItem, 
                            String.valueOf(datos[1]), 
                            String.valueOf(datos[2]), 
                            (int) datos[3],
                            String.valueOf(datos[4]),
                            String.valueOf(datos[12])
                    );
                }
                if(boton.getName().equals("btnEliminar")) //BOTON ELIMINAR
                {                    
                    int n = JOptionPane.showConfirmDialog(null, "Desea eliminar este registro", "Confirmar", JOptionPane.OK_CANCEL_OPTION);
                    if(n == 0) //Se confirmo la eliminacion
                    {
                        Connection con = ClsConexion.getConection();
                        DefaultTableModel dtmItems = (DefaultTableModel) tblItems.getModel();
                        int idTem = (int) dtmItems.getValueAt(row, 0);    
                        itemDAL.EliminarItemStock(IdItem, con);
                        itemDAL.EliminarItem(idTem);
                        CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),Consumo);
                        LimpiarCampos();
                        ClsConexion.closeConnection(con);
                    }
                }
            }
            else
            {
                DefaultTableModel dtmItems = (DefaultTableModel) tblItems.getModel();
               
                int idItem = (int) dtmItems.getValueAt(row, 0);
                IdItem = idItem;
                //int idItem = Integer.parseInt( dtmItems.getValueAt(row, 0).toString());
                int unidadesAsignadas ;
                int unidadesUtilizadas = ObtenerUnidadesUtilizadas(idItem);
                int unidadesRestantes ;
                Object datos[] = ObtenerDatosItem(idItem);                
                txtNombre.setText(String.valueOf(datos[1]));
                txtMedida.setText(String.valueOf(datos[2]));
                unidadesAsignadas = (int) datos[3];
                unidadesRestantes = unidadesAsignadas - unidadesUtilizadas;
                txtAsignadas.setText(String.valueOf(unidadesAsignadas));
                txtUtilizadas.setText(String.valueOf(unidadesUtilizadas));
                txtRestantes.setText(String.valueOf(unidadesRestantes));
                txtDescripcion.setText(String.valueOf(datos[4]));
                
                UniAsignadas = unidadesAsignadas;
                
                CargarTablaUnidadesAsignadas(idItem);
                tblUnidades.setEnabled(true);
                btnAgregar.setEnabled(true);
                txtPersona.setText("");
                btnAsignar.setEnabled(true);
            }
            
        }
       
    }//GEN-LAST:event_tblItemsMouseClicked

    public void CargarTablaUnidadesAsignadas(int xIdItem)
    {
        String titulos[] = {"ID STOCK","PERSONA","FECHA","U. ASIGNADAS"};
        ArrayList<ItemStockEntity> arrayItemStock;
        Object fila[] = new Object[6];
        ItemStockDAL itemStockDAL = new ItemStockDAL();
        
        DefaultTableModel dtm = new DefaultTableModel(null,titulos)
        {
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex)
            {return false;}
        };  
        
        arrayItemStock = itemStockDAL.ListarItemsSinAsignar(xIdItem);
        
        for(ItemStockEntity ise : arrayItemStock)
        {
            fila[0] = ise.getItem_stock_id();
            fila[1] = ise.getPersonal_nombre();
            fila[2] = ise.getItem_stock_fecha();
            fila[3] = ise.getItem_stock_asignado();
            dtm.addRow(fila);
        }
        
        tblUnidades.setModel(dtm);
        tblUnidades.setRowHeight(20);
        
        tblUnidades.removeColumn(tblUnidades.getColumnModel().getColumn(0));
        tblUnidades.removeColumn(tblUnidades.getColumnModel().getColumn(0));
        
        TableCellRenderer tcr =  tblUnidades.getTableHeader().getDefaultRenderer();                       
        GeneralRender.MiRender mr = new GeneralRender.MiRender(tcr);
        tblUnidades.setDefaultRenderer(Object.class, mr);
        mr.getTableCellRendererComponent(tblUnidades, fila, true, true, WIDTH, 0);
        mr.getTableCellRendererComponent(tblUnidades, fila, true, true, WIDTH, 1);
    }
    
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        AbrirDialogItemNuevo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void cmbAulaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAulaItemStateChanged
        if(cmbAula.getSelectedIndex() != -1){
            CargarComboAlmacen();
            if(cmbAlmacen.getSelectedIndex() != -1)
            {            
                CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),Consumo);

            }
        }        
        
    }//GEN-LAST:event_cmbAulaItemStateChanged

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        MostrarItems();
    }//GEN-LAST:event_btnVerActionPerformed

    private void cmbAlmacenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAlmacenItemStateChanged
        
        if(cmbAlmacen.getSelectedIndex() != -1)            
        {
            if(rbnConsumo.isSelected())
            {
                CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),true);
            }
            else if(rbnInventario.isSelected())
            {
                CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),false);
            }
        }
    }//GEN-LAST:event_cmbAlmacenItemStateChanged

    private void tblUnidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblUnidadesMouseClicked
        
        int reg;
        DefaultTableModel dtm;
        reg = tblUnidades.getSelectedRow();
        if(reg == -1)
        {
            JOptionPane.showMessageDialog(null, "Debe Seleccionar un registro");
        }
        else
        {
            
            dtm = (DefaultTableModel)tblUnidades.getModel();   
            IdItem = (int) dtm.getValueAt(reg, 0);
            txtPersona.setText((String) dtm.getValueAt(reg, 1));            
        }
    }//GEN-LAST:event_tblUnidadesMouseClicked

    private void CargarComboPeriodo()
    {
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
        String fila[] = new String[4];

        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo;
        Periodo = (ClsEntidadPeriodo) iterator.next();               
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getEstado_Periodo();        
            if(fila[1].equals("Activo"))
            {   
            arrayIdPeriodo.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(fila[0]);  
            }        
        }
        cmbPeriodo.setModel(DefaultComboBoxModel);
    }
    
    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        int idAlmacen = Integer.parseInt(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()));
        Window parentWindow = SwingUtilities.windowForComponent(this);
        AlmacenAdministracionItemAgregar agregar = new AlmacenAdministracionItemAgregar(parentWindow,IdItem,UniAsignadas,idAlmacen,Consumo);
        agregar.FormularioPadre(this);
        agregar.setModal(true);
        agregar.setVisible(true);
        agregar.toFront();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void rbnConsumoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnConsumoItemStateChanged
        Consumo = true;
        
        if(!arrayIdAula.isEmpty())
        {
            CargarComboAlmacen();
            CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),Consumo);
           
        } 
        
    }//GEN-LAST:event_rbnConsumoItemStateChanged

    private void rbnInventarioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbnInventarioItemStateChanged
        Consumo = false;
        
        if(!arrayIdAula.isEmpty())
        {
            CargarComboAlmacen();
            CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),Consumo);
           
        } 
    }//GEN-LAST:event_rbnInventarioItemStateChanged

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        if(cmbPeriodo.getSelectedIndex() != -1)
        {
            CargarComboAula();
            if(cmbAula.getSelectedIndex() != -1)
            {
                CargarComboAlmacen();
                if(cmbAlmacen.getSelectedIndex() != -1)
                {            
                    CargarTablaAulaItems(arrayAlmacenId.get(cmbAlmacen.getSelectedIndex()),Consumo);

                }
            }            
        }
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void CargarComboAula()
    {
        arrayIdAula.clear();
        ClsSeccion secciones = new ClsSeccion();
        ArrayList<ClsEntidadSeccion> seccion =  secciones.ListarSeccion();
        Iterator it = seccion.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbAula.removeAllItems();
        String fila2[] = new String[5];        
        while(it.hasNext())
        {
        ClsEntidadSeccion Seccion = (ClsEntidadSeccion) it.next();             
        fila2[0] = Seccion.getNombre_Seccion();
        fila2[1] = Seccion.getEstado_Periodo();       
        fila2[3] = Seccion.getNombre_Periodo();

            if (arrayIdPeriodo.get(cmbPeriodo.getSelectedIndex()).equals(Seccion.getId_Periodo())) 
            {
                arrayIdAula.add(Seccion.getId_Seccion());
                DefaultComboBoxModel.addElement(fila2[0]);
            }       
        }
        cmbAula.setModel(DefaultComboBoxModel);
    }
    
    public void LimpiarCampos()
    {
        txtNombre.setText("");
        txtMedida.setText("");
        txtAsignadas.setText("");
        txtUtilizadas.setText("");
        txtRestantes.setText("");
        txtDescripcion.setText("");
    }    
    
    private void CargarComboAlmacen()
    {
        arrayAlmacenId.clear();
        Connection con = ClsConexion.getConection();
        ResultSet rsResultado;
        DefaultComboBoxModel cbm = new DefaultComboBoxModel();
        cbm.removeAllElements();
        cmbAlmacen.removeAllItems();
        String fila[];
        fila = new String[5];
        try 
        {
            PreparedStatement st = con.prepareStatement("select * from mps_almacen as a where a.id_seccion = ?");
            st.setString(1, String.valueOf(arrayIdAula.get(cmbAula.getSelectedIndex())));
            rsResultado = st.executeQuery();
            
            while(rsResultado.next())
            {
                fila[0] = rsResultado.getString("almacen_id");
                fila[1] = rsResultado.getString("almacen_nombre");   
                
                arrayAlmacenId.add(fila[0]);
                cbm.addElement(fila[1]);
            }
            cmbAlmacen.setModel(cbm);
        }
        catch (SQLException ex) 
        {
            Logger.getLogger(AlmacenAdministracionItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*
    *   Obtiene total de items entregados
    */
    private int ObtenerUnidadesUtilizadas(int xIdItem)
    {
        Connection con = ClsConexion.getConection();
        ResultSet rsItem;
        PreparedStatement st;
        int cantidad=0;
        try 
        {
            st = con.prepareStatement("select ai.item_nombre, ai.item_id, sum(ri.ritem_cantidad) as 'cantidad_suma'\n" +
                            "from mps_requerimiento_item as ri \n" +
                            "inner join mps_almacen_item as ai on ri.item_id = ai.item_id\n" +
                            "where ri.item_id = ?");
            st.setInt(1, xIdItem);
            rsItem = st.executeQuery();
            
            while(rsItem.next())
            {
                cantidad = rsItem.getInt("cantidad_suma");
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(AlmacenAdministracionItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        ClsConexion.closeConnection(con);
        return cantidad;
    }
    
    public void CargarTablaAulaItems(String idAlmacen, boolean consumo)
    {
        String titulos[] = {"ID ITEM","ID ALMACEN","DESCRIPCION",
            "N°","NOMBRE","U. MEDIDA","U. ASIGNADAS","U. UTILIZADAS","U. RESTANTES","",""};
        Object fila[];
        DefaultTableModel dtmRequerimiento;
        fila = new Object[12];
        dtmRequerimiento = new DefaultTableModel(null,titulos) 
        {        
            @Override
            public boolean isCellEditable(int rowIndex,int columnIndex){return false;}               
        };        
        
        int count = 1;
        int itemId;
        int unidadesAsignadas;
        int unidadesUtilizadas;
        int unidadesRestantes;
        
        JButton btnEditar = new JButton("");
        JButton btnEliminar = new JButton("");
        
        btnEditar.setName("btnEditar");        
        btnEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/edit_black.png")));        
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
        btnEliminar.setName("btnEliminar");
        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/delete_black.png")));
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
        Connection con = ClsConexion.getConection();
        ResultSet rsItem;
        PreparedStatement st;        
        
        String sql;
        if(consumo)
        {
            sql = "select * from mps_almacen_item where almacen_id = ? and item_tipo = 'DE CONSUMO' "
                    + " order by item_nombre";
        }
        else
        {
            sql = "select * from mps_almacen_item where almacen_id = ? and item_tipo = 'INVENTARIO' "
                    + " order by item_nombre";
        }
        try 
        {
            st = con.prepareStatement(sql);
            st.setString(1, idAlmacen);
            rsItem = st.executeQuery();
            while(rsItem.next())
            {
                itemId = Integer.parseInt(rsItem.getString("item_id"));
                unidadesAsignadas = Integer.parseInt(rsItem.getString("item_stock"));
                unidadesUtilizadas = ObtenerUnidadesUtilizadas(itemId);
                unidadesRestantes = unidadesAsignadas - unidadesUtilizadas;
                fila[0] = itemId;
                fila[1] = rsItem.getString("almacen_id");                
                fila[2] = rsItem.getString("item_descripcion");                
                fila[3] = count;
                fila[4] = " "+rsItem.getString("item_nombre");
                fila[5] = rsItem.getString("item_medida");
                fila[6] = unidadesAsignadas; //asignadas
                fila[7] = unidadesUtilizadas; //utilizadas
                fila[8] = unidadesRestantes; //restantes
                fila[9] = btnEditar;               
                fila[10] = btnEliminar;
                dtmRequerimiento.addRow(fila);   
                count++;
            }
            
            tblItems.setModel(dtmRequerimiento);
            tblItems.setRowHeight(20);
            
            tblItems.removeColumn(tblItems.getColumnModel().getColumn(0));
            tblItems.removeColumn(tblItems.getColumnModel().getColumn(0));
            tblItems.removeColumn(tblItems.getColumnModel().getColumn(0));
            
        
            TableColumn colOrden = tblItems.getColumnModel().getColumn(0);colOrden.setPreferredWidth(35);
            TableColumn colItem = tblItems.getColumnModel().getColumn(1);colItem.setPreferredWidth(230);
            TableColumn colMedida = tblItems.getColumnModel().getColumn(2);colMedida.setPreferredWidth(90);
            TableColumn colAsignadas = tblItems.getColumnModel().getColumn(3);colAsignadas.setPreferredWidth(100);
            TableColumn colUtilizadas = tblItems.getColumnModel().getColumn(4);colUtilizadas.setPreferredWidth(100);
            TableColumn colRestantes = tblItems.getColumnModel().getColumn(5);colRestantes.setPreferredWidth(100);
            TableColumn cBotonEditar =tblItems.getColumnModel().getColumn(6);cBotonEditar.setPreferredWidth(100);
            TableColumn cBotonEliminar =tblItems.getColumnModel().getColumn(7);cBotonEliminar.setPreferredWidth(100);
            
            TableCellRenderer tcr =  tblItems.getTableHeader().getDefaultRenderer();
            GeneralRender.MiRender miRender = new GeneralRender.MiRender(tcr);            
            tblItems.setDefaultRenderer(Object.class, new Render());
            miRender.getTableCellRendererComponent(tblItems, fila, true, true, WIDTH, 0);
            miRender.getTableCellRendererComponent(tblItems, fila, true, true, WIDTH, 2);
            miRender.getTableCellRendererComponent(tblItems, fila, true, true, WIDTH, 3);
            miRender.getTableCellRendererComponent(tblItems, fila, true, true, WIDTH, 4);
            miRender.getTableCellRendererComponent(tblItems, fila, true, true, WIDTH, 5);
            
            tblItems.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            
            ClsConexion.closeConnection(con);
            
        } 
        catch (SQLException ex) 
        {
            Logger.getLogger(AlmacenItemConsultar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void MostrarItems()
    {        
        almacenModelo.MostrarTablaAlmacenAdministracionItemsBotones(tblItems,Consumo);
    }
    
    private Object[] ObtenerDatosItem(int _IdItem)
    {
        Object datos[] = itemDAL.ListarDatosItem(_IdItem);
        System.out.println("Id item:" + _IdItem);
        return datos;
    }
    
    private void AbrirDialogItemNuevo()
    {
        Window parentWindow = SwingUtilities.windowForComponent(this);
        AlmacenAdministracionItemNuevo almacenAdministracionItemNuevo = new AlmacenAdministracionItemNuevo(parentWindow);
        almacenAdministracionItemNuevo.FormularioPadre(this);
        almacenAdministracionItemNuevo.setModal(true);
        almacenAdministracionItemNuevo.setVisible(true);
        almacenAdministracionItemNuevo.toFront();
    }
    
    private void AbrirDialogAlmacenAsignar(int _IdSeleccionados[],String _Nombre[],String _Medida[],int _Stock[],String _Descripcion[],String _Tipo[])
    {
        Window parentWindow = SwingUtilities.windowForComponent(this);
        AlmacenAdministracionItemAsignar almacenAdministracionItemAsignar = new AlmacenAdministracionItemAsignar
        (
            parentWindow, 
            _IdSeleccionados, 
            _Nombre, 
            _Medida,
            _Stock, 
            _Descripcion,
            _Tipo
        );
        almacenAdministracionItemAsignar.FormularioPadre(this);
        almacenAdministracionItemAsignar.setModal(true);
        almacenAdministracionItemAsignar.setVisible(true);
        almacenAdministracionItemAsignar.toFront();
    }
    
    private void AbrirDialogItemEditar(
            int _IdItem, 
            String _NombreItem, 
            String _MedidaItem, 
            int _StockItem, 
            String _DescripcionItem,
            String _Tipo
    ){
        Window parentWindow = SwingUtilities.windowForComponent(this);
        AlmacenAdministracionItemEditar almacenAdministracionItemEditar = new AlmacenAdministracionItemEditar
        (parentWindow, _IdItem, _NombreItem, _MedidaItem, _StockItem, _DescripcionItem,_Tipo);        
        almacenAdministracionItemEditar.FormularioPadre(this);
        almacenAdministracionItemEditar.setModal(true);
        almacenAdministracionItemEditar.setVisible(true);
        almacenAdministracionItemEditar.toFront();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAsignar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnVer;
    private javax.swing.JComboBox<String> cmbAlmacen;
    private javax.swing.JComboBox<String> cmbAula;
    private javax.swing.JComboBox<String> cmbPeriodo;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlDerecha;
    private javax.swing.JPanel pnlIbot;
    private javax.swing.JPanel pnlIzquierda;
    private javax.swing.JPanel pnlbot;
    private javax.swing.JRadioButton rbnConsumo;
    private javax.swing.JRadioButton rbnInventario;
    private javax.swing.JTable tblItems;
    private javax.swing.JTable tblUnidades;
    private javax.swing.JTextField txtAsignadas;
    private javax.swing.JTextArea txtDescripcion;
    private javax.swing.JTextField txtMedida;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPersona;
    private javax.swing.JTextField txtRestantes;
    private javax.swing.JTextField txtUtilizadas;
    // End of variables declaration//GEN-END:variables
}
