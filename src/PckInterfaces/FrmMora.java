/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package PckInterfaces;

import PckEntidad.ClsEntidadMora;
import PckEntidad.ClsEntidadNivel;
import PckEntidad.ClsEntidadPeriodo;
import PckEntidad.ClsEntidadProducto;
import PckEntidad.ClsEntidadSeccion;
import PckEntidad.ClsEntidadServicio;
import PckNegocio.ClsMora;
import PckNegocio.ClsNivel;
import PckNegocio.ClsNoDeuda;
import PckNegocio.ClsPeriodo;
import PckNegocio.ClsProducto;
import PckNegocio.ClsSeccion;
import PckNegocio.ClsServicio;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import static prymatricula.ClsMisc.obtenerAnioActual;


/**
 *
 * @author kmv
 */
public class FrmMora extends javax.swing.JInternalFrame {
DefaultListModel dlm = new DefaultListModel();


String  url2 ="/Reportes/RptMora.jasper";
String  url3 ="/Reportes/RptMora.jrxml";

  ArrayList<String> codigoNivel = new ArrayList();
  ArrayList<String> codigoPeriodo = new ArrayList();
  ArrayList<String> codigoSeccion = new ArrayList();
    /**
     * Creates new form FrmMora
     */
    public FrmMora() {
        initComponents();
        //cargamos los combos
        cargaComboNivel();
        cargaComboPeriodo();
        if(cmbPeriodo.getSelectedIndex() != -1)
        {            
            cargaComboSeccion();
        }
        
        //grupo de Pagos
        grupo.add(raMatricula);
        grupo.add(raMensualidad);
        grupo.add(raAlimentacion);
        grupo.add(raProductos);
        grupo.add(raServicios);
        
        //grupo seleccionar deuda o sin deuda
        grupoDeuda.add(rbtDeuda);
        grupoDeuda.add(rbnSinDeuda);
        
        //grupo buscar por Periodo o Seccion
        grupoNivel.add(rbnPeriodo);
        grupoNivel.add(rbnSeccion);
        
        //agrega seleccion inicial
        rbtDeuda.setSelected(true);
        rbnPeriodo.setSelected(true);
        raMatricula.setSelected(true);
        
        //Agrega los titulos a la tabla para que no este vacia al iniciar
        String tit[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento"};
        DefaultTableModel dtm = new DefaultTableModel(null,tit);
        tblMora.setModel(dtm);
        TableColumn  columnaPer =tblMora.getColumnModel().getColumn(0);
            columnaPer.setMinWidth(300);
            
        //Combo de año    
        String seleccionado = llenaCombo();
        cmbAnio.setSelectedItem(seleccionado);     
    }
    private String llenaCombo()
    {
        cmbAnio.removeAllItems();        
        //obtengo año actual
        int Anioactual = Integer.parseInt(obtenerAnioActual());   
        int burbuja[] = new int[4];
        //lleno la matriz inicial (2015-2014-2013-2012-2011)
        //es necesario ordenarla
        for (int i=0;i<4;i++)
        {
           burbuja[i] = Anioactual - i;
        }        
        int temp;
        for(int m=0;m<burbuja.length;m++)//recorre cada elemento
        {            
            for(int n=0;n<burbuja.length-1;n++)//el elemento es comparado con todos
            {                
                if(burbuja[n]>burbuja[n+1]) //+1 porque ya tomamos el valor 0
                {
                    temp = burbuja[n];
                    burbuja[n] = burbuja[n+1];
                    burbuja[n+1] = temp;
                }
            }
        }
        //agrego los años ordenados
        for(int o=0;o<burbuja.length;o++)
        {
            cmbAnio.addItem(String.valueOf(burbuja[o]));
            
        }        
        //agrego los 4 años siguientes
        for (int j=1;j<5;j++)
        {
           cmbAnio.addItem(String.valueOf(Anioactual + j));
          
        }
        
        return String.valueOf(Anioactual);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupo = new javax.swing.ButtonGroup();
        grupoDeuda = new javax.swing.ButtonGroup();
        grupoNivel = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        raMatricula = new javax.swing.JRadioButton();
        raMensualidad = new javax.swing.JRadioButton();
        raAlimentacion = new javax.swing.JRadioButton();
        raServicios = new javax.swing.JRadioButton();
        raProductos = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList();
        cmbAnio = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rbnPeriodo = new javax.swing.JRadioButton();
        rbnSeccion = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        cmbNivel = new javax.swing.JComboBox();
        cmbPeriodo = new javax.swing.JComboBox();
        cmbSeccion = new javax.swing.JComboBox();
        rbnNivel = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnReporte = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMora = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txta = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        rbtDeuda = new javax.swing.JRadioButton();
        rbnSinDeuda = new javax.swing.JRadioButton();

        setTitle("Pendiente / Sin deuda");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pagos"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        raMatricula.setText("Matrícula");
        raMatricula.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                raMatriculaItemStateChanged(evt);
            }
        });
        jPanel2.add(raMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        raMensualidad.setText("Mensualidad");
        raMensualidad.setToolTipText("");
        raMensualidad.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                raMensualidadItemStateChanged(evt);
            }
        });
        jPanel2.add(raMensualidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        raAlimentacion.setText("Alimentación");
        raAlimentacion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                raAlimentacionItemStateChanged(evt);
            }
        });
        jPanel2.add(raAlimentacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 30, -1, -1));

        raServicios.setText("Servicios");
        raServicios.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                raServiciosItemStateChanged(evt);
            }
        });
        jPanel2.add(raServicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 30, -1, -1));

        raProductos.setText("Productos");
        raProductos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                raProductosItemStateChanged(evt);
            }
        });
        jPanel2.add(raProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 60, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 340, 100));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Concepto"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lista.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lista);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 210, 200));

        cmbAnio.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbAnio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020" }));
        cmbAnio.setSelectedIndex(2);
        cmbAnio.setSelectedItem(2014);
        cmbAnio.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAnioItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbAnio, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 80, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, 250, 280));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Periodo o Sección"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel1.setText("Periodo:");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, -1));

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Sección:");
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, -1));

        rbnPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel4.add(rbnPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, -1, -1));

        rbnSeccion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel4.add(rbnSeccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        jLabel5.setText("Nivel");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        cmbNivel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbNivel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNivelItemStateChanged(evt);
            }
        });
        jPanel4.add(cmbNivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 40, 180, -1));

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        jPanel4.add(cmbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 180, -1));

        cmbSeccion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel4.add(cmbSeccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 180, -1));

        rbnNivel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel4.add(rbnNivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 230, 180));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Opciones"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSalir.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/fileclose.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel5.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 110, 40));

        btnReporte.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/book.png"))); // NOI18N
        btnReporte.setText("<html> <p align=center>Generar</p> <p align=center>Reporte</p> </html>");
        btnReporte.setEnabled(false);
        btnReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReporteActionPerformed(evt);
            }
        });
        jPanel5.add(btnReporte, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 110, 40));

        btnVer.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnVer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/search.png"))); // NOI18N
        btnVer.setText("Ver");
        btnVer.setEnabled(false);
        btnVer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerActionPerformed(evt);
            }
        });
        jPanel5.add(btnVer, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 110, 40));

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 70, 150, 280));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Alumnos"));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblMora.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblMora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblMora);

        jPanel6.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 700, 250));

        jLabel3.setText("Encontradas:");
        jPanel6.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 70, -1));

        txta.setEnabled(false);
        jPanel6.add(txta, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 30, -1));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 760, 320));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckImages/pendiente sin deuda.jpg"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 300, 40));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Alumnos con"));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rbtDeuda.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbtDeuda.setText("Pendientes");
        jPanel7.add(rbtDeuda, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        rbnSinDeuda.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rbnSinDeuda.setText("Sin deudas");
        jPanel7.add(rbnSinDeuda, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        jPanel1.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 100, 180));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void raMatriculaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_raMatriculaItemStateChanged
        btnVer.setEnabled(true);
       dlm.removeAllElements();
       lista.setModel(dlm);
       
    }//GEN-LAST:event_raMatriculaItemStateChanged

    private void raMensualidadItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_raMensualidadItemStateChanged
      cargaMeses();
       btnVer.setEnabled(false);
       
    }//GEN-LAST:event_raMensualidadItemStateChanged

    private void raAlimentacionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_raAlimentacionItemStateChanged
      cargaMeses();
      btnVer.setEnabled(false);
     
    }//GEN-LAST:event_raAlimentacionItemStateChanged

    private void raServiciosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_raServiciosItemStateChanged
        if(raServicios.isSelected())
        {
        rellenaServicio();
        btnVer.setEnabled(false);
        
        }
        
    }//GEN-LAST:event_raServiciosItemStateChanged

    private void raProductosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_raProductosItemStateChanged
        rellenaProducto();
        btnVer.setEnabled(false);
        
    }//GEN-LAST:event_raProductosItemStateChanged

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnVerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerActionPerformed
        btnReporte.setEnabled(true);        
        String salon = codigoSeccion.get(cmbSeccion.getSelectedIndex());
        String periodo = codigoPeriodo.get(cmbPeriodo.getSelectedIndex());
        String opcion="";
        
        //MATRICULA
        if(raMatricula.isSelected()) 
        {   
            //DEUDA
            if(rbtDeuda.isSelected()) 
            {
                //seleciona por periodo
                if(rbnPeriodo.isSelected())
                {                   
                    actualizarMatricula(periodo);
                }
                //selecciona por secciopn
                else
                {
                    actualizarMatricula(salon);
                }                    
            }
            //SIN DEUDA
            else if(rbnSinDeuda.isSelected())
            {
                //seleciona por periodo
                if(rbnPeriodo.isSelected())
                {                   
                    actualizarNoDeudaMatricula(periodo);
                }
                //selecciona por secciopn
                else
                {
                    actualizarNoDeudaMatricula(salon);
                }
            }
        }
        //MENSUALIDAD
        else if (raMensualidad.isSelected()) 
        {
            opcion = lista.getSelectedValue().toString();
            //selecciona deuda
            if(rbtDeuda.isSelected()) 
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                {   
                    actualizarMensualidad(periodo, opcion);
                }
                else 
                {                 
                    actualizarMensualidad(salon, opcion);
                }
            }
            //selecciona sin deuda
            else
            {
                //seleciona por periodo
                if(rbnPeriodo.isSelected())
                {                   
                    actualizarNoDeudaMensualidad(periodo,opcion);
                }
                //selecciona por secciopn
                else
                {
                    actualizarNoDeudaMensualidad(salon,opcion);
                }
            }
        }
        //ALIMENTACION
        else if (raAlimentacion.isSelected()) 
        {
            opcion = lista.getSelectedValue().toString();
            //selecciona deuda
            if(rbtDeuda.isSelected()) 
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                { 
                    actualizarAlimentacion(periodo, opcion);
                }
                //selecciona por seccion
                else 
                {
                    actualizarAlimentacion(salon, opcion);
                }
            }
            //selecciona sin deuda
            else
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                {   
                    actualizarNoDeudaAlimentacion(periodo, opcion);
                }
                //selecciona por seccion
                else 
                {                    
                    actualizarNoDeudaAlimentacion(salon, opcion);
                }
            }
        }
        //SERVICIO
        else if (raServicios.isSelected()) 
        {
            opcion = lista.getSelectedValue().toString();
            //selecciona deuda
            if(rbtDeuda.isSelected()) 
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                {  
                    actualizarServicio(periodo, opcion);
                } 
                //selecciona por seccion
                else 
                {
                    actualizarServicio(salon, opcion);
                }
            }
            //selecciona sin deuda
            else
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                {   
                    actualizarNoDeudaServicio(periodo, opcion);
                }
                //selecciona por seccion
                else 
                {                    
                    actualizarNoDeudaServicio(salon, opcion);
                }
            }
        }
        else if(raProductos.isSelected())
        {
            opcion = lista.getSelectedValue().toString();
            //selecciona deuda
            if(rbtDeuda.isSelected()) 
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                {   
                    actualizarProducto(periodo, opcion);
                } 
                //selecciona por seccion
                else 
                {
                    actualizarProducto(salon, opcion);
                }
            }
            //selecciona sin deuda
            else
            {
                //selecciona por periodo
                if (rbnPeriodo.isSelected()) 
                {
                    actualizarNoDeudaProducto(periodo, opcion);
                }
                //selecciona por seccion
                else 
                {
                    actualizarNoDeudaProducto(salon, opcion);
                }
            }
        }
        
    }//GEN-LAST:event_btnVerActionPerformed

    private void listaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaValueChanged
        btnVer.setEnabled(true);
    }//GEN-LAST:event_listaValueChanged

    private void btnReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReporteActionPerformed
        Map p = new HashMap();            
            String criterio = null;
            String op ="";
            String opcion="";
            Double aux=0.0;
            
        int cont=0;                            
        ClsMora salones = new ClsMora();
        ClsNoDeuda ndeuda = new ClsNoDeuda();
        String salon = codigoSeccion.get(cmbSeccion.getSelectedIndex());
        String periodo = codigoPeriodo.get(cmbPeriodo.getSelectedIndex());
        String nivel = codigoNivel.get(cmbNivel.getSelectedIndex());
        ArrayList<ClsEntidadMora> dataBean = new ArrayList<ClsEntidadMora>();        
           
        if(raMatricula.isSelected())
        {   
            criterio = cmbPeriodo.getSelectedItem().toString();
            op = "DEUDAS MATRÍCULA";
            cont=0;
            if(rbtDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = salones.ListarMoraMatriculaNivel(periodo);
                    
                }
                //por Seccion
                else
                {
                    dataBean = salones.ListarMoraMatricula(salon);
                }
                for(ClsEntidadMora i: dataBean)
                { cont++; 
                  aux = aux + Double.parseDouble(i.Pendiente);
                }
            } 
            else if(rbnSinDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = ndeuda.ListarMoraMatriculaNivel(periodo);                    
                }
                //por Seccion
                else
                {
                    dataBean = ndeuda.ListarMoraMatricula(salon);
                }
                for(ClsEntidadMora i: dataBean)
                { cont++; 
                  aux = aux + Double.parseDouble(i.Total);
                }
            }                
            
        }
        else if(raMensualidad.isSelected())
        {
            criterio = cmbPeriodo.getSelectedItem().toString();
            aux=0.0;
            cont=0;
            opcion = lista.getSelectedValue().toString();
            if(rbtDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = salones.ListarMoraMensualidadNivel(periodo,opcion);
                    
                }
                else
                {
                    dataBean = salones.ListarMoraMensualidad(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Pendiente);
                }
            }
            else if(rbnSinDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = ndeuda.ListarMoraMensualidadNivel(periodo, opcion);
                    
                }
                else
                {
                    dataBean = ndeuda.ListarMoraMensualidad(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Total);
                }
            }
            
            op = "MENSUALIDAD "+opcion;
        
        }
        else if(raAlimentacion.isSelected())
        {
            aux=0.0;
            cont=0;
            opcion = lista.getSelectedValue().toString();
            if(rbtDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = salones.ListarMoraAlimentacionNivel(periodo,opcion);
                    criterio = cmbPeriodo.getSelectedItem().toString();
                }
                else
                {
                    dataBean = salones.ListarMoraAlimentacion(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Pendiente); 
                }
            } 
            else if(rbnSinDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = ndeuda.ListarMoraAlimentacionNivel(periodo,opcion);
                    criterio = cmbPeriodo.getSelectedItem().toString();
                }
                else
                {
                    dataBean = ndeuda.ListarMoraAlimentacion(salon,opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Total); 
                }
            } 
            
            op = "ALIMENTACIÓN "+opcion;
        }
        else if(raServicios.isSelected())
        {
            aux=0.0;
            cont=0;
            opcion = lista.getSelectedValue().toString();
            if(rbtDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = salones.ListarMoraServicioNivel(periodo,opcion);
                    criterio = cmbPeriodo.getSelectedItem().toString();
                }
                else
                {
                    dataBean = salones.ListarMoraServicio(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Pendiente); 
                }
            }
            else if(rbnSinDeuda.isSelected())
            {
                //por Periodo
                if(rbnPeriodo.isSelected())
                {
                    dataBean = ndeuda.ListarMoraServicioNivel(periodo,opcion);
                    criterio = cmbPeriodo.getSelectedItem().toString();
                }
                else
                {
                    dataBean = ndeuda.ListarMoraServicio(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Total); 
                }
            }           
            
            op = opcion;
        }   
        else if(raProductos.isSelected())
        {
            aux=0.0;
            cont=0;
            opcion = lista.getSelectedValue().toString();
            if(rbtDeuda.isSelected())
            {
                if(rbnPeriodo.isSelected())
                {
                    dataBean = salones.ListarMoraProductoNivel(periodo,opcion);
                    criterio = cmbPeriodo.getSelectedItem().toString();
                }
                else
                {
                    dataBean = salones.ListarMoraProducto(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Pendiente); 
                }
            }
            else if(rbnSinDeuda.isSelected())
            {
                if(rbnPeriodo.isSelected())
                {
                    dataBean = ndeuda.ListarMoraProductoNivel(periodo,opcion);
                    criterio = cmbPeriodo.getSelectedItem().toString();
                }
                else
                {
                    dataBean = ndeuda.ListarMoraProducto(salon, opcion);
                }
                for(ClsEntidadMora i: dataBean)
                { 
                    cont++;  
                    aux = aux + Double.parseDouble(i.Total); 
                }
            }
            
            
            op = opcion;        
        }
           
        p.put("op", op);
        p.put("aux", String.valueOf(aux));
        p.put("salon", criterio);
  
        JasperPrint print;
        JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(dataBean);
        try{

            JasperCompileManager.compileReportToFile(System.getProperty("user.dir")+url3, System.getProperty("user.dir")+url2);              
            print = JasperFillManager.fillReport(System.getProperty("user.dir")+url2, p,ds);
            JasperViewer view = new JasperViewer(print,false);
            view.setTitle("Reporte Mora por Salón");
            view.setVisible(true);
        }
        catch(JRException ex)
        {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_btnReporteActionPerformed

    private void cmbAnioItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAnioItemStateChanged
          if(raServicios.isSelected())
        {
        rellenaServicio();
        
        }
          else if(raProductos.isSelected())
        {
        rellenaProducto();
        
        }
    }//GEN-LAST:event_cmbAnioItemStateChanged

    private void cmbNivelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbNivelItemStateChanged
        if(cmbNivel.getSelectedIndex() != -1)
        {
            cargaComboPeriodo();
            if(cmbPeriodo.getSelectedIndex() != -1)
            {            
                cargaComboSeccion();
            }
        }
    }//GEN-LAST:event_cmbNivelItemStateChanged

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        if(cmbPeriodo.getSelectedIndex() != -1)
        {

            System.out.println("Periodo: "+cmbPeriodo.getSelectedItem()+" ID: "+codigoPeriodo.get(cmbPeriodo.getSelectedIndex()));
            cargaComboSeccion();
        }
  

    }//GEN-LAST:event_cmbPeriodoItemStateChanged
    private void actualizarMatricula(String opcion)
    {
        String[] EMPTY_STRING_ARRAY = new String[0];
         int a=0;
         String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsMora moras = new ClsMora();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraMatriculaNivel(opcion);
        }
        else
        {
            mora = moras.ListarMoraMatricula(opcion);
                //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
                //FIN
            System.out.println(Arrays.toString(titulos));
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext())
        {
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            }            
            defaultTableModel.addRow(fila);  
            a++;            
        }
        if(a==0){JOptionPane.showMessageDialog(this, "No existen Deudas");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    
    private void actualizarMensualidad(String seccion,String mes){
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsMora moras = new ClsMora();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraMensualidadNivel(seccion,mes);
        }
        else
        {
            mora = moras.ListarMoraMensualidad(seccion,mes);
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext()){
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();       
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            }     
            defaultTableModel.addRow(fila);   
            a++;
        }        
        if(a==0){JOptionPane.showMessageDialog(this, "No existen Deudas");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    private void actualizarAlimentacion(String seccion,String mes)
    {
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsMora moras = new ClsMora();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraAlimentacionNivel(seccion,mes);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN            
            mora = moras.ListarMoraAlimentacion(seccion,mes);
        }
        
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext())
        {
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();  
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            } 
            defaultTableModel.addRow(fila);                 
            a++;
        }               
        tblMora.setModel(defaultTableModel);  
        if(a==0){JOptionPane.showMessageDialog(this, "No existen Deudas");}
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    
    private void actualizarServicio(String seccion,String servicio){
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsMora moras = new ClsMora();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraServicioNivel(seccion,servicio);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN            
            mora = moras.ListarMoraServicio(seccion,servicio);
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext())
        {
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento(); 
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            } 
            defaultTableModel.addRow(fila);   
            a++;
        }                 
        tblMora.setModel(defaultTableModel);       
        if(a==0){JOptionPane.showMessageDialog(this, "No existen Deudas");}
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    
    private void actualizarProducto(String seccion,String producto){
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsMora moras = new ClsMora();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraProductoNivel(seccion,producto);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN 
            mora = moras.ListarMoraProducto(seccion,producto);
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext()){
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();  
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            }
            defaultTableModel.addRow(fila);
            a++;
        }   
        tblMora.setModel(defaultTableModel);
        if(a==0){JOptionPane.showMessageDialog(this, "No existen Deudas");}
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    private void rellenaServicio()
    {
        ClsServicio servicios = new ClsServicio();
        ArrayList<ClsEntidadServicio> producto = servicios.ListarServicio();        
        dlm.removeAllElements();
        //lista.setModel(dlm);
        Iterator iterator = producto.iterator();            
        String fila[] = new String[6];
        while(iterator.hasNext()){
            ClsEntidadServicio Servicio = new ClsEntidadServicio();
            Servicio = (ClsEntidadServicio) iterator.next();
            fila[0] = Servicio.getId_Servicio();
            fila[1] = Servicio.getNombre_Servicio();   
            fila[2] = Servicio.getAnio_Servicio();
          
            if(fila[2].equals(cmbAnio.getSelectedItem().toString())){
          dlm.addElement(fila[1]);      
            }
          
        }     
        lista.setModel(dlm); 
    }
    void rellenaProducto()
    {
   
    ClsProducto productos = new ClsProducto();
    ArrayList<ClsEntidadProducto> producto = productos.ListarProducto();
    Iterator iterator = producto.iterator();
    dlm.removeAllElements();
    String fila[] = new String[6];
    while(iterator.hasNext())
    {
        ClsEntidadProducto Producto = new ClsEntidadProducto();
        Producto = (ClsEntidadProducto) iterator.next();
        fila[0] = Producto.getId_Producto();
        fila[1] = Producto.getNombre_Producto();
        fila[2] = Producto.getAnio_Producto();
        if(fila[2].equals(cmbAnio.getSelectedItem().toString())){
        dlm.addElement(fila[1]);                  
        }        
    }
    lista.setModel(dlm); 
    }    
   
    private void cargaComboNivel()
    {
        ClsNivel niveles = new ClsNivel();
        ArrayList<ClsEntidadNivel> nivel =  niveles.SeleccionarNivel();
        Iterator it = nivel.iterator();
        DefaultComboBoxModel dtm = new DefaultComboBoxModel();
        dtm.removeAllElements();
        cmbNivel.removeAllItems();
                
        while(it.hasNext())
        {
        ClsEntidadNivel Nivel = new ClsEntidadNivel();
        Nivel = (ClsEntidadNivel) it.next();       
        codigoNivel.add(Nivel.getNivel_id());
        dtm.addElement(Nivel.getNivel_nombre());                
        }
        cmbNivel.setModel(dtm); 
    }
    private void cargaComboPeriodo()
    {
        codigoPeriodo.clear();
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
        String fila[] = new String[4];     
        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo = new ClsEntidadPeriodo();
        Periodo = (ClsEntidadPeriodo) iterator.next();               
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getEstado_Periodo();        
            if(Periodo.getEstado_Periodo().equals("Activo") &&                     
            codigoNivel.get(cmbNivel.getSelectedIndex()).equals(Periodo.getNivel_Id()))
            {   
            codigoPeriodo.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(Periodo.getNombre_Periodo());        
            }
        }
        cmbPeriodo.setModel(DefaultComboBoxModel);       
    }
    private void cargaComboSeccion()
    {    
        codigoSeccion.clear();
        ClsSeccion secciones = new ClsSeccion();
        ArrayList<ClsEntidadSeccion> seccion =  secciones.ListarSeccion();
        Iterator it = seccion.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbSeccion.removeAllItems();
        String fila2[] = new String[5];        
        while(it.hasNext())
        {
        ClsEntidadSeccion Seccion = (ClsEntidadSeccion) it.next();             
        fila2[0] = Seccion.getNombre_Seccion();
        fila2[1] = Seccion.getEstado_Periodo();       
        fila2[3] = Seccion.getNombre_Periodo();
        
            if (codigoPeriodo.get(cmbPeriodo.getSelectedIndex()).equals(Seccion.getId_Periodo())) 
            {
                codigoSeccion.add(Seccion.getId_Seccion());
                DefaultComboBoxModel.addElement(fila2[0]);
            }       
        }
        cmbSeccion.setModel(DefaultComboBoxModel);         
    }
    
    private void actualizarNoDeudaMatricula(String opcion)
    {
        int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsNoDeuda moras = new ClsNoDeuda();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraMatriculaNivel(opcion);
        }
        else
        {
            mora = moras.ListarMoraMatricula(opcion);
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext())
        {
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            }                      
            defaultTableModel.addRow(fila);  
            a++;            
        }        
        if(a==0){JOptionPane.showMessageDialog(this, "No se encontraron registros");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
   
    private void actualizarNoDeudaMensualidad(String seccion,String mes){
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsNoDeuda moras = new ClsNoDeuda();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraMensualidadNivel(seccion,mes);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN
            mora = moras.ListarMoraMensualidad(seccion,mes);        
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext()){
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();   
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            } 
            defaultTableModel.addRow(fila);   
            a++;
        }        
        if(a==0){JOptionPane.showMessageDialog(this, "No se encontraron registros");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    private void actualizarNoDeudaAlimentacion(String seccion,String mes){
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsNoDeuda moras = new ClsNoDeuda();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraAlimentacionNivel(seccion,mes);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN
            mora = moras.ListarMoraAlimentacion(seccion,mes);
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5]; 
        while(iterator.hasNext())
        {
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();  
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            } 
            defaultTableModel.addRow(fila);                 
            a++;
        }       
        if(a==0){JOptionPane.showMessageDialog(this, "No se encontraron registros");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    
    private void actualizarNoDeudaServicio(String seccion,String servicio)
    {
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsNoDeuda moras = new ClsNoDeuda();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraServicioNivel(seccion,servicio);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN
            mora = moras.ListarMoraServicio(seccion,servicio);
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];                
        while(iterator.hasNext()){
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();  
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            } 
            defaultTableModel.addRow(fila);   
            a++;
        }         
        if(a==0){JOptionPane.showMessageDialog(this, "No se encontraron registros");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    
    private void actualizarNoDeudaProducto(String seccion,String producto){
         int a=0;
        String titulos[] = {"Apelidos y Nombres","Total a Pagar","Pendiente","Fec. Vencimiento","Seccion"};
        ClsNoDeuda moras = new ClsNoDeuda();
        ArrayList<ClsEntidadMora> mora = new ArrayList<ClsEntidadMora>();        
        String[] EMPTY_STRING_ARRAY = new String[0];
        if(rbnPeriodo.isSelected())
        {
            mora = moras.ListarMoraProductoNivel(seccion,producto);
        }
        else
        {
            //ELIMINAR ELEMENTO DE ARRAY
                List<String> list = new ArrayList<>();
                Collections.addAll(list, titulos);
                list.removeAll(Arrays.asList("Seccion"));
                titulos = list.toArray(EMPTY_STRING_ARRAY);
            //FIN
            mora = moras.ListarMoraProducto(seccion,producto);
        }
        Iterator iterator = mora.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[5];  
        while(iterator.hasNext()){
            ClsEntidadMora Mora = new ClsEntidadMora();
            Mora = (ClsEntidadMora) iterator.next();
            fila[0] = Mora.getAlumno();
            fila[1] = Mora.getTotal();            
            fila[2] = Mora.getPendiente();
            fila[3] = Mora.getVencimiento();
            if(rbnPeriodo.isSelected())
            {
                fila[4] = Mora.getPeriodo();
            } 
            defaultTableModel.addRow(fila);
            a++;
        }   
        if(a==0){JOptionPane.showMessageDialog(this, "No se encontraron registros");}
        tblMora.setModel(defaultTableModel);        
        TableColumn  columna0 =tblMora.getColumnModel().getColumn(0);
        columna0.setPreferredWidth(230);
        TableColumn  columna1 =tblMora.getColumnModel().getColumn(1);
        columna1.setPreferredWidth(30); 
        TableColumn  columna2 =tblMora.getColumnModel().getColumn(2);
        columna2.setPreferredWidth(25); 
        TableColumn  columna3 =tblMora.getColumnModel().getColumn(3);
        columna3.setPreferredWidth(25);
        txta.setText(String.valueOf(a));
    }
    private void cargaMeses()
    {
       dlm.removeAllElements();
       dlm.addElement("ENERO");
       dlm.addElement("FEBRERO");
       dlm.addElement("MARZO");
       dlm.addElement("ABRIL");
       dlm.addElement("MAYO");
       dlm.addElement("JUNIO");
       dlm.addElement("JULIO");
       dlm.addElement("AGOSTO");
       dlm.addElement("SEPTIEMBRE");
       dlm.addElement("OCTUBRE");
       dlm.addElement("NOVIEMBRE");
       dlm.addElement("DICIEMBRE");
       lista.setModel(dlm);    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReporte;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVer;
    private javax.swing.JComboBox cmbAnio;
    private javax.swing.JComboBox cmbNivel;
    private javax.swing.JComboBox cmbPeriodo;
    private javax.swing.JComboBox cmbSeccion;
    private javax.swing.ButtonGroup grupo;
    private javax.swing.ButtonGroup grupoDeuda;
    private javax.swing.ButtonGroup grupoNivel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lista;
    private javax.swing.JRadioButton raAlimentacion;
    private javax.swing.JRadioButton raMatricula;
    private javax.swing.JRadioButton raMensualidad;
    private javax.swing.JRadioButton raProductos;
    private javax.swing.JRadioButton raServicios;
    private javax.swing.JRadioButton rbnNivel;
    private javax.swing.JRadioButton rbnPeriodo;
    private javax.swing.JRadioButton rbnSeccion;
    private javax.swing.JRadioButton rbnSinDeuda;
    private javax.swing.JRadioButton rbtDeuda;
    private javax.swing.JTable tblMora;
    private javax.swing.JTextField txta;
    // End of variables declaration//GEN-END:variables
}
