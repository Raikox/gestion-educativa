
package PckInterfaces;
import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadPeriodo;
import PckEntidad.ClsEntidadSeccion;
import PckNegocio.*;
import PckEntidad.*;
import static PckInterfaces.FrmPrincipal.dskpPrincipal;
import java.awt.Font;
import java.awt.Window;
import static java.awt.image.ImageObserver.WIDTH;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import prymatricula.ClsMisc;

public class FrmMatricula extends javax.swing.JInternalFrame {

//Variables uso sistema
    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
    Connection con=null;
    Font fuente=new Font("DroidSans", Font.BOLD, 13);

//Variables públicas    
    public static String idMatricula;

//Condicionales de cmbPeriodo y cmbSeccion para ItemStateChange
    int cmbSeccionEstado2=0;
    int cmbPeriodo1Estado=0;
    
//Variables ResultSet
    static ResultSet rsMatri = null;
    static ResultSet rsAlu = null;
    static ResultSet rsApo = null;
    static ResultSet rsCli = null;
    static ResultSet rsMatP= null;
    static ResultSet rsPadre1 = null;
    static ResultSet rsPadre2 = null;

//Declaración de direcciones
    //Reportes
    
    //Imagenes
    private static final String LOGOTIPO= "/PckImages/solr.jpg";
    private static final String TITULO= "/PckImages/ficha.jpg";
    

//Listas para guardar codigos de los combos
    ArrayList<String> codigoPeriodo = new ArrayList();
    ArrayList<String> codigoSeccion = new ArrayList();
    ArrayList<String> codigoPeriodo1 = new ArrayList();
    ArrayList<String> codigoSeccion1 = new ArrayList();
//Datos para el reporte ficha por parámetros
    //matricula
    String codmatricula="",fecmatricula="",nivelmatricula="";
    String secmatricula="",horarioe="",horarios="",mensualidad="";
    String sexo="",comida="",periodo="";
    String edad="",inicioclases="";
    //matricula doc. adjuntos
    String partidanac="",dnipadre="",dnimadre="";
    String dnimenor="",tarjetavac="",otro="";
    //alumno
    String nombre="",apepaterno="",apematerno="",fechanac="";
    String lugarnacimiento="",domicilio="",telefono="",dni="";
    String hermanos="", edadhermanos="", lugarocupa="", religion="";  
    //autorizacion para recoger
    String apoderado="",apoparentesco="",apodni="",apotelefono="";
    //clinico
    String  alermedicamento="", cualmedicamento="", aleralimento="", cualalimento="";
    String varicela="", rubeola="",sarampion="",hepatitis="",paperas="",otrocli="";        
    //padre
    String papellidop="", papellidom="",pnombre="", pfecha="";
    String pdni="",pvive="", pgrado="", pcivil="", pocupacion="", plaboral="";
    String pemail="",ptelefono="", ptelefono2="", pvivecon="";    
    //madre    
    String mapellidop="", mapellidom="",mnombre="", mfecha="";
    String mdni="",mvive="", mgrado="", mcivil="", mocupacion="", mlaboral="";
    String memail="",mtelefono="", mtelefono2="", mvivecon="";
    //codigos
    String codAlumno,codApoderado,codClinico,codEmergencia;
    public FrmMatricula() 
    {       
        initComponents();       
            
        cargaPeriodo();    
        if(cmbPeriodo.getSelectedIndex() != -1)
        {            
            CargaSeccion();
        }
        if(cmbSeccion.getSelectedIndex() != -1)
        {
            actualizarTabla();
        }
        cargaPeriodo2();
        if(cmbPeriodo1.getSelectedIndex() != -1)
        {            
            CargaSeccion2();
        }
        txtPapa2.setFont(fuente);
        txtMama2.setFont(fuente);
        txtPapa1.setFont(fuente);
        txtMama1.setFont(fuente);
        txtPadre.setFont(fuente);
        txtMadre.setFont(fuente);
        activaBotones(true,false,false,false,false,false,true,false);       
                   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panMatricula = new javax.swing.JPanel();
        lblMatricula = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnSalir = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnIngreso = new javax.swing.JButton();
        btnRectificacion = new javax.swing.JButton();
        btnGenerarFicha = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        btnRetiro = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatricula = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtMatriculados = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtHombres = new javax.swing.JTextField();
        txtMujeres = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        lblPeriodo1 = new javax.swing.JLabel();
        cmbPeriodo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        cmbSeccion = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        txtBusqueda = new javax.swing.JTextField();
        lblBusqueda = new javax.swing.JLabel();
        cbRetirado = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        cmbPeriodo1 = new javax.swing.JComboBox();
        lblPeriodo2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbSeccion1 = new javax.swing.JComboBox();
        btnCambiar = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        txtMama2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPapa2 = new javax.swing.JTextField();
        txtPapa1 = new javax.swing.JTextField();
        txtMama1 = new javax.swing.JTextField();
        txtPadre = new javax.swing.JTextField();
        txtMadre = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setTitle("Matricula");

        panMatricula.setBackground(new java.awt.Color(255, 255, 255));
        panMatricula.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMatricula.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckImages/matricula.jpg"))); // NOI18N
        panMatricula.add(lblMatricula, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Acciones"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnSalir.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/back.png"))); // NOI18N
        btnSalir.setText("Salir");
        btnSalir.setMaximumSize(new java.awt.Dimension(93, 23));
        btnSalir.setMinimumSize(new java.awt.Dimension(93, 23));
        btnSalir.setPreferredSize(new java.awt.Dimension(93, 23));
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 130, 40));

        btnModificar.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/edit_page.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.setMaximumSize(new java.awt.Dimension(93, 23));
        btnModificar.setMinimumSize(new java.awt.Dimension(93, 23));
        btnModificar.setPreferredSize(new java.awt.Dimension(93, 23));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 130, 40));

        btnIngreso.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnIngreso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/page_up.png"))); // NOI18N
        btnIngreso.setText("Reingreso");
        btnIngreso.setMaximumSize(new java.awt.Dimension(93, 23));
        btnIngreso.setMinimumSize(new java.awt.Dimension(93, 23));
        btnIngreso.setPreferredSize(new java.awt.Dimension(93, 23));
        btnIngreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresoActionPerformed(evt);
            }
        });
        jPanel1.add(btnIngreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 130, 40));

        btnRectificacion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnRectificacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/pastel_colors.png"))); // NOI18N
        btnRectificacion.setText("Ratificación");
        btnRectificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRectificacionActionPerformed(evt);
            }
        });
        jPanel1.add(btnRectificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 130, 40));

        btnGenerarFicha.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnGenerarFicha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/add_process.png"))); // NOI18N
        btnGenerarFicha.setText("<html> <p>Generar</p> <p align=center>Ficha</p> </html>");
        btnGenerarFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarFichaActionPerformed(evt);
            }
        });
        jPanel1.add(btnGenerarFicha, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 130, 40));

        btnNuevo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/add_page.png"))); // NOI18N
        btnNuevo.setText("Nuevo");
        btnNuevo.setMaximumSize(new java.awt.Dimension(93, 23));
        btnNuevo.setMinimumSize(new java.awt.Dimension(93, 23));
        btnNuevo.setPreferredSize(new java.awt.Dimension(93, 23));
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 130, 40));

        btnRetiro.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnRetiro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/delete_page.png"))); // NOI18N
        btnRetiro.setText("Retirar");
        btnRetiro.setMaximumSize(new java.awt.Dimension(93, 23));
        btnRetiro.setMinimumSize(new java.awt.Dimension(93, 23));
        btnRetiro.setPreferredSize(new java.awt.Dimension(93, 23));
        btnRetiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetiroActionPerformed(evt);
            }
        });
        jPanel1.add(btnRetiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 130, 40));

        panMatricula.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 90, 170, 370));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Alumnos matriculados"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblMatricula.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        tblMatricula.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMatricula.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMatriculaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMatricula);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 800, 320));

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Matriculados:");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 70, 20));

        txtMatriculados.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMatriculados.setEnabled(false);
        jPanel2.add(txtMatriculados, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 360, 50, -1));

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel6.setText("Hombres:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 360, -1, 20));

        jLabel7.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel7.setText("Mujeres:");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 360, -1, 20));

        txtHombres.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtHombres.setEnabled(false);
        jPanel2.add(txtHombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 360, 40, -1));

        txtMujeres.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMujeres.setEnabled(false);
        jPanel2.add(txtMujeres, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 360, 30, -1));

        panMatricula.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, 840, 400));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Búsqueda"));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPeriodo1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblPeriodo1.setText("Periodo:");
        jPanel3.add(lblPeriodo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, 20));

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2014-I", "INICIAL-2014" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 240, -1));

        jLabel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel1.setText("Aula:");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, 20));

        cmbSeccion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbSeccion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSeccion.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSeccionItemStateChanged(evt);
            }
        });
        jPanel3.add(cmbSeccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 240, -1));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Instantánea"));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtBusqueda.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtBusqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBusquedaMouseClicked(evt);
            }
        });
        txtBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBusquedaKeyTyped(evt);
            }
        });
        jPanel5.add(txtBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 260, -1));

        lblBusqueda.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblBusqueda.setText("Por nombre o apellidos:");
        jPanel5.add(lblBusqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, 20));

        jPanel3.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 420, 60));

        cbRetirado.setBackground(new java.awt.Color(255, 255, 255));
        cbRetirado.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cbRetirado.setText("Mostrar retirados");
        cbRetirado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbRetiradoItemStateChanged(evt);
            }
        });
        jPanel3.add(cbRetirado, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 130, 120, 20));

        panMatricula.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 520, 190));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Cambiar Sección"));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cmbPeriodo1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2014-I", "INICIAL-2014" }));
        cmbPeriodo1.setEnabled(false);
        cmbPeriodo1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodo1ItemStateChanged(evt);
            }
        });
        jPanel4.add(cmbPeriodo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 30, 220, -1));

        lblPeriodo2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblPeriodo2.setText("Periodo:");
        jPanel4.add(lblPeriodo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, 20));

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel3.setText("Aula:");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        cmbSeccion1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbSeccion1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSeccion1.setEnabled(false);
        cmbSeccion1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSeccion1ItemStateChanged(evt);
            }
        });
        jPanel4.add(cmbSeccion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 70, 220, -1));

        btnCambiar.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnCambiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIcoMenu/pen.png"))); // NOI18N
        btnCambiar.setText("Cambiar");
        btnCambiar.setEnabled(false);
        btnCambiar.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        btnCambiar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCambiar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnCambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarActionPerformed(evt);
            }
        });
        jPanel4.add(btnCambiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, -1, 50));

        panMatricula.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, 300, 190));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Vista números"));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtMama2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMama2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMama2.setEnabled(false);
        jPanel6.add(txtMama2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 170, 30));

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel4.setText("Padre:");
        jPanel6.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel5.setText("Madre:");
        jPanel6.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));

        txtPapa2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPapa2.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPapa2.setEnabled(false);
        jPanel6.add(txtPapa2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 170, 30));

        txtPapa1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPapa1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPapa1.setEnabled(false);
        jPanel6.add(txtPapa1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 170, 30));

        txtMama1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMama1.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMama1.setEnabled(false);
        jPanel6.add(txtMama1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 170, 30));

        txtPadre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadre.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtPadre.setEnabled(false);
        jPanel6.add(txtPadre, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 20, 120, 30));

        txtMadre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadre.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtMadre.setEnabled(false);
        jPanel6.add(txtMadre, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 120, 30));

        panMatricula.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 470, 190, 230));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panMatricula, javax.swing.GroupLayout.DEFAULT_SIZE, 1083, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panMatricula, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        FrmFichaMatricula.condi="nuevo";
        llamaFichaMatricula();     
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void tblMatriculaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMatriculaMouseClicked
        int reg;        
        DefaultTableModel dtm = (DefaultTableModel)tblMatricula.getModel();
        reg = tblMatricula.getSelectedRow();
        idMatricula = ((String)dtm.getValueAt(reg, 0)); 
        System.out.println(idMatricula);  
        con = ClsConexion.getConection();
        //obtengo datos para llenar
        ClsMatricula m = new ClsMatricula();
        //cmbSeccionEstado2 = 1;
        ResultSet rsMatricula = null;  
        //el estado permitira actualizar la seccion
        cmbPeriodo1Estado=1; 
        String papa = "",mama = "",papa2= "",mama2 = "";         
        try 
        {
            rsMatricula = m.SeleccionarMatriculaNumeros(idMatricula,con);
            while (rsMatricula.next())
            {                        
                papa = rsMatricula.getString("padre_telefono1");   
                papa2 = rsMatricula.getString("padre_telefono2");  
                mama = rsMatricula.getString("madre_telefono1");
                mama2 = rsMatricula.getString("madre_telefono2");
                cmbPeriodo1.setSelectedItem(rsMatricula.getString("nombre_periodo"));
                txtPadre.setText(rsMatricula.getString("padre_nombre"));
                txtMadre.setText(rsMatricula.getString("madre_nombre"));
            }
            
            if(papa.equals("") && papa2.equals(""))
            {
                txtPapa1.setText("Sin números");
                txtPapa2.setText("de teléfono");
            }
            else if(papa.equals(""))
            {
                txtPapa1.setText("");
                txtPapa2.setText(papa2);
            }
            else if(papa2.equals(""))
            {
                txtPapa1.setText(papa);
                txtPapa2.setText("");                
            }    
            else
            {
                txtPapa1.setText(papa);
                txtPapa2.setText(papa2);                
            }
            /////    
            if(mama.equals("") && mama2.equals(""))
            {
                txtMama1.setText("Sin números");
                txtMama2.setText("de teléfono");
            }
            else if(mama.equals(""))
            {
                txtMama1.setText("");
                txtMama2.setText(mama2);
            }
            else if(mama2.equals(""))
            {
                txtMama1.setText(mama);
                txtMama2.setText("");                
            } 
            else
            {
                txtMama2.setText(mama2);
                txtMama1.setText(mama);
            }
            
                        
        } catch (Exception ex) 
        {
            Logger.getLogger(FrmMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }               
        activaCombos(true, true);
        activaBotones(true,true,true,true,true,true,true,true);
        ClsConexion.closeConnection(con);
    }//GEN-LAST:event_tblMatriculaMouseClicked

    private void btnGenerarFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarFichaActionPerformed
        //obternerCodigos es una funcion que consulta toda la infor del alumno, 
        //para colocarla en las variables que serán enviadas a la ficha como reporte
        generarDatosFicha();       
        String nombreFoto;
        String direccionFoto=System.getProperty("user.dir")+"\\Alumnos\\";
        Map p = new HashMap();
             //imagenes del reporte
             p.put("logo", this.getClass().getResourceAsStream(LOGOTIPO));
             p.put("logo2", this.getClass().getResourceAsStream(TITULO));
             
             //variables del reporte (matricula)
            p.put("codmatricula", codmatricula);
            p.put("fecmatricula", fecmatricula);
            p.put("nivelmatricula", nivelmatricula);
            p.put("secmatricula", secmatricula);
            p.put("horarioe", horarioe);
            p.put("horarios", horarios);
            p.put("mensualidad", "s./"+mensualidad);
            p.put("sexo", sexo);
            p.put("inicioclases", inicioclases);
            p.put("comida", comida);
            p.put("periodo", periodo);
            p.put("edad", edad);
            
            p.put("partidanac", partidanac);p.put("dnipadre", dnipadre);
            p.put("dnimadre", dnimadre);p.put("dnimenor", dnimenor);
            p.put("tarjetavac", tarjetavac);
            p.put("otro", otro);

            //variables del reporte (alumno)                      
            p.put("nombre", nombre);
            p.put("apepaterno", apepaterno);
            p.put("apematerno", apematerno);
            p.put("fechanac", fechanac);
            p.put("lugarnacimiento", lugarnacimiento);
            p.put("domicilio", domicilio);
            p.put("telefono", telefono);
            p.put("dni", dni);
            p.put("hermanos", hermanos);
            p.put("edadhermanos", edadhermanos);
            p.put("lugarocupa", lugarocupa);
            p.put("religion",  religion);
            nombreFoto=apepaterno +" "+ apematerno + ", "+nombre+".png";
            //variables del reporte (autorización apoderado)
            p.put("apoderado", apoderado);
            p.put("apoparentesco", apoparentesco);
            p.put("apodni", apodni);
            p.put("apotelefono", apotelefono);
            
            //variables (Clinico)
            p.put("alermedicamento", alermedicamento);
            p.put("cualmedicamento", cualmedicamento);
            p.put("aleralimento", aleralimento);
            p.put("cualalimento", cualalimento);
            p.put("varicela", varicela);
            p.put("rubeola",  rubeola);
            p.put("sarampion",  sarampion);
            p.put("hepatitis",  hepatitis);
            p.put("paperas",  paperas);
            p.put("otrocli",  otrocli);
            
            
            //variables (Padre)
            p.put("papellidop", papellidop);
            p.put("papellidom", papellidom);
            p.put("pnombre", pnombre);
            p.put("pfecha", pfecha);
            p.put("pdni", pdni);
            p.put("pvive",  pvive);
            p.put("pgrado",  pgrado);
            p.put("pcivil",  pcivil);
            p.put("pocupacion",  pocupacion);
            p.put("plaboral",  plaboral);   
            p.put("pemail",  pemail);   
            p.put("ptelefono",  ptelefono);   
            p.put("ptelefono2",  ptelefono2);   
            p.put("pvivecon",  pvivecon);   
            
            //variables (Madre)
            p.put("mapellidop", mapellidop);
            p.put("mapellidom", mapellidom);
            p.put("mnombre", mnombre);
            p.put("mfecha", mfecha);
            p.put("mdni", mdni);
            p.put("mvive",  mvive);
            p.put("mgrado",  mgrado);
            p.put("mcivil",  mcivil);
            p.put("mocupacion", mocupacion);
            p.put("mlaboral",  mlaboral);   
            p.put("memail",  memail);   
            p.put("mtelefono", mtelefono);   
            p.put("mtelefono2", mtelefono2);   
            p.put("mvivecon", mvivecon);   
            //H:\DOCUMENTOS\NetBeansProjects\PryMatricula/Alumnos/BERNAVE PORTILLO, OCTAVIO GUIDO.png
            p.put("foto",(direccionFoto+nombreFoto));
            System.out.println(direccionFoto+nombreFoto);
            System.out.println(LOGOTIPO);
            JasperPrint print = null;
                      
            String  url ="/Reportes/RptFichaMatricula.jasper";
            String  url2 ="/Reportes/RptFichaMatriculaSinFoto.jasper";
             if(fotoExiste(direccionFoto+nombreFoto))
             {
                 try
                {
                    con = ClsConexion.getConection(); 
                    print = JasperFillManager.fillReport(System.getProperty("user.dir")+url,p ,con); 
                    JasperViewer view = new JasperViewer(print,false);
                    view.setTitle("Reporte Ficha Matricula");
                    view.setVisible(true);
                    ClsConexion.closeConnection(con);
                }
                catch(Exception ex)
                {
                    Logger.getLogger(FrmMatricula.class.getName()).log(Level.SEVERE, null, ex);
                }
             }
            else   
            {
                 try 
                 {  
                    con = ClsConexion.getConection();
                    JasperPrint print2 = JasperFillManager.fillReport(System.getProperty("user.dir")+url2,p ,con);
                    JasperViewer view2 = new JasperViewer(print2,false);
                    view2.setTitle("Reporte Ficha Matricula");
                    view2.setVisible(true); 
                    ClsConexion.closeConnection(con);
                } catch (JRException ex1) {
                    Logger.getLogger(FrmMatricula.class.getName()).log(Level.SEVERE, null, ex1);
                    }
            }
            
            
           // this.dispose();
    }//GEN-LAST:event_btnGenerarFichaActionPerformed

    private void btnRectificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRectificacionActionPerformed
      
        FrmFichaMatricula.condi="ratificame";
        llamaFichaMatricula();
      
    }//GEN-LAST:event_btnRectificacionActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
      FrmFichaMatricula.condi="modificame";
        
        llamaFichaMatricula();
      
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnIngresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresoActionPerformed
         ClsMatricula matriculas = new ClsMatricula();  
         con = ClsConexion.getConection();
         matriculas.EditarRetiro(idMatricula, "NO",con);
         txtBusqueda.setText("");
         actualizarTabla();
         activaBotones(true,false,false,false,false,false,true,false);            
         ClsConexion.closeConnection(con);
    }//GEN-LAST:event_btnIngresoActionPerformed

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        
        if(cmbPeriodo.getSelectedIndex() != -1)
        {
            CargaSeccion();
            if (cbRetirado.isSelected()==false)
            {
                actualizarTabla();
            }
            else if (cbRetirado.isSelected()==true)
            {
                actualizarTabla2();    
            }
        }
        
        
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void cbRetiradoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbRetiradoItemStateChanged
        
        if (cbRetirado.isSelected()==false)
        {            
            actualizarTabla();
        }
        else if (cbRetirado.isSelected()==true)
        {               
            actualizarTabla2();
        }
            
    }//GEN-LAST:event_cbRetiradoItemStateChanged

    private void cmbSeccionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSeccionItemStateChanged
        if(cmbSeccion.getSelectedIndex() != -1)
        {
            if (cbRetirado.isSelected()==false)
            {
                actualizarTabla();

            }
            else if (cbRetirado.isSelected()==true)
            {
                actualizarTabla2();    
            } 
        }
    }//GEN-LAST:event_cmbSeccionItemStateChanged

    private void cmbPeriodo1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodo1ItemStateChanged
        if(cmbPeriodo1Estado==1)
        {
            CargaSeccion2();
        }
    }//GEN-LAST:event_cmbPeriodo1ItemStateChanged

    private void btnRetiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetiroActionPerformed
        String Alumno="";
        ClsMatricula m = new ClsMatricula();
        con = ClsConexion.getConection();
        ResultSet rsMatricula;
        try 
        {
           rsMatricula =  m.SeleccionarMatricula(idMatricula,con);
           while(rsMatricula.next())
           {
           Alumno = rsMatricula.getString("apellidos_nombres");     
           }           
        } catch (Exception ex) {
            Logger.getLogger(FrmMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }
        ClsConexion.closeConnection(con);
        
        int n = JOptionPane.showConfirmDialog(this, "¿Retirar a: " + Alumno);        
        if(n==0) {            
                        
            txtBusqueda.setText("");
            AbrirDialogMatriculaRetiro();            
        }
        
    }//GEN-LAST:event_btnRetiroActionPerformed
    
    private void AbrirDialogMatriculaRetiro() {
        
        Window parentWindow = SwingUtilities.windowForComponent(this);
        MatriculaRetiro matriculaRetiro = new MatriculaRetiro(parentWindow, idMatricula);        
        matriculaRetiro.FormularioPadre(this);
        matriculaRetiro.setModal(true);
        matriculaRetiro.setVisible(true);
        matriculaRetiro.toFront();
    }
    
    private void txtBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBusquedaKeyTyped
        String a = "";
        a = txtBusqueda.getText();
        if(a.equals(""))
        {
        actualizarTabla();    
        }
        else
        {
        actualizarTablaBusqueda(a);    
        }
        
    }//GEN-LAST:event_txtBusquedaKeyTyped

    private void txtBusquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBusquedaMouseClicked
        int fin = txtBusqueda.getHeight();
        txtBusqueda.setSelectionStart(0);
        txtBusqueda.setSelectionEnd(fin);
    }//GEN-LAST:event_txtBusquedaMouseClicked

    private void btnCambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarActionPerformed
        int n = JOptionPane.showConfirmDialog(this, "¿Cambiar sección a los alumnos seleccionados?");
        int i;
        String codigoMatricula="";
        String codigoSeccion="";        
        if(n==0)
        {
            con = ClsConexion.getConection();
            ClsMatricula m = new ClsMatricula();
            TableModel tm = tblMatricula.getModel();
            int ss[] = tblMatricula.getSelectedRows();
            int limite;
            limite = ss.length;            
            for (i=0; i < limite;i++)
            {           
            codigoMatricula = (String) tm.getValueAt(ss[i], 0);
            System.out.println("idMat="+codigoMatricula);
            codigoSeccion = codigoSeccion1.get(cmbSeccion1.getSelectedIndex());
            System.out.println("idSec="+codigoSeccion);
            m.ModificarMatriculaSeccion(codigoMatricula,codigoSeccion,con);
            }
            JOptionPane.showMessageDialog(this, "Se cambio la sección correctamente.");
            ClsConexion.closeConnection(con);
            actualizarTabla();
            activaBotones(true,false,false,false,false,false,false,true);
            
        }
    }//GEN-LAST:event_btnCambiarActionPerformed

    private void cmbSeccion1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSeccion1ItemStateChanged
        Iterator<String> nombreIterator = codigoSeccion1.iterator();
        while(nombreIterator.hasNext()){
                String elemento = nombreIterator.next();
                System.out.println(elemento+" / ");
        }
        
    }//GEN-LAST:event_cmbSeccion1ItemStateChanged
  
    boolean fotoExiste(String foto)
    {
        File archivoFoto = new File(foto);
        return archivoFoto.exists();
    }
    private void generarDatosFicha()
    {       
        con = ClsConexion.getConection();
        ClsMatricula matri = new ClsMatricula();             
        try 
        {              
            rsMatri = matri.SeleccionarMatriculaFichaReporte(idMatricula,con);
            while(rsMatri.next())
            {
                codmatricula    =   rsMatri.getString("cod_matricula");
                fecmatricula    =   rsMatri.getString("fecha_matricula");
                nivelmatricula  =   rsMatri.getString("nivel_nombre");
                secmatricula    =   rsMatri.getString("nombre_seccion");
                horarioe        =   rsMatri.getString("horarioe_matricula");
                horarios        =   rsMatri.getString("horarios_matricula");
                mensualidad     =   rsMatri.getString("mensualidad_matricula");
                sexo            =   rsMatri.getString("sexo_alumno");
                inicioclases    =   rsMatri.getString("inicio_clases");
                comida          =   rsMatri.getString("comida_alumno");
                periodo         =   rsMatri.getString("nombre_periodo");
                edad            =   rsMatri.getString("edadanio_matricula");
                partidanac      =   rsMatri.getString("partida_nac");
                dnipadre        =   rsMatri.getString("dni_padre");
                dnimadre        =   rsMatri.getString("dni_madre");
                dnimenor        =   rsMatri.getString("dni_menor");
                tarjetavac      =   rsMatri.getString("tarjeta_vac");
                otro            =   rsMatri.getString("Otro");
                ////////////////////////ALUMNO///////////////////////////////
                nombre          =   rsMatri.getString("nombre_alumno");
                apepaterno      =   rsMatri.getString("apellidop_alumno");
                apematerno      =   rsMatri.getString("apellidom_alumno");
                fechanac        =   rsMatri.getString("fecha_nacimiento");
                lugarnacimiento =   rsMatri.getString("lugarn_alumno");
                domicilio       =   rsMatri.getString("domicilio_alumno");
                telefono        =   rsMatri.getString("telefono_alumno");
                dni             =   rsMatri.getString("dni_alumno");
                edadhermanos    =   rsMatri.getString("edadh_alumno");
                if(!edadhermanos.equals(""))
                {
                hermanos        =   "SI";
                }
                else{hermanos   =   "NO";}                
                lugarocupa      =   rsMatri.getString("lugarh_alumno");
                religion        =   rsMatri.getString("religion_alumno");
                /////////////////////APODERADO//////////////////////////////////
                apoderado       =   rsMatri.getString("nombre_apoderado");
                apoparentesco   =   rsMatri.getString("parentesco_apoderado");
                apodni          =   rsMatri.getString("dni_apoderado");
                apotelefono     =   rsMatri.getString("telefono_apoderado");
                ////////////////////////CLINICO/////////////////////////////////                
                cualmedicamento =   rsMatri.getString("medicamento_clinico");
                if(!cualmedicamento.equals(""))
                {
                alermedicamento =   "SI";
                }
                else
                {
                alermedicamento =   "NO";}
                cualalimento    =   rsMatri.getString("alimento_clinico");
                if(!cualmedicamento.equals(""))
                {
                aleralimento    =   "SI";
                }
                else
                {
                aleralimento    =   "NO";}                
                varicela        =   rsMatri.getString("varicelo_clinico");
                rubeola         =   rsMatri.getString("rubeola_clinico");
                sarampion       =   rsMatri.getString("sarampion_clinico");
                hepatitis       =   rsMatri.getString("hepatitis_clinico");
                paperas         =   rsMatri.getString("paperas_clinico");
                otrocli         =   rsMatri.getString("otro_clinico");
                ////////////////////////////////////////////////////////////////
                papellidop      =   rsMatri.getString("padre_apellido_paterno");
                papellidom      =   rsMatri.getString("padre_apellido_materno");
                pnombre         =   rsMatri.getString("padre_nombre");
                pfecha          =   rsMatri.getString("padre_fecha_nacimiento");
                pdni            =   rsMatri.getString("padre_dni");
                pvive           =   rsMatri.getString("padre_vive");
                pgrado          =   rsMatri.getString("padre_grado_instruccion");
                pcivil          =   rsMatri.getString("padre_estado_civil");
                pocupacion      =   rsMatri.getString("padre_ocupacion");
                plaboral        =   rsMatri.getString("padre_centro_laboral");
                pemail          =   rsMatri.getString("padre_correo");
                ptelefono       =   rsMatri.getString("padre_telefono1");
                ptelefono2      =   rsMatri.getString("padre_telefono2");
                pvivecon        =   rsMatri.getString("padre_vive_con_alumno");
                ////////////////////////////////////////////////////////////////
                mapellidop      =   rsMatri.getString("madre_apellido_paterno");
                mapellidom      =   rsMatri.getString("madre_apellido_materno");
                mnombre         =   rsMatri.getString("madre_nombre");
                mfecha          =   rsMatri.getString("madre_fecha_nacimiento");
                mdni            =   rsMatri.getString("madre_dni");
                mvive           =   rsMatri.getString("madre_vive");
                mgrado          =   rsMatri.getString("madre_grado_instruccion");
                mcivil          =   rsMatri.getString("madre_estado_civil");
                mocupacion      =   rsMatri.getString("madre_ocupacion");
                mlaboral        =   rsMatri.getString("madre_centro_laboral");
                memail          =   rsMatri.getString("madre_correo");
                mtelefono       =   rsMatri.getString("madre_telefono1");
                mtelefono2      =   rsMatri.getString("madre_telefono2");
                mvivecon        =   rsMatri.getString("madre_vive_con_alumno");
                
            }
        } catch (Exception ex) 
        {
            Logger.getLogger(FrmMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }
                
        ClsConexion.closeConnection(con);            
    }
    
    public void activaBotones(boolean nuevo, boolean generarficha, boolean rectificacion,boolean cambiar,
                               boolean ingreso,boolean modificar, boolean salir, boolean retiro)
    {
        btnNuevo.setEnabled(nuevo);
        btnGenerarFicha.setEnabled(generarficha);
        btnRectificacion.setEnabled(rectificacion);
        btnIngreso.setEnabled(ingreso);
        btnModificar.setEnabled(modificar);
        btnSalir.setEnabled(salir);
        btnRetiro.setEnabled(retiro);
        btnCambiar.setEnabled(cambiar);
    }
    private void activaCombos(boolean periodo, boolean seccion)
    {
        cmbPeriodo1.setEnabled(periodo);
        cmbSeccion1.setEnabled(seccion);
    }
   
    private void llamaFichaMatricula()
    {
        PckInterfaces.FrmFichaMatricula fichamatri= new PckInterfaces.FrmFichaMatricula();
        
        int x = (dskpPrincipal.getWidth() / 2) - fichamatri.getWidth() / 2;
        int y = (dskpPrincipal.getHeight() / 2) - fichamatri.getHeight() / 2;

        if (fichamatri.isShowing()) {
            fichamatri.setLocation(x, y);
        } else {
            dskpPrincipal.add(fichamatri);
            fichamatri.setLocation(x, y);
            fichamatri.show();
            this.dispose();
        }
        
    }
    
    
    
    private void cargaPeriodo()
    {
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
        String fila[] = new String[4];
     
        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo = new ClsEntidadPeriodo();
        Periodo = (ClsEntidadPeriodo) iterator.next();               
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getEstado_Periodo();        
            if(Periodo.getEstado_Periodo().equals("Activo"))
            {   
            codigoPeriodo.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(Periodo.getNombre_Periodo());        
            }        
        }
        cmbPeriodo.setModel(DefaultComboBoxModel);
        
    }
    private void cargaPeriodo2()
    {
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo1.removeAllItems();
        String fila[] = new String[4];     
        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo = new ClsEntidadPeriodo();
        Periodo = (ClsEntidadPeriodo) iterator.next();               
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getEstado_Periodo();        
            if(Periodo.getEstado_Periodo().equals("Activo"))
            {   
            codigoPeriodo1.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(Periodo.getNombre_Periodo());        
            }        
        }
        cmbPeriodo1.setModel(DefaultComboBoxModel);       
    }
    public void actualizarTabla() {
        
        //p = numeor de orden //kk=cantidad de alumnos
        int p=1;
        int kk=0;
        int mujeres=0;
        int hombres=0;
        //Telefonos van acompañados de los nombres
        String titulos[] = {"ID","N°","Appelidos y Nombres","S. Alim.","Inicio Clases","Teléfono Padre","Teléfono Madre","Retirado"};
        ClsMatricula matriculas = new ClsMatricula();
        con = ClsConexion.getConection();
        ArrayList<ClsEntidadMatricula> matricula = matriculas.ListarMatricula(con);
        Iterator iterator = matricula.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos){
        public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
        };  
        String fila[] = new String[9];   
        while(iterator.hasNext())
        {            
            ClsEntidadMatricula Matricula = (ClsEntidadMatricula) iterator.next();            
            fila[0] = Matricula.getId_Matricula();                         
            fila[2] = Matricula.getApe_Alumno();            
            fila[3] = Matricula.getComida_Alumno();
            fila[4] = Matricula.getInicio_Clases();
            fila[5] = Matricula.getPadre();
            fila[6] = Matricula.getMadre();
            fila[7] = Matricula.getRetiro();   
            
            if(cmbSeccion.getSelectedIndex() != -1)
            {               
            
                if(fila[7].equals("NO") && Matricula.getId_Seccion().equals(codigoSeccion.get(cmbSeccion.getSelectedIndex())))
                {                
                    fila[1] = String.valueOf(p);
                    p++;
                    kk++;
                    defaultTableModel.addRow(fila);

                    switch(Matricula.getSexo_Alumno())
                    {
                        case "M":
                            hombres++;
                            break;
                        case "F":
                            mujeres++;
                            break;
                    }

                } 
            }
        }
        tblMatricula.setModel(defaultTableModel);
        tblMatricula.removeColumn(tblMatricula.getColumnModel().getColumn(0));
        TableColumn  columnaNumero =tblMatricula.getColumnModel().getColumn(0);
        columnaNumero.setPreferredWidth(15);                
        TableColumn  columnaApe =tblMatricula.getColumnModel().getColumn(1);
        columnaApe.setPreferredWidth(250);            
        TableColumn  columnaCod =tblMatricula.getColumnModel().getColumn(2);
        columnaCod.setPreferredWidth(50);            
        TableColumn  columnaIni =tblMatricula.getColumnModel().getColumn(3);
        columnaIni.setPreferredWidth(60);              
        TableColumn  columnaPadre =tblMatricula.getColumnModel().getColumn(4);
        columnaPadre.setPreferredWidth(170); 
        TableColumn  columnaMadre =tblMatricula.getColumnModel().getColumn(5);
        columnaMadre.setPreferredWidth(170); 
        TableColumn  columnaRetiro =tblMatricula.getColumnModel().getColumn(6);
        columnaRetiro.setPreferredWidth(30); 
        txtMatriculados.setText(String.valueOf(kk));
        txtHombres.setText(String.valueOf(hombres));
        txtMujeres.setText(String.valueOf(mujeres)); 
        TableCellRenderer tcr =  tblMatricula.getTableHeader().getDefaultRenderer();                       
        ClsMisc.miRender mr = new ClsMisc.miRender(tcr);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 6);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 0);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 2);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 3);
        ClsConexion.closeConnection(con);                
    }
    private void actualizarTabla2()
    {
        //p = numeor de orden //kk=cantidad de alumnos
        int p=1;
        int kk=0;
        con = ClsConexion.getConection();
        //Telefonos van acompañados de los nombres //Los retirados si se muestran
        String titulos[] = {"ID","N°","Appelidos y Nombres","S. Alim.","Inicio Clases","Teléfono Padre","Teléfono Madre","Retirado"};
        ClsMatricula matriculas = new ClsMatricula();
        ArrayList<ClsEntidadMatricula> matricula = matriculas.ListarMatricula(con);
        Iterator iterator = matricula.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos);        
        String fila[] = new String[9];   
        while(iterator.hasNext())
        {            
            ClsEntidadMatricula Matricula = (ClsEntidadMatricula) iterator.next();            
            fila[0] = Matricula.getId_Matricula();                         
            fila[2] = Matricula.getApe_Alumno();            
            fila[3] = Matricula.getComida_Alumno();
            fila[4] = Matricula.getInicio_Clases();
            fila[5] = Matricula.getPadre();
            fila[6] = Matricula.getMadre();
            fila[7] = Matricula.getRetiro();   
            
            if(Matricula.getId_Seccion().equals(codigoSeccion.get(cmbSeccion.getSelectedIndex())))
            {
                fila[1] = String.valueOf(p);
                p++;
                kk++;
                defaultTableModel.addRow(fila);
            }                            
        }         
        tblMatricula.setModel(defaultTableModel);
        tblMatricula.removeColumn(tblMatricula.getColumnModel().getColumn(0));
        TableColumn  columnaNumero =tblMatricula.getColumnModel().getColumn(0);
        columnaNumero.setPreferredWidth(15);                
        TableColumn  columnaApe =tblMatricula.getColumnModel().getColumn(1);
        columnaApe.setPreferredWidth(170);            
        TableColumn  columnaCod =tblMatricula.getColumnModel().getColumn(2);
        columnaCod.setPreferredWidth(50);            
        TableColumn  columnaIni =tblMatricula.getColumnModel().getColumn(3);
        columnaIni.setPreferredWidth(60);              
        TableColumn  columnaPadre =tblMatricula.getColumnModel().getColumn(4);
        columnaPadre.setPreferredWidth(200); 
        TableColumn  columnaMadre =tblMatricula.getColumnModel().getColumn(5);
        columnaMadre.setPreferredWidth(200); 
        TableColumn  columnaRetiro =tblMatricula.getColumnModel().getColumn(6);
        columnaRetiro.setPreferredWidth(30); 
        txtMatriculados.setText(String.valueOf(kk));
        TableCellRenderer tcr =  tblMatricula.getTableHeader().getDefaultRenderer();                       
        ClsMisc.miRender mr = new ClsMisc.miRender(tcr);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 6);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 0);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 2);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 3);   
        ClsConexion.closeConnection(con);
    }
    private void actualizarTablaBusqueda(String busqueda)
    {                
        //Telefonos van acompañados de los nombres //
        String titulos[] = {"ID","Appelidos y Nombres","Periodo","Seccion","Teléfono Padre","Teléfono Madre","Retirado"};
        ClsMatricula matriculas = new ClsMatricula();
        con = ClsConexion.getConection();
        ArrayList<ClsEntidadMatricula> matricula = matriculas.SeleccionarMatriculaBusqueda(busqueda,con);
        Iterator iterator = matricula.iterator();
        DefaultTableModel defaultTableModel =new DefaultTableModel(null,titulos){
        @Override
        public boolean isCellEditable(int rowIndex,int columnIndex){return false;} 
        };         
        String fila[] = new String[9];   
        while(iterator.hasNext())
        {            
            ClsEntidadMatricula Matricula = (ClsEntidadMatricula) iterator.next();            
            fila[0] = Matricula.getId_Matricula();                         
            fila[1] = Matricula.getApe_Alumno();            
            fila[2] = Matricula.getNombre_Periodo();
            fila[3] = Matricula.getNombre_Seccion();
            fila[4] = Matricula.getPadre();
            fila[5] = Matricula.getMadre();
            fila[6] = Matricula.getRetiro();   
            if(fila[6].equals("NO"))
            {                                        
            defaultTableModel.addRow(fila);
            }
        }         
        tblMatricula.setModel(defaultTableModel);
        tblMatricula.removeColumn(tblMatricula.getColumnModel().getColumn(0));                       
        TableColumn  columnaApe =tblMatricula.getColumnModel().getColumn(0);
        columnaApe.setPreferredWidth(170);            
        TableColumn  columnaCod =tblMatricula.getColumnModel().getColumn(1);
        columnaCod.setPreferredWidth(100);            
        TableColumn  columnaIni =tblMatricula.getColumnModel().getColumn(2);
        columnaIni.setPreferredWidth(100);              
        TableColumn  columnaPadre =tblMatricula.getColumnModel().getColumn(3);
        columnaPadre.setPreferredWidth(150); 
        TableColumn  columnaMadre =tblMatricula.getColumnModel().getColumn(4);
        columnaMadre.setPreferredWidth(150); 
        TableColumn  columnaRetiro =tblMatricula.getColumnModel().getColumn(5);
        columnaRetiro.setPreferredWidth(30);         
        TableCellRenderer tcr =  tblMatricula.getTableHeader().getDefaultRenderer();                       
        ClsMisc.miRender mr = new ClsMisc.miRender(tcr);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 5);        
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 1);
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 3);   
        mr.getTableCellRendererComponent(tblMatricula, fila, isSelected, isIcon, WIDTH, 2);
        ClsConexion.closeConnection(con);
    }
    
    private void CargaSeccion()
    {    
        codigoSeccion.clear();
        ClsSeccion secciones = new ClsSeccion();
        ArrayList<ClsEntidadSeccion> seccion =  secciones.ListarSeccion();
        Iterator it = seccion.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbSeccion.removeAllItems();
        String fila2[] = new String[5];        
        while(it.hasNext())
        {
        ClsEntidadSeccion Seccion = (ClsEntidadSeccion) it.next();             
        fila2[0] = Seccion.getNombre_Seccion();
        fila2[1] = Seccion.getEstado_Periodo();       
        fila2[3] = Seccion.getNombre_Periodo();
        
            if (codigoPeriodo.get(cmbPeriodo.getSelectedIndex()).equals(Seccion.getId_Periodo())) 
            {
                codigoSeccion.add(Seccion.getId_Seccion());
                DefaultComboBoxModel.addElement(fila2[0]);
            }       
        }
        cmbSeccion.setModel(DefaultComboBoxModel);         
    }
    private void CargaSeccion2()
    {    
        codigoSeccion1.clear();
        ClsSeccion secciones = new ClsSeccion();
        ArrayList<ClsEntidadSeccion> seccion =  secciones.ListarSeccion();
        Iterator it = seccion.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbSeccion1.removeAllItems();
        String fila2[] = new String[5];        
        while(it.hasNext())
        {
        ClsEntidadSeccion Seccion = (ClsEntidadSeccion) it.next();             
        fila2[0] = Seccion.getNombre_Seccion();
        fila2[1] = Seccion.getEstado_Periodo();       
        fila2[3] = Seccion.getNombre_Periodo();        
            if (codigoPeriodo1.get(cmbPeriodo1.getSelectedIndex()).equals(Seccion.getId_Periodo())) 
            {
                codigoSeccion1.add(Seccion.getId_Seccion());
                DefaultComboBoxModel.addElement(fila2[0]);
            }
        }
        cmbSeccion1.setModel(DefaultComboBoxModel);         
    }
    private void refrescar()
    {
        //matricula
        codmatricula="";
        fecmatricula="";nivelmatricula="";
        secmatricula="";horarioe="";horarios="";
        sexo="";comida="";periodo="";
        edad="";
        //matricula doc. adjuntos
        partidanac="";dnipadre="";dnimadre="";
        dnimenor="";tarjetavac="";otro=""; 
        //alumno
        nombre="";apepaterno="";apematerno="";fechanac="";
        lugarnacimiento="";domicilio="";telefono="";dni="";
        hermanos=""; edadhermanos=""; lugarocupa=""; religion="";  
        //autorizacion para recoger
        apoderado="";apoparentesco="";apodni="";apotelefono="";
        //clinico
        alermedicamento=""; cualmedicamento=""; aleralimento=""; cualalimento="";
        varicela=""; rubeola="";sarampion="";hepatitis="";paperas="";otrocli="";      
        //padre
        papellidop=""; papellidom="";pnombre=""; pfecha="";
        pdni="";pvive=""; pgrado=""; pcivil=""; pocupacion=""; plaboral="";
        pemail="";ptelefono=""; ptelefono2=""; pvivecon="";    
        //madre    
        mapellidop=""; mapellidom="";mnombre=""; mfecha="";
        mdni="";mvive=""; mgrado=""; mcivil=""; mocupacion=""; mlaboral="";
        memail="";mtelefono=""; mtelefono2=""; mvivecon="";    
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCambiar;
    private javax.swing.JButton btnGenerarFicha;
    private javax.swing.JButton btnIngreso;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnRectificacion;
    private javax.swing.JButton btnRetiro;
    private javax.swing.JButton btnSalir;
    private javax.swing.JCheckBox cbRetirado;
    private javax.swing.JComboBox cmbPeriodo;
    private javax.swing.JComboBox cmbPeriodo1;
    private javax.swing.JComboBox cmbSeccion;
    private javax.swing.JComboBox cmbSeccion1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBusqueda;
    private javax.swing.JLabel lblMatricula;
    private javax.swing.JLabel lblPeriodo1;
    private javax.swing.JLabel lblPeriodo2;
    private javax.swing.JPanel panMatricula;
    private javax.swing.JTable tblMatricula;
    private javax.swing.JTextField txtBusqueda;
    private javax.swing.JTextField txtHombres;
    private javax.swing.JTextField txtMadre;
    private javax.swing.JTextField txtMama1;
    private javax.swing.JTextField txtMama2;
    private javax.swing.JTextField txtMatriculados;
    private javax.swing.JTextField txtMujeres;
    private javax.swing.JTextField txtPadre;
    private javax.swing.JTextField txtPapa1;
    private javax.swing.JTextField txtPapa2;
    // End of variables declaration//GEN-END:variables
}
