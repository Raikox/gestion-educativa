/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PckInterfaces;

import PckConexion.ClsConexion;
import PckEntidad.ClsEntidadDeudas;
import PckEntidad.ClsEntidadNivel;
import PckEntidad.ClsEntidadPeriodo;
import PckNegocio.ClsAlumno;
import PckNegocio.ClsDeudas;
import PckNegocio.ClsMatricula;
import PckNegocio.ClsNivel;
import PckNegocio.ClsPeriodo;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import mpsEntity.ReporteDeudaMontoEntity;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Kevin
 */
public class ReporteDeudaMonto extends javax.swing.JPanel {

    private static final String LOGOTIPO = System.getProperty("user.dir")+"/Img/solr.jpg";
    
    List<String> listIdNivel = new ArrayList();
    List<String> listIdPeriodo = new ArrayList();
    /**
     * Creates new form ReporteDeudaMonto
     */
    public ReporteDeudaMonto() {
        initComponents();
        
         CargarComboNivel(); 
        if(cmbNivel.getSelectedIndex() != -1) {
            CargarComboPeriodo();
        }    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        pnlDerecha = new javax.swing.JPanel();
        pnlBot = new javax.swing.JPanel();
        btnGenerarReporte = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmbNivel = new javax.swing.JComboBox<>();
        cmbPeriodo = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtMonto = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(237, 240, 242));
        jPanel4.setPreferredSize(new java.awt.Dimension(911, 50));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(237, 240, 242));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        jLabel1.setText("REPORTE DEUDAS POR MONTO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel5.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(237, 240, 242));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        pnlDerecha.setBackground(new java.awt.Color(255, 255, 255));
        pnlDerecha.setPreferredSize(new java.awt.Dimension(300, 400));
        pnlDerecha.setLayout(new java.awt.BorderLayout());

        pnlBot.setBackground(new java.awt.Color(255, 255, 255));
        pnlBot.setLayout(new java.awt.GridBagLayout());

        btnGenerarReporte.setFont(new java.awt.Font("Droid Sans", 1, 12)); // NOI18N
        btnGenerarReporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/ic_assignment_black_24dp.png"))); // NOI18N
        btnGenerarReporte.setText("GENERAR REPORTE");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 0, 0, 0);
        pnlBot.add(btnGenerarReporte, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel5.setText("Nivel.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 0);
        pnlBot.add(jLabel5, gridBagConstraints);

        cmbNivel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbNivel.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbNivel.setPreferredSize(new java.awt.Dimension(500, 20));
        cmbNivel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNivelItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        pnlBot.add(cmbNivel, gridBagConstraints);

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setMinimumSize(new java.awt.Dimension(300, 20));
        cmbPeriodo.setPreferredSize(new java.awt.Dimension(500, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        pnlBot.add(cmbPeriodo, gridBagConstraints);

        jLabel13.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel13.setText("Monto.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 0);
        pnlBot.add(jLabel13, gridBagConstraints);

        jLabel14.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel14.setText("Periodo.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        pnlBot.add(jLabel14, gridBagConstraints);

        txtMonto.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMonto.setMinimumSize(new java.awt.Dimension(100, 20));
        txtMonto.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 20);
        pnlBot.add(txtMonto, gridBagConstraints);

        pnlDerecha.add(pnlBot, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel3.add(pnlDerecha, gridBagConstraints);

        add(jPanel3, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed

        ClsAlumno alumnos = new ClsAlumno();
        ClsDeudas deudas = new ClsDeudas();
        
        ArrayList<ReporteDeudaMontoEntity> listDeudaMonto = new ArrayList<>();
        ArrayList<ClsEntidadDeudas> listDeudas;
        ReporteDeudaMontoEntity deudaMontoEntity;
        
        String idMatricula; String nombreAula; String nombresAlumno;
        String idPeriodo;
        Connection con;
        Double totalDeuda = 0.0;
        Double montoDeuda;
        Double totalTotal = 0.0;
        
        idPeriodo = listIdPeriodo.get(cmbPeriodo.getSelectedIndex());
        montoDeuda = Double.parseDouble(txtMonto.getText());
        
        try {
            
            //Listar los alumnos por periodo
            con = ClsConexion.getConection();
            ResultSet rsAlu = alumnos.SeleccionarAlumnoPeriodo(idPeriodo,con);
            
            while(rsAlu.next()) {
                
                //Se obtienen los datos del alumno
                idMatricula = rsAlu.getString("id_matricula");
                nombreAula = rsAlu.getString("nombre_seccion");
                nombresAlumno = rsAlu.getString("apellidos_nombres");   
                
                //Se listan las deudas del alumno
                listDeudas = deudas.ListarDeudas(idMatricula, con);
                
                totalDeuda = 0.0;
                
                //recorremos la lista para obtener los totales
                for(ClsEntidadDeudas ed : listDeudas) {
                    
                    int aux2=0;
                    int aux3=0;
                    int mes2=0; 
                    
                    mes2 = obtenerMesInicioClases(idMatricula,con);
                    
                    //verifica que la palabra sea mayor a 11 caracteres (ALIMENTACION)
                    if(ed.Concepto.length()>11) {
                        //en este caso esta registrado "ALIMENTACION " (con espacio) 
                        //se verifica que a continuacion de ALIMENTACION no exista ningun otro caracter                
                        if(ed.Concepto.substring(12).equals(" ")) {                            
                         
                            totalDeuda = totalDeuda + Double.parseDouble(ed.Pendiente);                              
                        }                        
                        else if(ed.Concepto.substring(0,12).equals("ALIMENTACION")) {
                            
                        //cumple, por lo tanto la siguiente palabra es un mes, y la deuda es matricula                    
                            switch (ed.Concepto.substring(13)) {
                                
                                case "ENERO":aux2 = 0;break;
                                case "FEBRERO":aux2=1;break;
                                case "MARZO":aux2=2;break;
                                case "ABRIL":aux2=3;break;
                                case "MAYO":aux2=4;break;
                                case "JUNIO":aux2=5;break;
                                case "JULIO":aux2=6;break;
                                case "AGOSTO":aux2=7;break;
                                case "SEPTIEMBRE":aux2=8;break;
                                case "OCTUBRE":aux2=9;break;
                                case "NOVIEMBRE":aux2=10;break;
                                case "DICIEMBRE":aux2=11;break;
                            }
                            //si el mes es mayor que la fecha de inicio de clases se mostrara en la tabla
                            if(aux2>=mes2) {
                                                            
                                totalDeuda = totalDeuda + Double.parseDouble(ed.Pendiente);
                                                               
                            }
                            //si nada de esto ocurre comparamos que despues de ALIMENTACION haya un espacio en blanco
                            //si es asi, existen caracteres despues de ese espacio y deben mostrarse en la tabla
                            else if(ed.Concepto.substring(12,13).equals(" ")) {
                                                                
                                totalDeuda = totalDeuda + Double.parseDouble(ed.Pendiente);                               
                                
                            }
                        } 
                        //si no es eso es deuda de mensualidad segun el mes 
                        //la deuda es mayor al inicio de clases
                        else if(ed.Concepto.substring(0,11).equals("MENSUALIDAD")) { 
                            
                            switch (ed.Concepto.substring(12)) {
                                
                                case "ENERO":aux3 = 0;break;
                                case "FEBRERO":aux3=1;break;
                                case "MARZO":aux3=2;break;
                                case "ABRIL":aux3=3;break;
                                case "MAYO":aux3=4;break;
                                case "JUNIO":aux3=5;break;
                                case "JULIO":aux3=6;break;
                                case "AGOSTO":aux3=7;break;
                                case "SEPTIEMBRE":aux3=8;break;
                                case "OCTUBRE":aux3=9;break;
                                case "NOVIEMBRE":aux3=10;break;
                                case "DICIEMBRE":aux3=11;break;
                            }
                            if(aux3>=mes2) {
                            
                                totalDeuda = totalDeuda + Double.parseDouble(ed.Pendiente);                                                          
                            } 
                        }
                        else {
                            
                            totalDeuda = totalDeuda + Double.parseDouble(ed.Pendiente);                            
                            
                        }

                    }
                    else {   
                        
                        totalDeuda = totalDeuda + Double.parseDouble(ed.Pendiente);                        
                        
                    }
                    
                }
                
                //Solo las deudas mayores al monto indicado
                if(totalDeuda > montoDeuda) {
                    deudaMontoEntity = new ReporteDeudaMontoEntity(nombresAlumno,nombreAula,String.valueOf(totalDeuda));
                    listDeudaMonto.add(deudaMontoEntity);
                    totalTotal = totalTotal + totalDeuda;
                }                
                
            }
            
            ClsConexion.closeConnection(con);
            
        } catch (Exception ex) {
            Logger.getLogger(ReporteDeudaMonto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //REPORTE
        
        JasperPrint jPrint;
        JasperViewer jView;
        String reporteJrxml = "/Reportes/RptDeudaMonto.jrxml";
        String reporteJasper = "/Reportes/RptDeudaMonto.jasper";
        
        HashMap mapa = new HashMap();
        mapa.put("total", String.valueOf(totalTotal));
        mapa.put("monto", String.valueOf(montoDeuda));
        mapa.put("logo", LOGOTIPO);
        mapa.put("periodo", cmbPeriodo.getSelectedItem().toString());
        
        try {
            
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(listDeudaMonto);
            JasperDesign jasperDesign = JRXmlLoader.load(System.getProperty("user.dir") + reporteJrxml);
            JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);
            jPrint = JasperFillManager.fillReport(jasperReport, mapa, ds);
            jView = new JasperViewer(jPrint, false);
            jView.setTitle("Reporte deudas por monto");
            jView.setVisible(true);
            
        } catch (JRException ex) {
            Logger.getLogger(FrmRptSexoAlumno.class.getName()).log(Level.SEVERE, null, ex);
        }    
        
    }//GEN-LAST:event_btnGenerarReporteActionPerformed

    private void cmbNivelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbNivelItemStateChanged
        
        if(cmbNivel.getSelectedIndex() != -1 ) {
            
            CargarComboPeriodo();             
        }
    }//GEN-LAST:event_cmbNivelItemStateChanged

    private void CargarComboNivel() {
        
        ClsNivel niveles = new ClsNivel();
        ArrayList<ClsEntidadNivel> nivele =  niveles.SeleccionarNivel();
        Iterator it = nivele.iterator();
        DefaultComboBoxModel dtm = new DefaultComboBoxModel();
        dtm.removeAllElements();
        cmbNivel.removeAllItems();
                
        while(it.hasNext())
        {
        ClsEntidadNivel Nivel = (ClsEntidadNivel) it.next();       
        listIdNivel.add(Nivel.getNivel_id());
        dtm.addElement(Nivel.getNivel_nombre());                
        }
        cmbNivel.setModel(dtm); 
    }
    
    private void CargarComboPeriodo() {
        
        listIdPeriodo.clear();
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
            
        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo = (ClsEntidadPeriodo) iterator.next();               
        
            if(Periodo.getEstado_Periodo().equals("Activo") &&                     
            listIdNivel.get(cmbNivel.getSelectedIndex()).equals(Periodo.getNivel_Id()))
            {   
            listIdPeriodo.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(Periodo.getNombre_Periodo());        
            }
        }
        cmbPeriodo.setModel(DefaultComboBoxModel);       
    }
    
    private int obtenerMesInicioClases(String codMatricula,Connection conx) {
        int mmes;
        String inicioClases = "";
        ClsMatricula matricula = new ClsMatricula();
        ResultSet rsMatricula;    

        try 
        {
            rsMatricula = matricula.SeleccionarMatriculaSolo(codMatricula,conx);
            while(rsMatricula.next())
            {

                inicioClases = rsMatricula.getString("inicio_clases");                    
            }                

        } catch (Exception ex) {
            Logger.getLogger(FrmPagoTodo.class.getName()).log(Level.SEVERE, null, ex);
        }

        mmes = Integer.parseInt(inicioClases.substring(3, 5))-1;
        return mmes;
        }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JComboBox<String> cmbNivel;
    private javax.swing.JComboBox<String> cmbPeriodo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel pnlBot;
    private javax.swing.JPanel pnlDerecha;
    private javax.swing.JTextField txtMonto;
    // End of variables declaration//GEN-END:variables
}
