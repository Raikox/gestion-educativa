/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package PckInterfaces;
import PckConexion.ClsConexion;
import PckEntidad.*;
import static PckInterfaces.FrmMatricula.idMatricula;
import PckNegocio.*;
import static PckInterfaces.FrmPrincipal.dskpPrincipal;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static prymatricula.ClsMisc.calculaEdad;
import static prymatricula.ClsMisc.convertirMayu;
import static prymatricula.ClsMisc.formatoFecha;
import static prymatricula.ClsMisc.formatoFechaDate;
import static prymatricula.Pagos.GenerarAlumnoPago;

/**
 *
 * @author John Kevin Montes De Oca Vizcarra
 * @email jkevin.mv@gmail.com
 */
public class FrmFichaMatricula extends javax.swing.JInternalFrame {
private Connection con=null;
int limite= 8;
static int intcontador;

String id[] = new String[1000];
//codigo matricula ( no id )
String strMatricula ;
String strCodigo;
String minu;

String k="";
String miSeccion="";
 Date fee;
//Condicionales combo 
 int conComboPeriodo=0;
 int conComboSeccion=0;

 
 Date feep;

int i=0;
int aux=0;

String ap2;
String codApo[] = new String[100];
String men = "";
public static String condi;
String direcImagen="";
byte[] bytesImg;
File archivo;
Date inicio;
Image imagen;
ImageIcon ico=null;
String ini_clases="";
FileOutputStream salida;

//Codigos de los combos
  ArrayList<String> codigoNivel = new ArrayList();
  ArrayList<String> codigoPeriodo = new ArrayList();
  ArrayList<String> codigoSeccion = new ArrayList();

    /**
     * Creates new form FrmFichaMatricula
     */
    public FrmFichaMatricula() {
        
        initComponents();
        
        btnGuardar.setEnabled(true);
        //Grupo de botones
        bgrpSexo.add(rdF);
        bgrpSexo.add(rdM);
        
        bgrpHermano.add(rdHermanoSi);
        bgrpHermano.add(rdHermanoNo);
        
        bgrpAlergicoMed.add(rdAlergicoMedSi);
        bgrpAlergicoMed.add(rdAlergicoMedNo);
        
        bgrpAlergicoAli.add(rdAlergicoAliSi);
        bgrpAlergicoAli.add(rdAlergicoAliNo);
        
        bgrpPadreVive.add(rdPadreViveSi);
        bgrpPadreVive.add(rdPadreViveNo);
        
        bgrpMadreVive.add(rdMadreViveSi);
        bgrpMadreVive.add(rdMadreViveNo);
        
        bgrpPadreViveAlu.add(rdPadreViveAluSi);
        bgrpPadreViveAlu.add(rdPadreViveAluNo);
        
        bgrpMadreViveAlu.add(rdMadreViveAluSi);
        bgrpMadreViveAlu.add(rdMadreViveAluNo);
        
        bgrpComida.add(rdComidaSi);
        bgrpComida.add(rdComidaNo);
        
        /*inicio de los rd*/
        rdM.setSelected(true);        
        rdHermanoNo.setSelected(true);
        rdAlergicoMedNo.setSelected(true);
        rdAlergicoAliNo.setSelected(true);
        rdPadreViveNo.setSelected(true);
        rdMadreViveNo.setSelected(true);
        rdComidaSi.setSelected(true);
        
        cargaComboNivel();
        cargaComboPeriodo();
        if(cmbPeriodo.getSelectedIndex() != -1)
        {            
            cargaComboSeccion();
        }
        

        
        //String olakase; 
        switch (condi) 
        {
            case "modificame":
                llenarFichaMatricula(); 
               
                jdcComida.setEnabled(false);
                rdComidaNo.setEnabled(false);
                rdComidaSi.setEnabled(false);
                break;
            case "nuevo":
                codigomatricula();
                fechaActual();
                
                break;
            case "ratificame":
                codigomatricula();
                llenarFichaMatricula();
                
                fechaActual();               
        } 
        
        tbdPane.setEnabledAt(5, false);
        tbdPane.setBackgroundAt(5, Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgrpNivel = new javax.swing.ButtonGroup();
        bgrpSexo = new javax.swing.ButtonGroup();
        bgrpHermano = new javax.swing.ButtonGroup();
        bgrpAlergicoMed = new javax.swing.ButtonGroup();
        bgrpAlergicoAli = new javax.swing.ButtonGroup();
        bgrpPadreVive = new javax.swing.ButtonGroup();
        bgrpMadreVive = new javax.swing.ButtonGroup();
        bgrpPadreViveAlu = new javax.swing.ButtonGroup();
        bgrpMadreViveAlu = new javax.swing.ButtonGroup();
        bgrpComida = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        tbdPane = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblCodigo = new javax.swing.JLabel();
        lblFoto = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        txtFechaMat = new com.toedter.calendar.JDateChooser();
        lblFechaMat = new javax.swing.JLabel();
        cmbE = new javax.swing.JComboBox();
        cmbS = new javax.swing.JComboBox();
        lblNivel = new javax.swing.JLabel();
        lblHorario = new javax.swing.JLabel();
        lblA = new javax.swing.JLabel();
        jdcInicioClases = new com.toedter.calendar.JDateChooser();
        cmbSeccion = new javax.swing.JComboBox();
        lblSeccion = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cmbPeriodo = new javax.swing.JComboBox();
        cmbNivel = new javax.swing.JComboBox();
        lblPrecio = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel8 = new javax.swing.JPanel();
        rdComidaSi = new javax.swing.JRadioButton();
        rdComidaNo = new javax.swing.JRadioButton();
        jdcComida = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblNombre = new javax.swing.JLabel();
        lblApeP = new javax.swing.JLabel();
        lblFechaNac = new javax.swing.JLabel();
        lblDni = new javax.swing.JLabel();
        lblHermano = new javax.swing.JLabel();
        lblLugarOcupa = new javax.swing.JLabel();
        txtLugarOcupa = new javax.swing.JTextField();
        rdHermanoNo = new javax.swing.JRadioButton();
        rdHermanoSi = new javax.swing.JRadioButton();
        txtDni = new javax.swing.JTextField();
        txtFechaNac = new com.toedter.calendar.JDateChooser();
        txtApeP = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        lblSexo = new javax.swing.JLabel();
        rdM = new javax.swing.JRadioButton();
        rdF = new javax.swing.JRadioButton();
        txtApeM = new javax.swing.JTextField();
        lblApeM = new javax.swing.JLabel();
        lblDomicilio = new javax.swing.JLabel();
        lblHermanoEdad = new javax.swing.JLabel();
        txtHermanoEdad = new javax.swing.JTextField();
        txtReligion = new javax.swing.JTextField();
        lblReligion = new javax.swing.JLabel();
        lblAluTel = new javax.swing.JLabel();
        txtAluTel = new javax.swing.JTextField();
        txtEdad = new javax.swing.JFormattedTextField();
        lblEdad1 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        txtTalla = new javax.swing.JTextField();
        jdcControl = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDomicilio = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        rdMadreViveAluNo = new javax.swing.JRadioButton();
        rdMadreViveAluSi = new javax.swing.JRadioButton();
        rdPadreViveAluNo = new javax.swing.JRadioButton();
        rdPadreViveAluSi = new javax.swing.JRadioButton();
        lblApodViveAlu = new javax.swing.JLabel();
        lblApodTelCel = new javax.swing.JLabel();
        txtPadreTelCel1 = new javax.swing.JTextField();
        txtPadreTelCel2 = new javax.swing.JTextField();
        txtMadreTelCel1 = new javax.swing.JTextField();
        txtMadreTelCel2 = new javax.swing.JTextField();
        txtMadreEmail = new javax.swing.JTextField();
        txtPadreEmail = new javax.swing.JTextField();
        lblApodEmail = new javax.swing.JLabel();
        lblApodCentroLab = new javax.swing.JLabel();
        txtPadreCentroLab = new javax.swing.JTextField();
        txtMadreCentroLab = new javax.swing.JTextField();
        lblApodDniEstadoCiv = new javax.swing.JLabel();
        txtPadreDni = new javax.swing.JTextField();
        txtMadreDni = new javax.swing.JTextField();
        txtMadreGradoI = new javax.swing.JTextField();
        txtPadreGradoI = new javax.swing.JTextField();
        lblApodGradoI = new javax.swing.JLabel();
        lblApodFecNac = new javax.swing.JLabel();
        txtPadreFecNac = new com.toedter.calendar.JDateChooser();
        txtMadreFecNac = new com.toedter.calendar.JDateChooser();
        rdMadreViveNo = new javax.swing.JRadioButton();
        rdMadreViveSi = new javax.swing.JRadioButton();
        rdPadreViveNo = new javax.swing.JRadioButton();
        rdPadreViveSi = new javax.swing.JRadioButton();
        lblApodVive = new javax.swing.JLabel();
        lblApodNombre = new javax.swing.JLabel();
        txtPadreNombre = new javax.swing.JTextField();
        txtMadreNombre = new javax.swing.JTextField();
        txtMadreApeM = new javax.swing.JTextField();
        txtPadreApeM = new javax.swing.JTextField();
        lblApodApeM = new javax.swing.JLabel();
        lblApodApeP = new javax.swing.JLabel();
        txtPadreApeP = new javax.swing.JTextField();
        txtMadreApeP = new javax.swing.JTextField();
        lblMadre = new javax.swing.JLabel();
        lblPadre = new javax.swing.JLabel();
        txtPadreEstadoCiv = new javax.swing.JComboBox<>();
        lblApodApeP1 = new javax.swing.JLabel();
        lblApodApeM1 = new javax.swing.JLabel();
        lblApodNombre1 = new javax.swing.JLabel();
        lblApodVive1 = new javax.swing.JLabel();
        lblApodFecNac1 = new javax.swing.JLabel();
        lblApodGradoI1 = new javax.swing.JLabel();
        lblApodDniEstadoCiv1 = new javax.swing.JLabel();
        lblApodCentroLab1 = new javax.swing.JLabel();
        lblApodEmail1 = new javax.swing.JLabel();
        lblApodTelCel1 = new javax.swing.JLabel();
        lblApodViveAlu1 = new javax.swing.JLabel();
        txtMadreEstadoCiv = new javax.swing.JComboBox<>();
        jPanel5 = new javax.swing.JPanel();
        panAutorizacion = new javax.swing.JPanel();
        lblAutNomb = new javax.swing.JLabel();
        txtAutNomb = new javax.swing.JTextField();
        lblAutParentesco = new javax.swing.JLabel();
        txtAutParentesco = new javax.swing.JTextField();
        lblAutDni = new javax.swing.JLabel();
        txtAutDni = new javax.swing.JTextField();
        lblAutTelefono = new javax.swing.JLabel();
        txtAutTelefono = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        txtEmergencia = new javax.swing.JTextField();
        lblEmergencia = new javax.swing.JLabel();
        lblTelEmer = new javax.swing.JLabel();
        txtTelEmer = new javax.swing.JTextField();
        lblEmerParentesco = new javax.swing.JLabel();
        txtEmerParentesco = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        lblAlergicoNo = new javax.swing.JLabel();
        lblAlergicoSi = new javax.swing.JLabel();
        lblAlergico = new javax.swing.JLabel();
        lblMedicamento = new javax.swing.JLabel();
        lblAlimento = new javax.swing.JLabel();
        rdAlergicoAliSi = new javax.swing.JRadioButton();
        rdAlergicoAliNo = new javax.swing.JRadioButton();
        rdAlergicoMedNo = new javax.swing.JRadioButton();
        rdAlergicoMedSi = new javax.swing.JRadioButton();
        txtMedicamento = new javax.swing.JTextField();
        txtAlimento = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        chkPartida = new javax.swing.JCheckBox();
        txtDescuento = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMotivo = new javax.swing.JTextArea();
        pnlEscondido = new javax.swing.JPanel();
        txtOtro = new javax.swing.JTextField();
        chkOtro = new javax.swing.JCheckBox();
        chkPaperas = new javax.swing.JCheckBox();
        chkHepatitis = new javax.swing.JCheckBox();
        chkRubeola = new javax.swing.JCheckBox();
        chkSarampion = new javax.swing.JCheckBox();
        chkVaricela = new javax.swing.JCheckBox();
        lblEnfermedad = new javax.swing.JLabel();
        panAdjunto = new javax.swing.JPanel();
        chkDniPapa = new javax.swing.JCheckBox();
        chkDniMama = new javax.swing.JCheckBox();
        chkBanda = new javax.swing.JCheckBox();
        chkVacunacion = new javax.swing.JCheckBox();
        txtInstrumento = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        lblLugarNac = new javax.swing.JLabel();
        txtLugarNac = new javax.swing.JTextField();
        txtPadreOcu = new javax.swing.JTextField();
        txtMadreOcu = new javax.swing.JTextField();
        lblFicha = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();

        setTitle("FichaMatricula");
        setAutoscrolls(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1026, 575));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbdPane.setBackground(new java.awt.Color(255, 255, 255));
        tbdPane.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Droid Sans", 1, 14)); // NOI18N
        jLabel3.setText("Codigo Matricula:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 130, -1));

        lblCodigo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblCodigo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel2.add(lblCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 60, 100, 20));

        lblFoto.setBackground(new java.awt.Color(255, 255, 255));
        lblFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblFoto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblFoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblFotoMouseClicked(evt);
            }
        });
        jPanel2.add(lblFoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 140, 170));

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos Generales"));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtFechaMat.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel6.add(txtFechaMat, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 150, -1));

        lblFechaMat.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblFechaMat.setText("Fecha de inscripción:");
        jPanel6.add(lblFechaMat, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 20));

        cmbE.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbE.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00" }));
        cmbE.setSelectedItem("8:00");
        cmbE.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbEItemStateChanged(evt);
            }
        });
        jPanel6.add(cmbE, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 110, -1, -1));

        cmbS.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "7:00", "8:00", "9:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00" }));
        cmbS.setSelectedItem("14:00");
        cmbS.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSItemStateChanged(evt);
            }
        });
        jPanel6.add(cmbS, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 60, -1));

        lblNivel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblNivel.setText("Nivel:");
        jPanel6.add(lblNivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, 20));

        lblHorario.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblHorario.setText("Horario de clases:");
        jPanel6.add(lblHorario, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 20));

        lblA.setText("a");
        jPanel6.add(lblA, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, 20));

        jdcInicioClases.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel6.add(jdcInicioClases, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, 150, -1));

        cmbSeccion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbSeccion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ositos", "Loquitos", "Koalas", "Otorongos", "Avestruces", "Dragones de Komodo" }));
        jPanel6.add(cmbSeccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 220, -1));

        lblSeccion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblSeccion.setText("Aula:");
        jPanel6.add(lblSeccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, 20));

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel4.setText("Inicio de clases:");
        jPanel6.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, 20));

        jLabel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel1.setText("Periodo:");
        jPanel6.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, 20));

        cmbPeriodo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbPeriodo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbPeriodo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPeriodoItemStateChanged(evt);
            }
        });
        jPanel6.add(cmbPeriodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 230, 220, -1));

        cmbNivel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        cmbNivel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbNivel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbNivelItemStateChanged(evt);
            }
        });
        jPanel6.add(cmbNivel, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 190, 220, -1));

        lblPrecio.setForeground(new java.awt.Color(0, 0, 255));
        lblPrecio.setDisabledTextColor(new java.awt.Color(0, 51, 255));
        lblPrecio.setEnabled(false);
        jPanel6.add(lblPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 70, -1));

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));
        jPanel6.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 320, 10));

        jPanel2.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 390, 320));

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rdComidaSi.setBackground(new java.awt.Color(255, 255, 255));
        rdComidaSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdComidaSi.setText("SI");
        rdComidaSi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdComidaSiItemStateChanged(evt);
            }
        });
        jPanel8.add(rdComidaSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, 50, 30));

        rdComidaNo.setBackground(new java.awt.Color(255, 255, 255));
        rdComidaNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdComidaNo.setText("NO");
        rdComidaNo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdComidaNoItemStateChanged(evt);
            }
        });
        jPanel8.add(rdComidaNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 60, 30));

        jdcComida.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel8.add(jdcComida, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 120, -1));

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel2.setText("Servicio Alimentacion:");
        jPanel8.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 110, 30));

        jLabel12.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel12.setText("A partir del:");
        jPanel8.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 60, 20));

        jPanel2.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 270, 300, 90));

        tbdPane.addTab("Datos Generales", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblNombre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblNombre.setText("Nombres:");
        jPanel3.add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, 20));

        lblApeP.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApeP.setText("Apellido paterno:");
        jPanel3.add(lblApeP, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, 20));

        lblFechaNac.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblFechaNac.setText("Fecha de nacimiento:");
        jPanel3.add(lblFechaNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, 20));

        lblDni.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblDni.setText("DNI:");
        jPanel3.add(lblDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, -1, 20));

        lblHermano.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblHermano.setText("¿Tiene hermanos?:");
        jPanel3.add(lblHermano, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, 20));

        lblLugarOcupa.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblLugarOcupa.setText("Lugar que ocupa:");
        jPanel3.add(lblLugarOcupa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, 91, 20));

        txtLugarOcupa.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtLugarOcupa.setEnabled(false);
        jPanel3.add(txtLugarOcupa, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 310, 160, -1));

        rdHermanoNo.setBackground(new java.awt.Color(255, 255, 255));
        rdHermanoNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdHermanoNo.setText("NO");
        rdHermanoNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdHermanoNoStateChanged(evt);
            }
        });
        jPanel3.add(rdHermanoNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, -1, 20));

        rdHermanoSi.setBackground(new java.awt.Color(255, 255, 255));
        rdHermanoSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdHermanoSi.setText("SI");
        rdHermanoSi.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdHermanoSiStateChanged(evt);
            }
        });
        jPanel3.add(rdHermanoSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, -1, 20));

        txtDni.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtDni.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDniFocusGained(evt);
            }
        });
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDniKeyTyped(evt);
            }
        });
        jPanel3.add(txtDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 190, 160, -1));

        txtFechaNac.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel3.add(txtFechaNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 230, -1));

        txtApeP.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtApeP.setNextFocusableComponent(txtApeM);
        txtApeP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtApePFocusLost(evt);
            }
        });
        jPanel3.add(txtApeP, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 230, -1));

        txtNombre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreFocusLost(evt);
            }
        });
        jPanel3.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 230, -1));

        lblSexo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblSexo.setText("Sexo:");
        jPanel3.add(lblSexo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, 20));

        rdM.setBackground(new java.awt.Color(255, 255, 255));
        rdM.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdM.setText("M");
        jPanel3.add(rdM, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, -1, -1));

        rdF.setBackground(new java.awt.Color(255, 255, 255));
        rdF.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdF.setText("F");
        jPanel3.add(rdF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, -1, -1));

        txtApeM.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtApeM.setNextFocusableComponent(txtNombre);
        txtApeM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtApeMFocusLost(evt);
            }
        });
        jPanel3.add(txtApeM, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 230, -1));

        lblApeM.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApeM.setText("Apellido materno:");
        jPanel3.add(lblApeM, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        lblDomicilio.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblDomicilio.setText("Domicilio:");
        jPanel3.add(lblDomicilio, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 100, -1, 20));

        lblHermanoEdad.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblHermanoEdad.setText("Edades:");
        jPanel3.add(lblHermanoEdad, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, 20));

        txtHermanoEdad.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtHermanoEdad.setEnabled(false);
        jPanel3.add(txtHermanoEdad, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 160, -1));

        txtReligion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtReligion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtReligionFocusLost(evt);
            }
        });
        jPanel3.add(txtReligion, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 40, 170, -1));

        lblReligion.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblReligion.setText("Religión:");
        jPanel3.add(lblReligion, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, -1, 20));

        lblAluTel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAluTel.setText("Telefono principal:");
        jPanel3.add(lblAluTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, -1, 20));

        txtAluTel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel3.add(txtAluTel, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 70, 170, -1));

        txtEdad.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#00"))));
        txtEdad.setEnabled(false);
        txtEdad.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel3.add(txtEdad, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, 160, 20));

        lblEdad1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblEdad1.setText("Edad:");
        jPanel3.add(lblEdad1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, 20));

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Ultimo Control"));
        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel5.setText("Peso:");
        jPanel10.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, 20));

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel6.setText("Talla:");
        jPanel10.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, 20));

        txtPeso.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel10.add(txtPeso, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 50, -1));

        txtTalla.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel10.add(txtTalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 50, -1));

        jdcControl.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel10.add(jdcControl, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 160, -1));

        jLabel7.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel7.setText("Fecha:");
        jPanel10.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, 20));

        jPanel3.add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 230, 310, 120));

        txtDomicilio.setColumns(20);
        txtDomicilio.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtDomicilio.setLineWrap(true);
        txtDomicilio.setRows(5);
        txtDomicilio.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtDomicilio);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 240, 110));

        tbdPane.addTab("Datos del Alumno", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        rdMadreViveAluNo.setBackground(new java.awt.Color(255, 255, 255));
        rdMadreViveAluNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdMadreViveAluNo.setText("NO");
        rdMadreViveAluNo.setEnabled(false);
        jPanel4.add(rdMadreViveAluNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 340, -1, -1));

        rdMadreViveAluSi.setBackground(new java.awt.Color(255, 255, 255));
        rdMadreViveAluSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdMadreViveAluSi.setSelected(true);
        rdMadreViveAluSi.setText("SI");
        rdMadreViveAluSi.setEnabled(false);
        jPanel4.add(rdMadreViveAluSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 340, -1, -1));

        rdPadreViveAluNo.setBackground(new java.awt.Color(255, 255, 255));
        rdPadreViveAluNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdPadreViveAluNo.setText("NO");
        rdPadreViveAluNo.setEnabled(false);
        jPanel4.add(rdPadreViveAluNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 340, -1, -1));

        rdPadreViveAluSi.setBackground(new java.awt.Color(255, 255, 255));
        rdPadreViveAluSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdPadreViveAluSi.setSelected(true);
        rdPadreViveAluSi.setText("SI");
        rdPadreViveAluSi.setEnabled(false);
        jPanel4.add(rdPadreViveAluSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 340, -1, -1));

        lblApodViveAlu.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodViveAlu.setText("Vive con alumno(a):");
        jPanel4.add(lblApodViveAlu, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 340, -1, 20));

        lblApodTelCel.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodTelCel.setText("Teléfono / Celular:");
        jPanel4.add(lblApodTelCel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 310, -1, 20));

        txtPadreTelCel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreTelCel1.setEnabled(false);
        jPanel4.add(txtPadreTelCel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 310, 90, -1));

        txtPadreTelCel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreTelCel2.setEnabled(false);
        jPanel4.add(txtPadreTelCel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 310, 90, -1));

        txtMadreTelCel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreTelCel1.setEnabled(false);
        jPanel4.add(txtMadreTelCel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 310, 90, -1));

        txtMadreTelCel2.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreTelCel2.setEnabled(false);
        jPanel4.add(txtMadreTelCel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 310, 80, -1));

        txtMadreEmail.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreEmail.setEnabled(false);
        txtMadreEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreEmailFocusLost(evt);
            }
        });
        jPanel4.add(txtMadreEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 180, -1));

        txtPadreEmail.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreEmail.setEnabled(false);
        txtPadreEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreEmailFocusLost(evt);
            }
        });
        jPanel4.add(txtPadreEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 280, 190, -1));

        lblApodEmail.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodEmail.setText("E-mail:");
        jPanel4.add(lblApodEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, -1, 20));

        lblApodCentroLab.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodCentroLab.setText("Centro laboral:");
        jPanel4.add(lblApodCentroLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, 20));

        txtPadreCentroLab.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreCentroLab.setEnabled(false);
        txtPadreCentroLab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreCentroLabFocusLost(evt);
            }
        });
        jPanel4.add(txtPadreCentroLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 190, -1));

        txtMadreCentroLab.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreCentroLab.setEnabled(false);
        txtMadreCentroLab.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreCentroLabFocusLost(evt);
            }
        });
        jPanel4.add(txtMadreCentroLab, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 250, 180, -1));

        lblApodDniEstadoCiv.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodDniEstadoCiv.setText("DNI / Estado civil:");
        jPanel4.add(lblApodDniEstadoCiv, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, -1, 20));

        txtPadreDni.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPadreDniKeyTyped(evt);
            }
        });
        jPanel4.add(txtPadreDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 80, -1));

        txtMadreDni.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMadreDniKeyTyped(evt);
            }
        });
        jPanel4.add(txtMadreDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 220, 80, -1));

        txtMadreGradoI.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreGradoI.setEnabled(false);
        txtMadreGradoI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreGradoIFocusLost(evt);
            }
        });
        jPanel4.add(txtMadreGradoI, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 190, 180, -1));

        txtPadreGradoI.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreGradoI.setEnabled(false);
        txtPadreGradoI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreGradoIFocusLost(evt);
            }
        });
        jPanel4.add(txtPadreGradoI, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 190, 190, -1));

        lblApodGradoI.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodGradoI.setText("Grado de instrucción:");
        jPanel4.add(lblApodGradoI, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 190, -1, 20));

        lblApodFecNac.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodFecNac.setText("Fecha de nacimiento:");
        jPanel4.add(lblApodFecNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, 20));
        jPanel4.add(txtPadreFecNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 160, 190, -1));
        jPanel4.add(txtMadreFecNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 160, 180, -1));

        rdMadreViveNo.setBackground(new java.awt.Color(255, 255, 255));
        rdMadreViveNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdMadreViveNo.setText("NO");
        rdMadreViveNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdMadreViveNoStateChanged(evt);
            }
        });
        jPanel4.add(rdMadreViveNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 130, -1, 30));

        rdMadreViveSi.setBackground(new java.awt.Color(255, 255, 255));
        rdMadreViveSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdMadreViveSi.setText("SI");
        rdMadreViveSi.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdMadreViveSiStateChanged(evt);
            }
        });
        jPanel4.add(rdMadreViveSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 130, -1, 30));

        rdPadreViveNo.setBackground(new java.awt.Color(255, 255, 255));
        rdPadreViveNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdPadreViveNo.setText("NO");
        rdPadreViveNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdPadreViveNoStateChanged(evt);
            }
        });
        jPanel4.add(rdPadreViveNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, -1, 30));

        rdPadreViveSi.setBackground(new java.awt.Color(255, 255, 255));
        rdPadreViveSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdPadreViveSi.setText("SI");
        rdPadreViveSi.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdPadreViveSiStateChanged(evt);
            }
        });
        jPanel4.add(rdPadreViveSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 130, -1, 30));

        lblApodVive.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodVive.setText("Vive:");
        jPanel4.add(lblApodVive, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        lblApodNombre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodNombre.setText("Nombres:");
        jPanel4.add(lblApodNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, -1, 20));

        txtPadreNombre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreNombreFocusLost(evt);
            }
        });
        jPanel4.add(txtPadreNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, 190, -1));

        txtMadreNombre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreNombre.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreNombreFocusLost(evt);
            }
        });
        jPanel4.add(txtMadreNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 110, 180, -1));

        txtMadreApeM.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreApeM.setNextFocusableComponent(txtMadreNombre);
        txtMadreApeM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreApeMFocusLost(evt);
            }
        });
        jPanel4.add(txtMadreApeM, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 180, -1));

        txtPadreApeM.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreApeM.setNextFocusableComponent(txtPadreNombre);
        txtPadreApeM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreApeMFocusLost(evt);
            }
        });
        jPanel4.add(txtPadreApeM, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 190, -1));

        lblApodApeM.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodApeM.setText("Apellido materno:");
        jPanel4.add(lblApodApeM, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, -1, 20));

        lblApodApeP.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodApeP.setText("Apellido paterno:");
        jPanel4.add(lblApodApeP, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, -1, 20));

        txtPadreApeP.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreApeP.setNextFocusableComponent(txtPadreApeM);
        txtPadreApeP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreApePFocusLost(evt);
            }
        });
        jPanel4.add(txtPadreApeP, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 190, -1));

        txtMadreApeP.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreApeP.setNextFocusableComponent(txtMadreApeM);
        txtMadreApeP.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreApePFocusLost(evt);
            }
        });
        jPanel4.add(txtMadreApeP, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 50, 180, -1));

        lblMadre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblMadre.setText("MADRE");
        jPanel4.add(lblMadre, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, -1, -1));

        lblPadre.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblPadre.setText("PADRE");
        jPanel4.add(lblPadre, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 30, -1, -1));

        txtPadreEstadoCiv.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtPadreEstadoCiv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Casado(a)", "Conviviente", "Separado(a)", "Divorciado(a)", "Viudo(a)" }));
        jPanel4.add(txtPadreEstadoCiv, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 220, 90, -1));

        lblApodApeP1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodApeP1.setText("Apellido paterno:");
        jPanel4.add(lblApodApeP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 50, -1, 20));

        lblApodApeM1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodApeM1.setText("Apellido materno:");
        jPanel4.add(lblApodApeM1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 80, -1, 20));

        lblApodNombre1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodNombre1.setText("Nombres:");
        jPanel4.add(lblApodNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 110, -1, 20));

        lblApodVive1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodVive1.setText("Vive:");
        jPanel4.add(lblApodVive1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, -1, -1));

        lblApodFecNac1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodFecNac1.setText("Fecha de nacimiento:");
        jPanel4.add(lblApodFecNac1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 160, -1, 20));

        lblApodGradoI1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodGradoI1.setText("Grado de instrucción:");
        jPanel4.add(lblApodGradoI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 190, -1, 20));

        lblApodDniEstadoCiv1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodDniEstadoCiv1.setText("DNI / Estado civil:");
        jPanel4.add(lblApodDniEstadoCiv1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 220, -1, 20));

        lblApodCentroLab1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodCentroLab1.setText("Centro laboral:");
        jPanel4.add(lblApodCentroLab1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 250, -1, 20));

        lblApodEmail1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodEmail1.setText("E-mail:");
        jPanel4.add(lblApodEmail1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, -1, 20));

        lblApodTelCel1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodTelCel1.setText("Teléfono / Celular:");
        jPanel4.add(lblApodTelCel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 310, -1, 20));

        lblApodViveAlu1.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblApodViveAlu1.setText("Vive con alumno(a):");
        jPanel4.add(lblApodViveAlu1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 340, -1, 20));

        txtMadreEstadoCiv.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMadreEstadoCiv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Casado(a)", "Conviviente", "Separado(a)", "Divorciado(a)", "Viudo(a)" }));
        jPanel4.add(txtMadreEstadoCiv, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 220, 90, -1));

        tbdPane.addTab("Datos de los Padres o Apoderados", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panAutorizacion.setBackground(new java.awt.Color(255, 255, 255));
        panAutorizacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Autorización para recoger alumno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        panAutorizacion.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblAutNomb.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAutNomb.setText("Se autoriza a:");
        panAutorizacion.add(lblAutNomb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, 20));

        txtAutNomb.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtAutNomb.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAutNombFocusLost(evt);
            }
        });
        panAutorizacion.add(txtAutNomb, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 260, -1));

        lblAutParentesco.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAutParentesco.setText("Parentesco:");
        panAutorizacion.add(lblAutParentesco, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, 20));

        txtAutParentesco.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtAutParentesco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAutParentescoFocusLost(evt);
            }
        });
        panAutorizacion.add(txtAutParentesco, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 190, -1));

        lblAutDni.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAutDni.setText("DNI:");
        panAutorizacion.add(lblAutDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, 20));

        txtAutDni.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        panAutorizacion.add(txtAutDni, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 190, -1));

        lblAutTelefono.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAutTelefono.setText("Teléfono:");
        panAutorizacion.add(lblAutTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        txtAutTelefono.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtAutTelefono.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAutTelefonoFocusLost(evt);
            }
        });
        panAutorizacion.add(txtAutTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 190, -1));

        jPanel5.add(panAutorizacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, 300, 310));

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtEmergencia.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtEmergencia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmergenciaFocusLost(evt);
            }
        });
        jPanel7.add(txtEmergencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 310, -1));

        lblEmergencia.setFont(new java.awt.Font("Droid Sans", 1, 11)); // NOI18N
        lblEmergencia.setText("*En caso de emergencia avisar a:");
        jPanel7.add(lblEmergencia, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        lblTelEmer.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblTelEmer.setText("Teléfono:");
        jPanel7.add(lblTelEmer, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, -1));

        txtTelEmer.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jPanel7.add(txtTelEmer, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 240, -1));

        lblEmerParentesco.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblEmerParentesco.setText("Parentesco:");
        jPanel7.add(lblEmerParentesco, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, -1));

        txtEmerParentesco.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtEmerParentesco.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmerParentescoFocusLost(evt);
            }
        });
        jPanel7.add(txtEmerParentesco, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 240, -1));

        jLabel43.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel43.setText("¿Cuál?");
        jPanel7.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 180, 40, -1));

        lblAlergicoNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAlergicoNo.setText("  NO");
        jPanel7.add(lblAlergicoNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 180, -1, -1));

        lblAlergicoSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAlergicoSi.setText("  SI");
        jPanel7.add(lblAlergicoSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, -1, -1));

        lblAlergico.setFont(new java.awt.Font("Droid Sans", 1, 11)); // NOI18N
        lblAlergico.setText("*¿Es alérgico?:");
        jPanel7.add(lblAlergico, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, -1, -1));

        lblMedicamento.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblMedicamento.setText("Medicamento:");
        jPanel7.add(lblMedicamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, -1, 20));

        lblAlimento.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        lblAlimento.setText("Alimento:");
        jPanel7.add(lblAlimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, -1, 20));

        rdAlergicoAliSi.setBackground(new java.awt.Color(255, 255, 255));
        rdAlergicoAliSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdAlergicoAliSi.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdAlergicoAliSiStateChanged(evt);
            }
        });
        jPanel7.add(rdAlergicoAliSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 250, -1, 20));

        rdAlergicoAliNo.setBackground(new java.awt.Color(255, 255, 255));
        rdAlergicoAliNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdAlergicoAliNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdAlergicoAliNoStateChanged(evt);
            }
        });
        jPanel7.add(rdAlergicoAliNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 250, -1, 20));

        rdAlergicoMedNo.setBackground(new java.awt.Color(255, 255, 255));
        rdAlergicoMedNo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdAlergicoMedNo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdAlergicoMedNoStateChanged(evt);
            }
        });
        jPanel7.add(rdAlergicoMedNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 210, -1, 20));

        rdAlergicoMedSi.setBackground(new java.awt.Color(255, 255, 255));
        rdAlergicoMedSi.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        rdAlergicoMedSi.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdAlergicoMedSiStateChanged(evt);
            }
        });
        jPanel7.add(rdAlergicoMedSi, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 210, -1, 20));

        txtMedicamento.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMedicamento.setEnabled(false);
        txtMedicamento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMedicamentoFocusLost(evt);
            }
        });
        jPanel7.add(txtMedicamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 170, -1));

        txtAlimento.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtAlimento.setEnabled(false);
        txtAlimento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAlimentoFocusLost(evt);
            }
        });
        jPanel7.add(txtAlimento, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 250, 170, -1));

        jPanel5.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, 380, 310));

        tbdPane.addTab("Datos Clínicos y Autorización", jPanel5);

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel12.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chkPartida.setBackground(new java.awt.Color(255, 255, 255));
        chkPartida.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkPartidaItemStateChanged(evt);
            }
        });
        jPanel12.add(chkPartida, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 50, -1, -1));

        txtDescuento.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtDescuento.setEnabled(false);
        txtDescuento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDescuentoFocusLost(evt);
            }
        });
        txtDescuento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDescuentoKeyTyped(evt);
            }
        });
        jPanel12.add(txtDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 90, 110, -1));

        jLabel9.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel9.setText("¿El alumno goza de algún descuento?");
        jPanel12.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, 20));

        jLabel10.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel10.setText("Monto del descuento:");
        jPanel12.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, 20));

        jLabel11.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        jLabel11.setText("Motivo del descuento:");
        jPanel12.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        txtMotivo.setColumns(20);
        txtMotivo.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        txtMotivo.setLineWrap(true);
        txtMotivo.setRows(5);
        txtMotivo.setWrapStyleWord(true);
        txtMotivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMotivoKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtMotivo);

        jPanel12.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 290, 110));

        jPanel11.add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 60, 500, 270));

        tbdPane.addTab("Descuentos", jPanel11);

        pnlEscondido.setBackground(new java.awt.Color(255, 255, 255));
        pnlEscondido.setEnabled(false);
        pnlEscondido.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtOtro.setEnabled(false);
        txtOtro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtOtroFocusLost(evt);
            }
        });
        pnlEscondido.add(txtOtro, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, 300, -1));

        chkOtro.setBackground(new java.awt.Color(255, 255, 255));
        chkOtro.setText("Otros");
        chkOtro.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkOtroStateChanged(evt);
            }
        });
        pnlEscondido.add(chkOtro, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 270, -1, -1));

        chkPaperas.setBackground(new java.awt.Color(255, 255, 255));
        chkPaperas.setText("Paperas");
        pnlEscondido.add(chkPaperas, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 270, -1, -1));

        chkHepatitis.setBackground(new java.awt.Color(255, 255, 255));
        chkHepatitis.setText("Hepatitis");
        pnlEscondido.add(chkHepatitis, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 270, -1, -1));

        chkRubeola.setBackground(new java.awt.Color(255, 255, 255));
        chkRubeola.setText("Rubeola");
        pnlEscondido.add(chkRubeola, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 240, -1, -1));

        chkSarampion.setBackground(new java.awt.Color(255, 255, 255));
        chkSarampion.setText("Sarampión");
        pnlEscondido.add(chkSarampion, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 240, -1, -1));

        chkVaricela.setBackground(new java.awt.Color(255, 255, 255));
        chkVaricela.setText("Varicela");
        pnlEscondido.add(chkVaricela, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 240, -1, -1));

        lblEnfermedad.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblEnfermedad.setText("*¿Ha padecido una de estas enfermedades?:");
        pnlEscondido.add(lblEnfermedad, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 220, -1, -1));

        panAdjunto.setBackground(new java.awt.Color(255, 255, 255));
        panAdjunto.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extras", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        panAdjunto.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        chkDniPapa.setBackground(new java.awt.Color(255, 255, 255));
        chkDniPapa.setText("DNI del papá");
        panAdjunto.add(chkDniPapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        chkDniMama.setBackground(new java.awt.Color(255, 255, 255));
        chkDniMama.setText("Asiste los sábados");
        panAdjunto.add(chkDniMama, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        chkBanda.setBackground(new java.awt.Color(255, 255, 255));
        chkBanda.setText("Pertenece a la banda");
        chkBanda.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkBandaStateChanged(evt);
            }
        });
        panAdjunto.add(chkBanda, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, -1, -1));

        chkVacunacion.setBackground(new java.awt.Color(255, 255, 255));
        chkVacunacion.setText("Hermano en el Jardín");
        panAdjunto.add(chkVacunacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, -1, -1));

        txtInstrumento.setEnabled(false);
        txtInstrumento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtInstrumentoFocusLost(evt);
            }
        });
        panAdjunto.add(txtInstrumento, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 170, -1));

        jLabel8.setText("¿Que instrumento toca?");
        panAdjunto.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, 20));

        pnlEscondido.add(panAdjunto, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 200, 230));

        lblLugarNac.setText("Lugar de nacimiento:");
        pnlEscondido.add(lblLugarNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 180, -1, 20));

        txtLugarNac.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtLugarNacFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtLugarNacFocusLost(evt);
            }
        });
        pnlEscondido.add(txtLugarNac, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 180, 170, -1));

        txtPadreOcu.setEnabled(false);
        txtPadreOcu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPadreOcuFocusLost(evt);
            }
        });
        pnlEscondido.add(txtPadreOcu, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 50, 170, -1));

        txtMadreOcu.setEnabled(false);
        txtMadreOcu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtMadreOcuFocusLost(evt);
            }
        });
        pnlEscondido.add(txtMadreOcu, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 80, 170, -1));

        tbdPane.addTab("", pnlEscondido);

        jPanel1.add(tbdPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 780, 420));

        lblFicha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckImages/ficha.jpg"))); // NOI18N
        jPanel1.add(lblFicha, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        btnGuardar.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/accept.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 250, 116, -1));

        btnCerrar.setFont(new java.awt.Font("Droid Sans", 0, 11)); // NOI18N
        btnCerrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/PckIconos/green_arrow_up.png"))); // NOI18N
        btnCerrar.setText("Volver");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 330, 116, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1010, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        llamaMatricula();        
        
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void rdPadreViveSiStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdPadreViveSiStateChanged
        if (rdPadreViveSi.isSelected())
        {
            activaCampoPadre(true,true,true,true,true,true,true,true,true);
        }
        
    }//GEN-LAST:event_rdPadreViveSiStateChanged

    private void rdPadreViveNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdPadreViveNoStateChanged
        if (rdPadreViveNo.isSelected())
        {
            activaCampoPadre(false,false,false,false,false,false,false,false,false);
        }
    }//GEN-LAST:event_rdPadreViveNoStateChanged

    private void rdMadreViveSiStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdMadreViveSiStateChanged
        if (rdMadreViveSi.isSelected())
        {
            activaCampoMadre(true,true,true,true,true,true,true,true,true);
        }
    }//GEN-LAST:event_rdMadreViveSiStateChanged

    private void rdMadreViveNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdMadreViveNoStateChanged
        if (rdMadreViveNo.isSelected())
        {
            activaCampoMadre(false,false,false,false,false,false,false,false,false);
        }
    }//GEN-LAST:event_rdMadreViveNoStateChanged

    private void rdAlergicoMedSiStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdAlergicoMedSiStateChanged
        if(rdAlergicoMedSi.isSelected())
        {
            txtMedicamento.setEnabled(true);
        }
    }//GEN-LAST:event_rdAlergicoMedSiStateChanged

    private void rdAlergicoMedNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdAlergicoMedNoStateChanged
        if(rdAlergicoMedNo.isSelected())
        {
            txtMedicamento.setEnabled(false);
        }
    }//GEN-LAST:event_rdAlergicoMedNoStateChanged

    private void rdAlergicoAliSiStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdAlergicoAliSiStateChanged
        if(rdAlergicoAliSi.isSelected())
        {
            txtAlimento.setEnabled(true);
        }
    }//GEN-LAST:event_rdAlergicoAliSiStateChanged

    private void rdAlergicoAliNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdAlergicoAliNoStateChanged
        if(rdAlergicoAliNo.isSelected())
        {
            txtAlimento.setEnabled(false);
        }
    }//GEN-LAST:event_rdAlergicoAliNoStateChanged

    private void chkOtroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkOtroStateChanged
       if(chkOtro.isSelected())
       {
           txtOtro.setEnabled(true);
       }
       else 
           txtOtro.setEnabled(false);
    }//GEN-LAST:event_chkOtroStateChanged

    private void rdHermanoSiStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdHermanoSiStateChanged
       if(rdHermanoSi.isSelected())
       {
           txtHermanoEdad.setEnabled(true);
           txtLugarOcupa.setEnabled(true);
       }
    }//GEN-LAST:event_rdHermanoSiStateChanged

    private void rdHermanoNoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdHermanoNoStateChanged
       if(rdHermanoNo.isSelected())
       {
           txtHermanoEdad.setEnabled(false);
           txtLugarOcupa.setEnabled(false);
       }
    }//GEN-LAST:event_rdHermanoNoStateChanged

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
            
    if(txtFechaNac.getDate()==null )
    {JOptionPane.showMessageDialog(null, "Ingrese una fecha de nacimiento válida");}
    else if(txtMadreDni.getText().equals("") || txtDni.getText().equals("") || jdcInicioClases.getDate()==null)
    {JOptionPane.showMessageDialog(this, "Debe llenar los campos necesarios: \nDni Madre\nDni Alumno\nInicio Clases");}
    else
    {    
        if (condi.equals("modificame"))
        {
            //MANDA A MODIFICAR
            modificaMatricula(); 
        }
        else //NUEVO REGISTRO
        {   
            con = ClsConexion.getConection();
            //Codigos para relacionar tablas
            String codMatricula="";
            String codAlumno="";
            String codEmergencia="";
            String codPadre="";
            String codMadre="";
            String codApoderado="";
            String codClinico="";
            
            /*APODERADO*/
            ClsApoderado apoderados = new ClsApoderado();
            ClsEntidadApoderado apoderado = new ClsEntidadApoderado();
            apoderado.setNombre_Apoderado(txtAutNomb.getText());
            apoderado.setParentesco_Apoderado(txtAutParentesco.getText());
            apoderado.setDni_Apoderado(txtAutDni.getText());
            apoderado.setTelefono_Apoderado(txtAutTelefono.getText());
            apoderados.AgregarApoderado(apoderado);            
            try 
            {
                codApoderado=apoderados.UltimoIdInsertado();
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
            System.out.println("codApoderado: "+codApoderado);
            /*PADRE*/                   
            ClsPadre padres = new ClsPadre();
            ClsEntidadPadre padre = new ClsEntidadPadre();                  
            padre.setApellidoP_Padre(txtPadreApeP.getText());
            padre.setApellidoM_Padre(txtPadreApeM.getText());
            padre.setNombre_Padre(txtPadreNombre.getText());
            try{
            String fechita2 = formatoFecha(txtPadreFecNac.getDate());
            }
            catch(Exception ex)
            {
            k="hola";
            }      
            if(!k.equals("hola") )
            {                
            padre.setFechaN_Padre(formatoFecha(txtPadreFecNac.getDate()));
            } 
            else{
                padre.setFechaN_Padre("");
            }
            
            padre.setVive_Padre(rdPadreViveSi.getText());
            padre.setGradoI_Padre(txtPadreGradoI.getText());
            padre.setDni_Padre(txtPadreDni.getText());
            padre.setEstadoC_Padre(txtPadreEstadoCiv.getSelectedItem().toString());
            padre.setOcupacion_Padre(txtPadreOcu.getText());
            padre.setCentroL_Padre(txtPadreCentroLab.getText());
            padre.setEmail_Padre(txtPadreEmail.getText());
            padre.setTelefono_Padre(txtPadreTelCel1.getText());
            padre.setTelefono2_Padre(txtPadreTelCel2.getText());
            if (rdPadreViveAluSi.isSelected())
            {
                padre.setViveCona_Padre(rdPadreViveAluSi.getText());
            }
            else if(rdPadreViveAluNo.isSelected())
            {
                padre.setViveCona_Padre(rdPadreViveAluNo.getText());
            }

            
            padres.AgregarPadre(padre);
            try 
            {
                codPadre=padres.UltimoIdInsertado();
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
            //System.out.println("Ultimo id: "+codPadre);
            /*MADRE*/
            ClsMadre madres = new ClsMadre();
            ClsEntidadMadre madre = new ClsEntidadMadre();
            madre.setApellidoP_Madre(txtMadreApeP.getText());
            madre.setApellidoM_Madre(txtMadreApeM.getText());
            madre.setNombre_Madre(txtMadreNombre.getText());                
            try{
            String fechita2 = formatoFecha(txtMadreFecNac.getDate());
            System.out.println("fecha 2: "+fechita2);
            }
            catch(Exception ex)
            {k="hola2";}
            if(!k.equals("hola2"))
            {
            madre.setFechaN_Madre(formatoFecha(txtMadreFecNac.getDate()));
            }
            else{
                madre.setFechaN_Madre("");
            }
            
            madre.setVive_Madre(rdMadreViveSi.getText());
            madre.setGradoI_Madre(txtMadreGradoI.getText());
            madre.setDni_Madre(txtMadreDni.getText());
            madre.setEstadoC_Madre(txtMadreEstadoCiv.getSelectedItem().toString());
            madre.setOcupacion_Madre(txtMadreOcu.getText());
            madre.setCentroL_Madre(txtMadreCentroLab.getText());
            madre.setEmail_Madre(txtMadreEmail.getText());
            madre.setTelefono_Madre(txtMadreTelCel1.getText());
            madre.setTelefono2_Madre(txtMadreTelCel2.getText());                    
            if (rdMadreViveAluSi.isSelected())
            {madre.setViveCona_Madre(rdMadreViveAluSi.getText());}
            else if(rdMadreViveAluNo.isSelected())
            {madre.setViveCona_Madre(rdMadreViveAluNo.getText());}
            
            madres.AgregarMadre(madre,con);
            try 
            {
                codMadre=madres.UltimoIdInsertado(con);
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
            //System.out.println("Ultimo id: "+codMadre);
            /*ALUMNO*/
            ClsAlumno alumnos = new ClsAlumno();
            ClsEntidadAlumno alumno = new ClsEntidadAlumno();
            alumno.setNombre_Alumno(txtNombre.getText());
            alumno.setApellidoP_Alumno(txtApeP.getText());
            alumno.setApellidoM_Alumno(txtApeM.getText());
            alumno.setFechaN_Alumno(formatoFecha(txtFechaNac.getDate()));
            alumno.setLugarN_Alumno(txtLugarNac.getText());
            alumno.setDomicilio_Alumno(txtDomicilio.getText());
            alumno.setTelefono_Alumno(txtAluTel.getText());
            alumno.setDni_Alumno(txtDni.getText());
            alumno.setEdadH_Alumno(txtHermanoEdad.getText());
            alumno.setLugarH_Alumno(txtLugarOcupa.getText());
            alumno.setReligion_Alumno(txtReligion.getText());                          
            alumno.setId_Apoderado(codApoderado);
            alumno.setId_Padre(codPadre);
            alumno.setId_Madre(codMadre);
            alumnos.AgregarAlumno(alumno,con);                      
            try 
            {
                codAlumno=alumnos.UltimoIdInsertado(con);
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            /*DATOS CLINICOS*/                    
            ClsClinico clinicos = new ClsClinico();
            ClsEntidadClinico clinico = new ClsEntidadClinico();
            clinico.setMedicamento_Clinico(txtMedicamento.getText());
            clinico.setAlimento_Clinico(txtAlimento.getText());
            if(chkVaricela.isSelected())
            {clinico.setVaricelo_Clinico("SI");}
            else{clinico.setVaricelo_Clinico("NO");}
            if(chkRubeola.isSelected())
            {clinico.setRubeola_Clinico("SI");}
            else{clinico.setRubeola_Clinico("NO");}
            if(chkSarampion.isSelected())
            {clinico.setSarampion_Clinico("SI");}
            else{clinico.setSarampion_Clinico("NO");}
            if(chkHepatitis.isSelected())
            {clinico.setHepatitis_Clinico("SI");}
            {clinico.setHepatitis_Clinico("NO");}
            if(chkPaperas.isSelected())
            {clinico.setPaperas_Clinico("SI");}
            {clinico.setPaperas_Clinico("NO");}
            if(chkOtro.isSelected())
            {clinico.setOtro_Clinico(txtOtro.getText());}
            else
            {clinico.setOtro_Clinico("");}
            clinicos.AgregarClinico(clinico,con);
            try 
            {
                codClinico=clinicos.UltimoIdInsertado(con);
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //EMERGENCIA
            ClsEmergencia emergencias = new ClsEmergencia();
            ClsEntidadEmergencia emergencia = new ClsEntidadEmergencia();
            emergencia.setEmergencia_Emergencia(txtEmergencia.getText());
            emergencia.setTelefono_Emergencia(txtTelEmer.getText());
            emergencia.setParentesco_Emergencia(txtEmerParentesco.getText());
            emergencias.AgregarEmergencia(emergencia);
            try 
            {
                codEmergencia=emergencias.UltimoIdInsertado();
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }

            /*MATRICULA*/
            ClsMatricula matriculas = new ClsMatricula();
            ClsEntidadMatricula matricula = new ClsEntidadMatricula();
            //el codigo se genera al entrar a la ficha (codigoMatricula();)
            matricula.setCod_Matricula(lblCodigo.getText());
            matricula.setFecha_Matricula(formatoFecha(txtFechaMat.getDate()));         
            /*obteniendo fecha del JCalendar en dd/MM/yyyy*/                      
            //inicio clases no puede ser vacio                                
            matricula.setInicio_Clases(formatoFecha(jdcInicioClases.getDate()));
            matricula.setEdadAnio_Matricula(txtEdad.getText());
            if(rdM.isSelected())
            {matricula.setSexo_Alumno("M");}
            else if(rdF.isSelected())
            {matricula.setSexo_Alumno("F");}
            if(rdComidaSi.isSelected())
            {matricula.setComida_Alumno("SI");}
            else if(rdComidaNo.isSelected())
            {matricula.setComida_Alumno("NO");}                    
            matricula.setHorarioe_Matricula(cmbE.getSelectedItem().toString());
            matricula.setHorarios_Matricula(cmbS.getSelectedItem().toString());                      
            if(lblPrecio.getText().equals(""))
            {matricula.setMensualidad_Matricula(0.00);}
            else
            {men = lblPrecio.getText();                      
             matricula.setMensualidad_Matricula(Double.parseDouble(men));
            }
            matricula.setId_Seccion(codigoSeccion.get(cmbSeccion.getSelectedIndex()));

            if(chkPartida.isSelected())
            {
                matricula.setOtro(txtDescuento.getText());
                matricula.setPartida_Nacimiento(txtMotivo.getText());
            }
            else 
            {
                matricula.setOtro("");
                matricula.setPartida_Nacimiento("");
            }
            if(chkDniPapa.isSelected())
            {matricula.setDni_Padre("SI");
            }else matricula.setDni_Padre("NO");
            if(chkDniMama.isSelected())
            {matricula.setDni_Madre("SI");
            }else matricula.setDni_Madre("NO");                      
            matricula.setDni_Menor(txtInstrumento.getText());                     
            if(chkVacunacion.isSelected())
            {matricula.setTarjeta_Vacunacion("SI");
            }else matricula.setTarjeta_Vacunacion("NO");                     
            matricula.setId_Alumno(codAlumno);      
            matricula.setId_Emergencia(codEmergencia);
            matricula.setId_Clinico(codClinico);
            matricula.setRetiro("NO");
            matriculas.AgregarMatricula(matricula,con);
            try 
            {
                codMatricula = matriculas.UltimoIdInsertado(con);
                
            } catch (Exception ex) 
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex);
            }
            
            /*GUARDAR IMAGEN*/           
            // obtengo apellidos y nombres del alumno (sera el nombre de la imagen)
            String nombrecompleto = txtApeP.getText()+" "+ txtApeM.getText()+", "+txtNombre.getText();
            //direccion raíz
            String direccion = System.getProperty("user.dir");           
            //obtengo una imagen a partir del icono del label
            try 
            {
                if(ico != null)
                {
                    Image ima = ico.getImage();
                    //cargo un buffered de la imagen redimensionada 
                    BufferedImage buffered = new BufferedImage(ima.getWidth(null), ima.getHeight(null), BufferedImage.TYPE_4BYTE_ABGR);            
                    Graphics2D g2 = buffered.createGraphics(); //creo un grafico 2d a partir del buffered            
                    g2.drawImage(ima, 0, 0, null); //dibujo            
                    g2.dispose(); //cierro el proceso
                        try 
                        {
                            // guardando, reemplazará al archivo anterior
                            File outputfile = new File(direccion + "/Alumnos/" + nombrecompleto + ".png");
                            //escribo la nuevo imagen, con la extención, y la dirección
                            ImageIO.write(buffered, "png", outputfile);
                        } catch (IOException e) {
                            Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, e);
                        }
                    

                    FrmPrincipal.CodAlumno = codAlumno;

                    if(rdComidaSi.isSelected())
                    {
                        GenerarAlumnoPago(codMatricula,formatoFecha(jdcComida.getDate()));
                    }
                    else
                    {
                        GenerarAlumnoPago(codMatricula,"");
                    }    
                    //modifica codigo matricula
                    //obtengo anio y serie
                    String anioc = matriculas.ObtenerAnioCodigoMatricula(con);
                    String seriec = matriculas.ObtenerSerieCodigoMatricula(con);                      
                    matriculas.ModificaAnioSerieMatricula(anioc, String.valueOf(seriec),con); 
                    
                    JOptionPane.showMessageDialog(null, "Datos guardados correctamente");
                    btnGuardar.setEnabled(false);
                    
                    llamaMatricula();
                }
                else
                {
                    

                    FrmPrincipal.CodAlumno = codAlumno;
                    //Genera mensualiades y demás   
                    if(rdComidaSi.isSelected())
                    {
                        GenerarAlumnoPago(codMatricula,formatoFecha(jdcComida.getDate()));
                    }
                    else
                    {
                        GenerarAlumnoPago(codMatricula,"");
                    }                
                    //modifica codigo matricula
                    //obtengo anio y serie
                    String anioc = matriculas.ObtenerAnioCodigoMatricula(con);
                    String seriec = matriculas.ObtenerSerieCodigoMatricula(con);                      
                    matriculas.ModificaAnioSerieMatricula(anioc, String.valueOf(seriec),con); 
                    
                    JOptionPane.showMessageDialog(null, "Datos guardados correctamente");
                    btnGuardar.setEnabled(false);
                    
                    llamaMatricula();
                }
                
            } catch (HeadlessException e) {
                
                
                FrmPrincipal.CodAlumno = codAlumno;
                //Genera mensualiades y demás   
                if(rdComidaSi.isSelected())
                {
                    GenerarAlumnoPago(codMatricula,formatoFecha(jdcComida.getDate()));
                }
                else
                {
                    GenerarAlumnoPago(codMatricula,"");
                }                
                //modifica codigo matricula
                //obtengo anio y serie
                String anioc = matriculas.ObtenerAnioCodigoMatricula(con);
                String seriec = matriculas.ObtenerSerieCodigoMatricula(con);                      
                matriculas.ModificaAnioSerieMatricula(anioc, String.valueOf(seriec),con); 
                
                JOptionPane.showMessageDialog(null, "Datos guardados correctamente");
                btnGuardar.setEnabled(false);
                llamaMatricula();
               
            }            
       }//cierra nuevo registro      
        ClsConexion.closeConnection(con);
      }//cierra JOptionPane               
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void txtNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreFocusLost
     
     txtNombre.setText(convertirMayu(txtNombre.getText()));
    }//GEN-LAST:event_txtNombreFocusLost

    private void txtApePFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtApePFocusLost
     txtApeP.setText(convertirMayu(txtApeP.getText()));     
        
    }//GEN-LAST:event_txtApePFocusLost

    private void txtApeMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtApeMFocusLost
      txtApeM.setText(convertirMayu(txtApeM.getText()));
    }//GEN-LAST:event_txtApeMFocusLost

    private void txtLugarNacFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLugarNacFocusLost
      txtLugarNac.setText(convertirMayu(txtLugarNac.getText()));
    }//GEN-LAST:event_txtLugarNacFocusLost

    private void txtReligionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtReligionFocusLost
        txtReligion.setText(convertirMayu(txtReligion.getText()));
    }//GEN-LAST:event_txtReligionFocusLost

    private void txtEmergenciaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmergenciaFocusLost
       txtEmergencia.setText(convertirMayu(txtEmergencia.getText()));
    }//GEN-LAST:event_txtEmergenciaFocusLost

    private void txtEmerParentescoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmerParentescoFocusLost
        txtEmerParentesco.setText(convertirMayu(txtEmerParentesco.getText()));
    }//GEN-LAST:event_txtEmerParentescoFocusLost

    private void txtMedicamentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMedicamentoFocusLost
        txtMedicamento.setText(convertirMayu(txtMedicamento.getText()));
    }//GEN-LAST:event_txtMedicamentoFocusLost

    private void txtAlimentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAlimentoFocusLost
        txtAlimento.setText(convertirMayu(txtAlimento.getText()));
    }//GEN-LAST:event_txtAlimentoFocusLost

    private void txtOtroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtOtroFocusLost
       txtOtro.setText(convertirMayu(txtOtro.getText()));
    }//GEN-LAST:event_txtOtroFocusLost

    private void txtAutNombFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAutNombFocusLost
        txtAutNomb.setText(convertirMayu(txtAutNomb.getText()));
    }//GEN-LAST:event_txtAutNombFocusLost

    private void txtAutParentescoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAutParentescoFocusLost
        txtAutParentesco.setText(convertirMayu(txtAutParentesco.getText()));
    }//GEN-LAST:event_txtAutParentescoFocusLost

    private void txtAutTelefonoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAutTelefonoFocusLost
        txtAutTelefono.setText(convertirMayu(txtAutTelefono.getText()));
    }//GEN-LAST:event_txtAutTelefonoFocusLost

    private void txtPadreApePFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreApePFocusLost
        txtPadreApeP.setText(convertirMayu(txtPadreApeP.getText()));
    }//GEN-LAST:event_txtPadreApePFocusLost

    private void txtPadreApeMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreApeMFocusLost
       txtPadreApeM.setText(convertirMayu(txtPadreApeM.getText()));
    }//GEN-LAST:event_txtPadreApeMFocusLost

    private void txtPadreNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreNombreFocusLost
        txtPadreNombre.setText(convertirMayu(txtPadreNombre.getText()));
    }//GEN-LAST:event_txtPadreNombreFocusLost

    private void txtPadreGradoIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreGradoIFocusLost
        txtPadreGradoI.setText(convertirMayu(txtPadreGradoI.getText()));
    }//GEN-LAST:event_txtPadreGradoIFocusLost

    private void txtPadreOcuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreOcuFocusLost
        txtPadreOcu.setText(convertirMayu(txtPadreOcu.getText()));
    }//GEN-LAST:event_txtPadreOcuFocusLost

    private void txtPadreCentroLabFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreCentroLabFocusLost
        txtPadreCentroLab.setText(convertirMayu(txtPadreCentroLab.getText()));
    }//GEN-LAST:event_txtPadreCentroLabFocusLost

    private void txtPadreEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPadreEmailFocusLost
       txtPadreEmail.setText(convertirMayu(txtPadreEmail.getText()));
    }//GEN-LAST:event_txtPadreEmailFocusLost

    private void txtMadreApePFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreApePFocusLost
        txtMadreApeP.setText(convertirMayu(txtMadreApeP.getText()));
    }//GEN-LAST:event_txtMadreApePFocusLost

    private void txtMadreApeMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreApeMFocusLost
        txtMadreApeM.setText(convertirMayu(txtMadreApeM.getText()));
    }//GEN-LAST:event_txtMadreApeMFocusLost

    private void txtMadreNombreFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreNombreFocusLost
        txtMadreNombre.setText(convertirMayu(txtMadreNombre.getText()));
    }//GEN-LAST:event_txtMadreNombreFocusLost

    private void txtMadreGradoIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreGradoIFocusLost
        txtMadreGradoI.setText(convertirMayu(txtMadreGradoI.getText()));
    }//GEN-LAST:event_txtMadreGradoIFocusLost

    private void txtMadreOcuFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreOcuFocusLost
        txtMadreOcu.setText(convertirMayu(txtMadreOcu.getText()));
    }//GEN-LAST:event_txtMadreOcuFocusLost

    private void txtMadreCentroLabFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreCentroLabFocusLost
        txtMadreCentroLab.setText(convertirMayu(txtMadreCentroLab.getText()));
    }//GEN-LAST:event_txtMadreCentroLabFocusLost

    private void txtMadreEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMadreEmailFocusLost
        txtMadreEmail.setText(convertirMayu(txtMadreEmail.getText()));
    }//GEN-LAST:event_txtMadreEmailFocusLost

    private void cmbEItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbEItemStateChanged
        if(cmbE.getSelectedIndex() != -1)
        {            
        
            ClsPeriodo per = new ClsPeriodo();
            String periodo = codigoPeriodo.get(cmbPeriodo.getSelectedIndex());
            String a="",b="",c="";
            try
            {
                ResultSet rsPer = per.SeleccionarPeriodo(periodo);
                while (rsPer.next())
                {
                   a = rsPer.getString("hora_periodo");
                   b = rsPer.getString("horb_periodo");
                   c = rsPer.getString("horc_periodo");
                }
            }catch(Exception ex){
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }                    
            if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("14:00")
               || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("14:00")     )
            {
                lblPrecio.setText(a);
            }
            else if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("17:00")
              || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("17:00")      )
            {
                lblPrecio.setText(b);
            }
            else if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("19:00")
              || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("19:00")      )
            {
                lblPrecio.setText(c);
            }
            else lblPrecio.setText("s/.0.00");                
        }
    }//GEN-LAST:event_cmbEItemStateChanged

    private void cmbSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSItemStateChanged
        if(cmbS.getSelectedIndex() != -1)
        {
            ClsPeriodo per = new ClsPeriodo();
            String periodo = codigoPeriodo.get(cmbPeriodo.getSelectedIndex());
            String a="",b="",c="";
            try
            {
                ResultSet rsPer = per.SeleccionarPeriodo(periodo);
                while (rsPer.next())
                {
                   a = rsPer.getString("hora_periodo");
                   b = rsPer.getString("horb_periodo");
                   c = rsPer.getString("horc_periodo");
                }
            }catch(Exception ex){
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }                    
            if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("14:00")
               || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("14:00")     )
            {
                lblPrecio.setText(a);
            }
            else if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("17:00")
              || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("17:00")      )
            {
                lblPrecio.setText(b);
            }
            else if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("19:00")
              || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("19:00")      )
            {
                lblPrecio.setText(c);
            }
            else lblPrecio.setText("s/.0.00"); 
        }
    }//GEN-LAST:event_cmbSItemStateChanged

    private void lblFotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblFotoMouseClicked
        JFileChooser se = new JFileChooser();
        se.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int estado = se.showOpenDialog(null);
        
        if(estado == JFileChooser.APPROVE_OPTION)
        {
            try 
            {
                //escalando la imagen con el tamaño del label
                imagen = ImageIO.read(se.getSelectedFile()).getScaledInstance(lblFoto.getWidth(), lblFoto.getHeight(), Image.SCALE_DEFAULT);
                ico = new ImageIcon(imagen);                
                lblFoto.setIcon(ico);                
                lblFoto.updateUI();
            }
              catch (FileNotFoundException ex) {Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
              Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_lblFotoMouseClicked

    private void txtDniFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDniFocusGained
       //formato.format(txtPadreFecNac.getDate())
        if(txtFechaNac.getDate() != null)
        {
            String edadAlumno;        
            edadAlumno = calculaEdad(txtFechaNac.getDate());
            txtEdad.setText(edadAlumno);
        }
      
       
    }//GEN-LAST:event_txtDniFocusGained

    private void txtLugarNacFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtLugarNacFocusGained
        if(txtFechaNac.getDate() != null)
        {
            String edadAlumno;        
            edadAlumno = calculaEdad(txtFechaNac.getDate());
            txtEdad.setText(edadAlumno);
        }
    }//GEN-LAST:event_txtLugarNacFocusGained

    private void txtMadreDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMadreDniKeyTyped
        char c = evt.getKeyChar();
        if (txtMadreDni.getText().length()== limite || !(Character.isDigit(c) ||
        (c == KeyEvent.VK_BACK_SPACE) ||
        (c == KeyEvent.VK_DELETE)))
        {
            
        evt.consume();
        }
    }//GEN-LAST:event_txtMadreDniKeyTyped

    private void txtPadreDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPadreDniKeyTyped
       char c = evt.getKeyChar();
        if (txtPadreDni.getText().length()== limite || !(Character.isDigit(c) ||
        (c == KeyEvent.VK_BACK_SPACE) ||
        (c == KeyEvent.VK_DELETE)))
        {
            
        evt.consume();
        }
    }//GEN-LAST:event_txtPadreDniKeyTyped

    private void txtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyTyped
         char c = evt.getKeyChar();
        if (txtDni.getText().length()== limite || !(Character.isDigit(c) ||
        (c == KeyEvent.VK_BACK_SPACE) ||
        (c == KeyEvent.VK_DELETE)))
        {
            
        evt.consume();
        }
    }//GEN-LAST:event_txtDniKeyTyped

    private void chkBandaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkBandaStateChanged
       if(chkBanda.isSelected())
        {
            txtInstrumento.setEnabled(true);
        }
        else if(chkBanda.isSelected()==false) {
            txtInstrumento.setEnabled(false); txtInstrumento.setText("");}
    }//GEN-LAST:event_chkBandaStateChanged

    private void txtInstrumentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtInstrumentoFocusLost
        txtInstrumento.setText(convertirMayu(txtInstrumento.getText()));
    }//GEN-LAST:event_txtInstrumentoFocusLost

    private void cmbPeriodoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPeriodoItemStateChanged
        if(cmbPeriodo.getSelectedIndex() != -1)
        {
            
            System.out.println("Periodo: "+cmbPeriodo.getSelectedItem()+" ID: "+codigoPeriodo.get(cmbPeriodo.getSelectedIndex()));
            cargaComboSeccion();   
        }
        //else if(evt.getStateChange()== ItemEvent.SELECTED)
        //{
        //    cargaComboSeccion();    
        //}
        
    }//GEN-LAST:event_cmbPeriodoItemStateChanged

    private void cmbNivelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbNivelItemStateChanged
       if(cmbNivel.getSelectedIndex() != -1)
       {        
        cargaComboPeriodo(); 
        cargaComboSeccion();
       }        
    }//GEN-LAST:event_cmbNivelItemStateChanged

    private void rdComidaNoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdComidaNoItemStateChanged
       if(condi.equals("nuevo"))
       {
            if(rdComidaNo.isSelected())
            {
                jdcComida.setDate(null);
            }
       }
       
    }//GEN-LAST:event_rdComidaNoItemStateChanged

    private void rdComidaSiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdComidaSiItemStateChanged
        if(condi.equals("nuevo"))
        {
            if(rdComidaSi.isSelected())
            {
                try 
                {
                    Date date = new Date();
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String fechita = formato.format(date);
                    jdcComida.setDate(formato.parse(fechita));
                } catch (ParseException ex) {
                    Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_rdComidaSiItemStateChanged

    private void txtDescuentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDescuentoFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescuentoFocusLost

    private void chkPartidaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkPartidaItemStateChanged
       if(chkPartida.isSelected())
       {
            txtDescuento.setEnabled(true);
            txtMotivo.setEnabled(true);
            txtDescuento.requestFocus();
       }
       else
       {
            txtDescuento.setEnabled(false);
            txtMotivo.setEnabled(false);
            
       }
        
    }//GEN-LAST:event_chkPartidaItemStateChanged

    private void txtMotivoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMotivoKeyReleased
        txtMotivo.setText(convertirMayu(txtMotivo.getText()));
    }//GEN-LAST:event_txtMotivoKeyReleased

    private void txtDescuentoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescuentoKeyTyped
        char c = evt.getKeyChar();
        if ( !( Character.isDigit(c) ||
                (c == KeyEvent.VK_BACK_SPACE) ||
                (c == KeyEvent.VK_DELETE) ||
                (c == KeyEvent.VK_PERIOD)
              )
            )
        {
            
        evt.consume();
        }
    }//GEN-LAST:event_txtDescuentoKeyTyped
   
    
     private void activaCampoPadre(boolean a,boolean c,boolean d,boolean e,boolean f,boolean g,boolean h,boolean i,boolean j)
    {
        txtPadreGradoI.setEnabled(a);        
        txtPadreEstadoCiv.setEnabled(e);
        txtPadreOcu.setEnabled(d);
        txtPadreCentroLab.setEnabled(f);
        txtPadreEmail.setEnabled(g);
        txtPadreTelCel2.setEnabled(h);
        txtPadreTelCel1.setEnabled(h);
        rdPadreViveAluSi.setEnabled(i);
        rdPadreViveAluNo.setEnabled(j);
    }
        
    private void activaCampoMadre(boolean a,boolean c,boolean d,boolean e,boolean f,boolean g,boolean h,boolean i,boolean j)
    {
        txtMadreGradoI.setEnabled(a);
        
        txtMadreEstadoCiv.setEnabled(e);
        txtMadreOcu.setEnabled(d);
        txtMadreCentroLab.setEnabled(f);
        txtMadreEmail.setEnabled(g);
        txtMadreTelCel1.setEnabled(h);
        txtMadreTelCel2.setEnabled(h);
        rdMadreViveAluSi.setEnabled(i);
        rdMadreViveAluNo.setEnabled(j);
    }
    
    private void llamaMatricula()
    {
        condi = "volver";
        
        PckInterfaces.FrmMatricula matri= new PckInterfaces.FrmMatricula();        
        int x = (dskpPrincipal.getWidth() / 2) - matri.getWidth() / 2;
        int y = (dskpPrincipal.getHeight() / 2) - matri.getHeight() / 2;
        if (matri.isShowing()) 
        {
            matri.setLocation(x, y);
        } 
        else 
        {
            dskpPrincipal.add(matri);
            matri.setLocation(x, y);
            matri.show();
            this.dispose();
        }
    }
    
    //LLENA COMBO PERIODO
    private void cargaPeriodoGuarderia(){
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
        String fila[] = new String[5];
        intcontador = 0;
        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo= new ClsEntidadPeriodo();
        Periodo = (ClsEntidadPeriodo) iterator.next();
        id[intcontador] = Periodo.getId_Periodo();
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getNivel_Periodo();
        fila[2] = Periodo.getEstado_Periodo();
        //ver tema de codPeriodo
                
            if (fila[1].equals("GUARDERIA") && fila[2].equals("Activo")){ 
            //codPeriodo = fila[4]; 
            //System.out.println("El periodo es: "+ fila[4]+"-"+fila[3]);
            //per = fila[0];
            DefaultComboBoxModel.addElement(fila[0]);
            }
            intcontador++;
        }    
        cmbPeriodo.setModel(DefaultComboBoxModel);
    }
      
    void GuardarAImagen(File archivo, byte[] bytesImg){
      
        try {
            salida = new FileOutputStream(archivo);
            salida.write(bytesImg);
    
        } catch (IOException e) {
            Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, e);
        }      
    }
    
         
    
     
    boolean verificaApoderado()
    {
        boolean h = false;
        if( txtAutNomb.getText().equals("") && txtAutParentesco.getText().equals("") && txtAutDni.getText().equals("") && txtAutTelefono.getText().equals(""))
        {
        h=true;
        }
    return h;
    }
     
     boolean verificaClinico()
     {
     return txtAlimento.getText().equals("")&& txtMedicamento.getText().equals("") && chkVaricela.isSelected()==false
            && chkRubeola.isSelected()==false && chkSarampion.isSelected()==false && chkHepatitis.isSelected() &&
            chkPaperas.isSelected() && txtOtro.getText().equals("");
     }
     
     boolean verificaEmergencia()
     {
     return txtEmergencia.getText().equals("") && txtTelEmer.getText().equals("") && txtEmerParentesco.getText().equals("");
     }
     
//     boolean verificaPadre()
//     {
//     return txtPadreApeP.getText().equals("") && txtPadreApeM.getText().equals("")&& txtPadreNombre.getText().equals("")
//            && txtPadreFecNac.getText().equals("") && txtPadreGradoI.getText().equals("")&& txtPadreDni.getText().equals("") 
//            && txtPadreEstadoCiv.getText().equals("")&& txtPadreOcu.getText().equals("")&& txtPadreCentroLab.getText().equals("")
//            && txtPadreEmail.getText().equals("")&& txtPadreTelCel1.getText().equals("")&& txtMadreTelCel2.getText().equals("") ; 
//     }
   private void codigomatricula() 
   {
    ClsMatricula matricula = new ClsMatricula();
    con = ClsConexion.getConection();
    strMatricula = matricula.GeneraCodigoMatricula(con);
    lblCodigo.setText(strMatricula);
    ClsConexion.closeConnection(con);
   }
   
   
   private void fechaActual() 
   {
   
       Date date = new Date();                       
       SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
       String fechita = formato.format(date);
        try 
        {      
            txtFechaMat.setDate(formato.parse(fechita));
            jdcInicioClases.setDate(formato.parse(fechita));
            jdcComida.setDate(formato.parse(fechita));
        } catch (ParseException ex) {
            Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }
                    
   }
   
   
   private void cargaComboNivel()
   {
        ClsNivel niveles = new ClsNivel();
        ArrayList<ClsEntidadNivel> nivel =  niveles.SeleccionarNivel();
        Iterator it = nivel.iterator();
        DefaultComboBoxModel dtm = new DefaultComboBoxModel();
        dtm.removeAllElements();
        cmbNivel.removeAllItems();
                
        while(it.hasNext())
        {
        ClsEntidadNivel Nivel = new ClsEntidadNivel();
        Nivel = (ClsEntidadNivel) it.next();       
        codigoNivel.add(Nivel.getNivel_id());
        dtm.addElement(Nivel.getNivel_nombre());                
        }
        cmbNivel.setModel(dtm); 
   }
   private void cargaComboPeriodo()
   {
        codigoPeriodo.clear();
        ClsPeriodo periodos = new ClsPeriodo();
        ArrayList<ClsEntidadPeriodo> periodo =  periodos.ListarPeriodo();
        Iterator iterator = periodo.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbPeriodo.removeAllItems();
        String fila[] = new String[4];     
        while(iterator.hasNext())
        {
        ClsEntidadPeriodo Periodo = new ClsEntidadPeriodo();
        Periodo = (ClsEntidadPeriodo) iterator.next();               
        fila[0] = Periodo.getNombre_Periodo();
        fila[1] = Periodo.getEstado_Periodo();        
            if(fila[1].equals("Activo") &&                     
            codigoNivel.get(cmbNivel.getSelectedIndex()).equals(Periodo.getNivel_Id()))
            {   
            codigoPeriodo.add(Periodo.getId_Periodo());     
            DefaultComboBoxModel.addElement(Periodo.getNombre_Periodo());        
            }
        }
        cmbPeriodo.setModel(DefaultComboBoxModel);       
   }
   private void cargaComboSeccion()
   {    
        codigoSeccion.clear();
        ClsSeccion secciones = new ClsSeccion();
        ArrayList<ClsEntidadSeccion> seccion =  secciones.ListarSeccion();
        Iterator it = seccion.iterator();
        DefaultComboBoxModel DefaultComboBoxModel = new DefaultComboBoxModel();
        DefaultComboBoxModel.removeAllElements();
        cmbSeccion.removeAllItems();
        String fila2[] = new String[5];        
        while(it.hasNext())
        {
        ClsEntidadSeccion Seccion = (ClsEntidadSeccion) it.next();             
        fila2[0] = Seccion.getNombre_Seccion();
        fila2[1] = Seccion.getEstado_Periodo();       
        fila2[3] = Seccion.getNombre_Periodo();
        
            if (codigoPeriodo.get(cmbPeriodo.getSelectedIndex()).equals(Seccion.getId_Periodo())) 
            {
                codigoSeccion.add(Seccion.getId_Seccion());
                DefaultComboBoxModel.addElement(fila2[0]);
            }       
        }
        cmbSeccion.setModel(DefaultComboBoxModel);         
   }
   
   private void modificaMatricula() 
   {
        if(txtMadreDni.getText().equals("") || txtDni.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "Debe llenar los campos necesarios");
        }
        else
        {   
            con = ClsConexion.getConection();
            
            String codMatricula="";
            String codAlumno="";
            String codEmergencia="";
            String codPadre="";
            String codMadre="";
            String codApoderado="";
            String codClinico="";
            
            ClsMatricula ma = new ClsMatricula();            
            try
            {
                ResultSet rsM = ma.ObtenerCodigos(idMatricula,con);
                while(rsM.next())
                {
                    codMatricula = rsM.getString("id_matricula");
                    System.out.println("matricula: "+codMatricula);
                    codAlumno = rsM.getString("id_alumno");
                    System.out.println("alumno: "+codAlumno);
                    codEmergencia = rsM.getString("id_emer");
                    System.out.println("emergencia: "+codEmergencia);
                    codPadre = rsM.getString("padre_id");
                    System.out.println("padre: "+codPadre);
                    codMadre = rsM.getString("madre_id");
                    System.out.println("madre: "+codMadre);
                    codApoderado = rsM.getString("id_apoderado");
                    System.out.println("apoderado: "+codApoderado);
                    codClinico = rsM.getString("id_clinico");                    
                    System.out.println("clinico: "+codClinico);
                }
            }catch(Exception ex)
            {
                Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
            }
           
            /*APODERADO*/
            ClsApoderado apoderados = new ClsApoderado();
            ClsEntidadApoderado apoderado = new ClsEntidadApoderado();
            apoderado.setNombre_Apoderado(txtAutNomb.getText());
            apoderado.setParentesco_Apoderado(txtAutParentesco.getText());
            apoderado.setDni_Apoderado(txtAutDni.getText());
            apoderado.setTelefono_Apoderado(txtAutTelefono.getText());
            apoderados.ModificarApoderado(codApoderado, apoderado);
            
            /*PADRE*/                   
            ClsPadre padres = new ClsPadre();
            ClsEntidadPadre padre = new ClsEntidadPadre();                  
            padre.setApellidoP_Padre(txtPadreApeP.getText());
            padre.setApellidoM_Padre(txtPadreApeM.getText());
            padre.setNombre_Padre(txtPadreNombre.getText());
            try{
            String fechita2 = formatoFecha(txtPadreFecNac.getDate());
            }
            catch(Exception ex)
            {
            k="hola";
            padre.setFechaN_Padre(" ");
            }      
            if(!k.equals("hola") )
            {       
            padre.setFechaN_Padre(formatoFecha(txtPadreFecNac.getDate()));
            }
            else{
                padre.setFechaN_Padre(" ");
            }
            if(rdPadreViveSi.isSelected())
            {
                padre.setVive_Padre(rdPadreViveSi.getText());
                padre.setGradoI_Padre(txtPadreGradoI.getText());
                padre.setDni_Padre(txtPadreDni.getText());
                padre.setEstadoC_Padre(txtPadreEstadoCiv.getSelectedItem().toString());
                padre.setOcupacion_Padre(txtPadreOcu.getText());
                padre.setCentroL_Padre(txtPadreCentroLab.getText());
                padre.setEmail_Padre(txtPadreEmail.getText());
                padre.setTelefono_Padre(txtPadreTelCel1.getText());
                padre.setTelefono2_Padre(txtPadreTelCel2.getText());
                if (rdPadreViveAluSi.isSelected())
                {
                    padre.setViveCona_Padre(rdPadreViveAluSi.getText());
                }
                else if(rdPadreViveAluNo.isSelected())
                {
                    padre.setViveCona_Padre(rdPadreViveAluNo.getText());
                }

            }
            else if(rdPadreViveNo.isSelected())
            {
                padre.setVive_Padre(rdPadreViveNo.getText());
                padre.setDni_Padre(txtPadreDni.getText());
            }
            padres.ModificarPadre(codPadre, padre);
            
            /*MADRE*/
            ClsMadre madres = new ClsMadre();
            ClsEntidadMadre madre = new ClsEntidadMadre();
            madre.setApellidoP_Madre(txtMadreApeP.getText());
            madre.setApellidoM_Madre(txtMadreApeM.getText());
            madre.setNombre_Madre(txtMadreNombre.getText());                
            try{
            String fechita2 = formatoFecha(txtMadreFecNac.getDate());
            System.out.println("fecha 2: "+fechita2);
            }
            catch(Exception ex)
            {k="hola2";
             madre.setFechaN_Madre(" ");}
            if(!k.equals("hola2"))
            {
            madre.setFechaN_Madre(formatoFecha(txtMadreFecNac.getDate()));
            } 
            else{
                madre.setFechaN_Madre(" ");
            }
            if(rdMadreViveSi.isSelected())
            {
                madre.setVive_Madre(rdMadreViveSi.getText());
                madre.setGradoI_Madre(txtMadreGradoI.getText());
                madre.setDni_Madre(txtMadreDni.getText());
                madre.setEstadoC_Madre(txtMadreEstadoCiv.getSelectedItem().toString());
                madre.setOcupacion_Madre(txtMadreOcu.getText());
                madre.setCentroL_Madre(txtMadreCentroLab.getText());
                madre.setEmail_Madre(txtMadreEmail.getText());
                madre.setTelefono_Madre(txtMadreTelCel1.getText());
                madre.setTelefono2_Madre(txtMadreTelCel2.getText());                    
                if (rdMadreViveAluSi.isSelected())
                {madre.setViveCona_Madre(rdMadreViveAluSi.getText());}
                else if(rdMadreViveAluNo.isSelected())
                {madre.setViveCona_Madre(rdMadreViveAluNo.getText());}
            }
            else if(rdMadreViveNo.isSelected())
            {
                madre.setVive_Madre(rdMadreViveNo.getText());
                madre.setDni_Madre(txtMadreDni.getText());
            }
            madres.ModificarMadre(codMadre,con, madre);
            
            
            /*ALUMNO*/
            ClsAlumno alumnos = new ClsAlumno();
            ClsEntidadAlumno alumno = new ClsEntidadAlumno();
            alumno.setNombre_Alumno(txtNombre.getText());
            alumno.setApellidoP_Alumno(txtApeP.getText());
            alumno.setApellidoM_Alumno(txtApeM.getText());
            alumno.setFechaN_Alumno(formatoFecha(txtFechaNac.getDate()));
            alumno.setLugarN_Alumno(txtLugarNac.getText());
            alumno.setDomicilio_Alumno(txtDomicilio.getText());
            alumno.setTelefono_Alumno(txtAluTel.getText());
            alumno.setDni_Alumno(txtDni.getText());
            alumno.setEdadH_Alumno(txtHermanoEdad.getText());
            alumno.setLugarH_Alumno(txtLugarOcupa.getText());
            alumno.setReligion_Alumno(txtReligion.getText());                          
            alumno.setId_Apoderado(codApoderado);
            alumno.setId_Padre(codPadre);
            alumno.setId_Madre(codMadre);
            alumnos.ModificarAlumno(codAlumno,con, alumno);
                        
            
            /*DATOS CLINICOS*/                    
            ClsClinico clinicos = new ClsClinico();
            ClsEntidadClinico clinico = new ClsEntidadClinico();
            clinico.setMedicamento_Clinico(txtMedicamento.getText());
            clinico.setAlimento_Clinico(txtAlimento.getText());
            if(chkVaricela.isSelected())
            {clinico.setVaricelo_Clinico("SI");}
            else{clinico.setVaricelo_Clinico("NO");}
            if(chkRubeola.isSelected())
            {clinico.setRubeola_Clinico("SI");}
            else{clinico.setRubeola_Clinico("NO");}
            if(chkSarampion.isSelected())
            {clinico.setSarampion_Clinico("SI");}
            else{clinico.setSarampion_Clinico("NO");}
            if(chkHepatitis.isSelected())
            {clinico.setHepatitis_Clinico("SI");}
            {clinico.setHepatitis_Clinico("NO");}
            if(chkPaperas.isSelected())
            {clinico.setPaperas_Clinico("SI");}
            {clinico.setPaperas_Clinico("NO");}
            if(chkOtro.isSelected())
            {clinico.setOtro_Clinico(txtOtro.getText());}
            else{clinico.setOtro_Clinico(" ");}
            clinicos.ModificarClinico(codClinico,con, clinico);
 
            
            //EMERGENCIA
            ClsEmergencia emergencias = new ClsEmergencia();
            ClsEntidadEmergencia emergencia = new ClsEntidadEmergencia();
            emergencia.setEmergencia_Emergencia(txtEmergencia.getText());
            emergencia.setTelefono_Emergencia(txtTelEmer.getText());
            emergencia.setParentesco_Emergencia(txtEmerParentesco.getText());
            emergencias.ModificarEmergencia(codEmergencia,emergencia);            

            /*MATRICULA*/
            ClsMatricula matriculas = new ClsMatricula();
            ClsEntidadMatricula matricula = new ClsEntidadMatricula();
            //el codigo se genera al entrar a la ficha (codigoMatricula();)
            matricula.setCod_Matricula(lblCodigo.getText());
            matricula.setFecha_Matricula(formatoFecha(txtFechaMat.getDate()));         
            /*obteniendo fecha del JCalendar en dd/MM/yyyy*/                      
            //inicio clases no puede ser vacio                                
            matricula.setInicio_Clases(formatoFecha(jdcInicioClases.getDate()));
            matricula.setEdadAnio_Matricula(txtEdad.getText());
            if(rdM.isSelected())
            {matricula.setSexo_Alumno("M");}
            else if(rdF.isSelected())
            {matricula.setSexo_Alumno("F");}
            if(rdComidaSi.isSelected())
            {matricula.setComida_Alumno("SI");}
            else if(rdComidaNo.isSelected())
            {matricula.setComida_Alumno("NO");}                    
            matricula.setHorarioe_Matricula(cmbE.getSelectedItem().toString());
            matricula.setHorarios_Matricula(cmbS.getSelectedItem().toString());                      
            if(lblPrecio.getText().equals(""))
            {matricula.setMensualidad_Matricula(0.00);}
            else
            {
             men = lblPrecio.getText();                       
             matricula.setMensualidad_Matricula(Double.parseDouble(men));
            }
            matricula.setId_Seccion(codigoSeccion.get(cmbSeccion.getSelectedIndex()));
            if(chkPartida.isSelected())
            {
                matricula.setOtro(txtDescuento.getText());
                matricula.setPartida_Nacimiento(txtMotivo.getText());
            }
            else 
            {
                matricula.setOtro("");
                matricula.setPartida_Nacimiento("");
            }
            if(chkDniPapa.isSelected())
            {matricula.setDni_Padre("SI");
            }else matricula.setDni_Padre("NO");
            if(chkDniMama.isSelected())
            {matricula.setDni_Madre("SI");
            }else matricula.setDni_Madre("NO");                      
            matricula.setDni_Menor(txtInstrumento.getText());                     
            if(chkVacunacion.isSelected())
            {matricula.setTarjeta_Vacunacion("SI");
            }else matricula.setTarjeta_Vacunacion("NO");                 
            matricula.setId_Alumno(codAlumno);      
            matricula.setId_Emergencia(codEmergencia);
            matricula.setId_Clinico(codClinico);
            matricula.setRetiro("NO");
            matriculas.ModificarMatricula(codMatricula, matricula,con);
            
            /*GUARDAR IMAGEN*/
            // obtengo apellidos y nombres del alumno (sera el nombre de la imagen)
           String nombrecompleto = txtApeP.getText()+" "+ txtApeM.getText()+", "+txtNombre.getText();
           //direccion raíz
           String direccion = System.getProperty("user.dir");           
           //obtengo una imagen a partir del icono del label
           try
           {
               if(ico != null)
                {
                Image ima = ico.getImage();
                //cargo un buffered de la imagen redimensionada 
                BufferedImage buffered = new BufferedImage(ima.getWidth(null), ima.getHeight(null), BufferedImage.TYPE_4BYTE_ABGR);
                //creo un grafico 2d a partir del buffered
                Graphics2D g2 = buffered.createGraphics();
                //dibujo
                g2.drawImage(ima, 0, 0, null);
                //cierro el proceso
                g2.dispose();

                try {
                     // guardando, reemplazará al archivo anterior
                     File outputfile = new File(direccion+"/Alumnos/"+nombrecompleto+".png");
                     //escribo la nuevo imagen, con la extención, y la dirección
                     ImageIO.write(buffered, "png", outputfile);
                 } catch (IOException e) {
                    //Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, e);
                 }
                JOptionPane.showMessageDialog(null, "Datos guardados correctamente");
                 btnGuardar.setEnabled(false);
                 
                 FrmPrincipal.CodAlumno=codAlumno;
                 llamaMatricula();
                }
               else
               {
                   JOptionPane.showMessageDialog(null, "Datos guardados correctamente");
                    btnGuardar.setEnabled(false);
                    // MODIFICAR ALIMENTACION SI SE RETIRA////////////////

                    FrmPrincipal.CodAlumno=codAlumno;
                    llamaMatricula();
               }
            }           
            catch(HeadlessException e)
            {
                JOptionPane.showMessageDialog(null, "Datos guardados correctamente");
                btnGuardar.setEnabled(false);
                // MODIFICAR ALIMENTACION SI SE RETIRA////////////////
                
                FrmPrincipal.CodAlumno=codAlumno;
                llamaMatricula();
            }
           
            
              
        }
       ClsConexion.closeConnection(con); 
   }
   /*----------------------------------------------------------------------------------------------*/
   /*LLENA LA FICHA DE MATRICULA*/
   
    
   
   
   private void llenarFichaMatricula()   
   {
       ClsMatricula matri = new ClsMatricula();   
       con = ClsConexion.getConection();
        try 
        {              
            ResultSet rsMatri = matri.SeleccionarMatriculaFichaReporte(idMatricula,con);
            while(rsMatri.next())
            {
                if(condi.equals("modificame"))
                {
                    lblCodigo.setText(rsMatri.getString("cod_matricula"));
                }
                
                jdcInicioClases.setDate(formatoFechaDate(rsMatri.getString("inicio_clases")));
                
                cmbNivel.setSelectedItem(rsMatri.getString("nivel_nombre"));
                System.out.println(rsMatri.getString("nivel_nombre"));
                cmbPeriodo.setSelectedItem(rsMatri.getString("nombre_periodo"));
                System.out.println(rsMatri.getString("nombre_periodo"));
                cmbSeccion.setSelectedItem(rsMatri.getString("nombre_seccion"));
                System.out.println(rsMatri.getString("nombre_seccion"));
                
                ///////////////////////////////////////////////////////////////
                cmbE.setSelectedItem(rsMatri.getString("horarioe_matricula"));
                cmbS.setSelectedItem(rsMatri.getString("horarios_matricula"));
                
                if(cmbS.getSelectedIndex() != -1)
                {
                    ClsPeriodo per = new ClsPeriodo();
                    String periodo = codigoPeriodo.get(cmbPeriodo.getSelectedIndex());
                    String a="",b="",c="";
                    try
                    {
                        ResultSet rsPer = per.SeleccionarPeriodo(periodo);
                        while (rsPer.next())
                        {
                           a = rsPer.getString("hora_periodo");
                           b = rsPer.getString("horb_periodo");
                           c = rsPer.getString("horc_periodo");
                        }
                    }catch(Exception ex){
                        Logger.getLogger(FrmFichaMatricula.class.getName()).log(Level.SEVERE, null, ex);
                    }                    
                    if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("14:00")
                       || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("14:00")     )
                    {
                        lblPrecio.setText(a);
                    }
                    else if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("17:00")
                      || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("17:00")      )
                    {
                        lblPrecio.setText(b);
                    }
                    else if(cmbE.getSelectedItem().equals("7:00") && cmbS.getSelectedItem().equals("19:00")
                      || cmbE.getSelectedItem().equals("8:00") && cmbS.getSelectedItem().equals("19:00")      )
                    {
                        lblPrecio.setText(c);
                    }
                    else lblPrecio.setText("s/.0.00"); 
                }
                //////////////////////////////////////////////////////////////
                
                //lblPrecio.setText("s./"+rsMatri.getString("mensualidad_matricula"));
                switch (rsMatri.getString("sexo_alumno")) 
                {
                    case "M":
                       rdM.setSelected(true);
                       break;
                    case "F":
                       rdF.setSelected(true);
                       break;
                }
                switch (rsMatri.getString("comida_alumno")) 
                {
                    case "SI":
                       rdComidaSi.setSelected(true);
                       //jdcComida.setDate(formatoFechaDate(rsMatri.getString("inicio_clases")));
                       break;
                    case "NO":
                       rdComidaNo.setSelected(true);
                       break;
                }                 
                if(rsMatri.getString("Otro").length()>0)
                {
                    chkPartida.setSelected(true);
                    txtDescuento.setText(rsMatri.getString("Otro")); //Se usa el campo otro para descuento
                    txtMotivo.setText(rsMatri.getString("partida_nac")); //se usa partida_nac para el motivo
                }
                else
                {
                    chkPartida.setSelected(false);
                    txtDescuento.setEnabled(false);
                    txtMotivo.setEnabled(false);
                }
                if(rsMatri.getString("dni_padre").equals("SI"))
                {chkDniPapa.setSelected(true);}                 
                if(rsMatri.getString("dni_madre").equals("SI"))
                {chkDniMama.setSelected(true);}
                if(rsMatri.getString("dni_menor").length()==0)
                {chkBanda.setSelected(false);}                 
                else
                {chkBanda.setSelected(true); 
                txtInstrumento.setText(rsMatri.getString("dni_menor")); 
                }
                if(rsMatri.getString("tarjeta_vac").equals("SI"))
                {chkVacunacion.setSelected(true);}
               
                if(condi.equals("modificame"))
                {
                    txtFechaMat.setDate(formatoFechaDate(rsMatri.getString("fecha_matricula")));
                }
                txtEdad.setText(rsMatri.getString("edadanio_matricula"));
                
            //////////////////////////////////////////////////////////////////////////////////
                
                txtNombre.setText(rsMatri.getString("nombre_alumno"));
                txtApeP.setText(rsMatri.getString("apellidop_alumno"));
                txtApeM.setText(rsMatri.getString("apellidom_alumno"));
                txtFechaNac.setDate(formatoFechaDate(rsMatri.getString("fecha_nacimiento")));
                txtLugarNac.setText(rsMatri.getString("lugarn_alumno"));
                txtDomicilio.setText(rsMatri.getString("domicilio_alumno"));
                txtAluTel.setText(rsMatri.getString("telefono_alumno"));
                txtDni.setText(rsMatri.getString("dni_alumno"));
                if(rsMatri.getString("edadh_alumno").isEmpty())
                { rdHermanoNo.setSelected(true);}
                else 
                {   rdHermanoSi.setSelected(true);
                    txtHermanoEdad.setText(rsMatri.getString("edadh_alumno"));
                }  
                txtLugarOcupa.setText(rsMatri.getString("lugarh_alumno"));
                txtReligion.setText(rsMatri.getString("religion_alumno"));
                
            /////////////////////////////////////////////////////////////////////////////////
                
                txtAutNomb.setText(rsMatri.getString("nombre_apoderado"));
                txtAutParentesco.setText(rsMatri.getString("parentesco_apoderado"));
                txtAutDni.setText(rsMatri.getString("dni_apoderado"));
                txtAutTelefono.setText(rsMatri.getString("telefono_apoderado"));
                
            /////////////////////////////////////////////////////////////////////////////////   
               
                //medicamento
                if(rsMatri.getString("medicamento_clinico").isEmpty())
                {rdAlergicoMedNo.setSelected(true);}                     
                else
                {   
                    rdAlergicoMedSi.setSelected(true);
                    txtMedicamento.setText(rsMatri.getString("medicamento_clinico"));
                }
                //alimento
                if(rsMatri.getString("alimento_clinico").isEmpty())
                {rdAlergicoAliNo.setSelected(true);}
                else
                {   
                    rdAlergicoAliSi.setSelected(true);
                    txtAlimento.setText(rsMatri.getString("alimento_clinico"));
                }
                //enfermedades
                if(rsMatri.getString("varicelo_clinico").equals("SI"))
                {chkVaricela.setSelected(true);}
                if(rsMatri.getString("rubeola_clinico").equals("SI"))
                {chkRubeola.setSelected(true);}
                if(rsMatri.getString("sarampion_clinico").equals("SI"))
                {chkSarampion.setSelected(true);}
                if(rsMatri.getString("paperas_clinico").equals("SI"))
                {chkPaperas.setSelected(true);}
                if(rsMatri.getString("hepatitis_clinico").equals("SI"))
                {chkHepatitis.setSelected(true);}
                if(rsMatri.getString("otro_clinico").isEmpty())
                {chkOtro.setSelected(false);}
                else
                {   
                    chkOtro.setSelected(true);
                    txtOtro.setText(rsMatri.getString("otro_clinico"));
                }
              
            /////////////////////////////////////////////////////////////////////////////
                
                txtEmergencia.setText(rsMatri.getString("emergencia_emer"));
                txtTelEmer.setText(rsMatri.getString("telefono_emer"));
                txtEmerParentesco.setText(rsMatri.getString("parentesco_emer"));
                
            ///////////////////////////////////////////////////////////////////////////////////////////
                txtPadreApeP.setText(rsMatri.getString("padre_apellido_paterno"));
                txtPadreApeM.setText(rsMatri.getString("padre_apellido_materno"));
                txtPadreNombre.setText(rsMatri.getString("padre_nombre"));
                String auxx = rsMatri.getString("padre_fecha_nacimiento");
                System.out.println(">"+auxx+"<");
                 if( !auxx.equals(" ") )
                {
                    txtPadreFecNac.setDate(formatoFechaDate(auxx));
                }
                txtPadreDni.setText(rsMatri.getString("padre_dni"));
                switch (rsMatri.getString("padre_vive")) 
                {
                    case "SI":
                        rdPadreViveSi.setSelected(true);
                        txtPadreGradoI.setText(rsMatri.getString("padre_grado_instruccion"));
                        String civil = rsMatri.getString("padre_estado_civil");
                        if(civil.equals("Casado(a)") || civil.equals("Conviviente") || civil.equals("Separado(a)") || civil.equals("Divorciado(a)") || civil.equals("Viudo(a)"))
                        {
                            txtPadreEstadoCiv.setSelectedItem(civil);
                        }                        
                        txtPadreOcu.setText(rsMatri.getString("padre_ocupacion"));
                        txtPadreCentroLab.setText(rsMatri.getString("padre_centro_laboral"));
                        txtPadreEmail.setText(rsMatri.getString("padre_correo"));
                        txtPadreTelCel1.setText(rsMatri.getString("padre_telefono1"));
                        txtPadreTelCel2.setText(rsMatri.getString("padre_telefono2"));                         
                        switch (rsMatri.getString("padre_vive_con_alumno")) 
                        {
                            case "SI":
                                rdPadreViveAluSi.setSelected(true);
                                break;
                            case "NO":
                                rdPadreViveAluNo.setSelected(true);
                                break;
                        }                        
                    break;
                    case "NO":
                        rdPadreViveNo.setSelected(true);
                    break;
                }
                           
            //////////////////////////////////////////////////////////////////////////////////////
                
                txtMadreApeP.setText(rsMatri.getString("madre_apellido_paterno"));
                txtMadreApeM.setText(rsMatri.getString("madre_apellido_materno"));
                txtMadreNombre.setText(rsMatri.getString("madre_nombre"));
                if(!rsMatri.getString("madre_fecha_nacimiento").equals(" "))
                {
                    txtMadreFecNac.setDate(formatoFechaDate(rsMatri.getString("madre_fecha_nacimiento")));
                }
                txtMadreDni.setText(rsMatri.getString("madre_dni"));
                switch (rsMatri.getString("madre_vive")) 
                {
                    case "SI":
                        rdMadreViveSi.setSelected(true);
                        txtMadreGradoI.setText(rsMatri.getString("madre_grado_instruccion"));
                        String civil = rsMatri.getString("madre_estado_civil");
                        if(civil.equals("Casado(a)") || civil.equals("Conviviente") || civil.equals("Separado(a)") || civil.equals("Divorciado(a)") || civil.equals("Viudo(a)"))
                        {
                            txtMadreEstadoCiv.setSelectedItem(civil);
                        }
                        txtMadreOcu.setText(rsMatri.getString("madre_ocupacion"));
                        txtMadreCentroLab.setText(rsMatri.getString("madre_centro_laboral"));
                        txtMadreEmail.setText(rsMatri.getString("madre_correo"));
                        txtMadreTelCel1.setText(rsMatri.getString("madre_telefono1"));
                        txtMadreTelCel2.setText(rsMatri.getString("madre_telefono2"));                         
                        switch (rsMatri.getString("madre_vive_con_alumno")) 
                        {
                            case "SI":
                                rdMadreViveAluSi.setSelected(true);
                                break;
                            case "NO":
                                rdMadreViveAluNo.setSelected(true);
                                break;
                        }                        
                    break;
                    case "NO":
                        rdMadreViveNo.setSelected(true);
                    break;
                }
               
                ////////////////////////////////////////////////////////////////
                
                try{                    
                String nombrecompleto = txtApeP.getText()+" "+ txtApeM.getText()+", "+txtNombre.getText();
                String direccion = System.getProperty("user.dir");             
                //leemos la imagen desde la direccion a traves del BufferedImage
                BufferedImage bi=ImageIO.read(new File(direccion+"/Alumnos/"+nombrecompleto+".png"));
                //cargamos la imagen hacia el icono
                ico = new ImageIcon(bi);

                lblFoto.setIcon(ico);
                lblFoto.updateUI();
                }catch(IOException a){
                    lblFoto.setText("Sin imagen");
                }                                                
            }
        } catch (Exception ex) 
        {
            Logger.getLogger(FrmMatricula.class.getName()).log(Level.SEVERE, null, ex);
        }
        ClsConexion.closeConnection(con);
   }
   
   
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgrpAlergicoAli;
    private javax.swing.ButtonGroup bgrpAlergicoMed;
    private javax.swing.ButtonGroup bgrpComida;
    private javax.swing.ButtonGroup bgrpHermano;
    private javax.swing.ButtonGroup bgrpMadreVive;
    private javax.swing.ButtonGroup bgrpMadreViveAlu;
    private javax.swing.ButtonGroup bgrpNivel;
    private javax.swing.ButtonGroup bgrpPadreVive;
    private javax.swing.ButtonGroup bgrpPadreViveAlu;
    private javax.swing.ButtonGroup bgrpSexo;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JCheckBox chkBanda;
    private javax.swing.JCheckBox chkDniMama;
    private javax.swing.JCheckBox chkDniPapa;
    private javax.swing.JCheckBox chkHepatitis;
    private javax.swing.JCheckBox chkOtro;
    private javax.swing.JCheckBox chkPaperas;
    private javax.swing.JCheckBox chkPartida;
    private javax.swing.JCheckBox chkRubeola;
    private javax.swing.JCheckBox chkSarampion;
    private javax.swing.JCheckBox chkVacunacion;
    private javax.swing.JCheckBox chkVaricela;
    private javax.swing.JComboBox cmbE;
    private javax.swing.JComboBox cmbNivel;
    private javax.swing.JComboBox cmbPeriodo;
    private javax.swing.JComboBox cmbS;
    private javax.swing.JComboBox cmbSeccion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private com.toedter.calendar.JDateChooser jdcComida;
    private com.toedter.calendar.JDateChooser jdcControl;
    private com.toedter.calendar.JDateChooser jdcInicioClases;
    private javax.swing.JLabel lblA;
    private javax.swing.JLabel lblAlergico;
    private javax.swing.JLabel lblAlergicoNo;
    private javax.swing.JLabel lblAlergicoSi;
    private javax.swing.JLabel lblAlimento;
    private javax.swing.JLabel lblAluTel;
    private javax.swing.JLabel lblApeM;
    private javax.swing.JLabel lblApeP;
    private javax.swing.JLabel lblApodApeM;
    private javax.swing.JLabel lblApodApeM1;
    private javax.swing.JLabel lblApodApeP;
    private javax.swing.JLabel lblApodApeP1;
    private javax.swing.JLabel lblApodCentroLab;
    private javax.swing.JLabel lblApodCentroLab1;
    private javax.swing.JLabel lblApodDniEstadoCiv;
    private javax.swing.JLabel lblApodDniEstadoCiv1;
    private javax.swing.JLabel lblApodEmail;
    private javax.swing.JLabel lblApodEmail1;
    private javax.swing.JLabel lblApodFecNac;
    private javax.swing.JLabel lblApodFecNac1;
    private javax.swing.JLabel lblApodGradoI;
    private javax.swing.JLabel lblApodGradoI1;
    private javax.swing.JLabel lblApodNombre;
    private javax.swing.JLabel lblApodNombre1;
    private javax.swing.JLabel lblApodTelCel;
    private javax.swing.JLabel lblApodTelCel1;
    private javax.swing.JLabel lblApodVive;
    private javax.swing.JLabel lblApodVive1;
    private javax.swing.JLabel lblApodViveAlu;
    private javax.swing.JLabel lblApodViveAlu1;
    private javax.swing.JLabel lblAutDni;
    private javax.swing.JLabel lblAutNomb;
    private javax.swing.JLabel lblAutParentesco;
    private javax.swing.JLabel lblAutTelefono;
    private javax.swing.JLabel lblCodigo;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblDomicilio;
    private javax.swing.JLabel lblEdad1;
    private javax.swing.JLabel lblEmerParentesco;
    private javax.swing.JLabel lblEmergencia;
    private javax.swing.JLabel lblEnfermedad;
    private javax.swing.JLabel lblFechaMat;
    private javax.swing.JLabel lblFechaNac;
    private javax.swing.JLabel lblFicha;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblHermano;
    private javax.swing.JLabel lblHermanoEdad;
    private javax.swing.JLabel lblHorario;
    private javax.swing.JLabel lblLugarNac;
    private javax.swing.JLabel lblLugarOcupa;
    private javax.swing.JLabel lblMadre;
    private javax.swing.JLabel lblMedicamento;
    private javax.swing.JLabel lblNivel;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPadre;
    private javax.swing.JTextField lblPrecio;
    private javax.swing.JLabel lblReligion;
    private javax.swing.JLabel lblSeccion;
    private javax.swing.JLabel lblSexo;
    private javax.swing.JLabel lblTelEmer;
    private javax.swing.JPanel panAdjunto;
    private javax.swing.JPanel panAutorizacion;
    private javax.swing.JPanel pnlEscondido;
    private javax.swing.JRadioButton rdAlergicoAliNo;
    private javax.swing.JRadioButton rdAlergicoAliSi;
    private javax.swing.JRadioButton rdAlergicoMedNo;
    private javax.swing.JRadioButton rdAlergicoMedSi;
    private javax.swing.JRadioButton rdComidaNo;
    private javax.swing.JRadioButton rdComidaSi;
    private javax.swing.JRadioButton rdF;
    private javax.swing.JRadioButton rdHermanoNo;
    private javax.swing.JRadioButton rdHermanoSi;
    private javax.swing.JRadioButton rdM;
    private javax.swing.JRadioButton rdMadreViveAluNo;
    private javax.swing.JRadioButton rdMadreViveAluSi;
    private javax.swing.JRadioButton rdMadreViveNo;
    private javax.swing.JRadioButton rdMadreViveSi;
    private javax.swing.JRadioButton rdPadreViveAluNo;
    private javax.swing.JRadioButton rdPadreViveAluSi;
    private javax.swing.JRadioButton rdPadreViveNo;
    private javax.swing.JRadioButton rdPadreViveSi;
    private javax.swing.JTabbedPane tbdPane;
    private javax.swing.JTextField txtAlimento;
    private javax.swing.JTextField txtAluTel;
    private javax.swing.JTextField txtApeM;
    private javax.swing.JTextField txtApeP;
    private javax.swing.JTextField txtAutDni;
    private javax.swing.JTextField txtAutNomb;
    private javax.swing.JTextField txtAutParentesco;
    private javax.swing.JTextField txtAutTelefono;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextArea txtDomicilio;
    private javax.swing.JFormattedTextField txtEdad;
    private javax.swing.JTextField txtEmerParentesco;
    private javax.swing.JTextField txtEmergencia;
    private com.toedter.calendar.JDateChooser txtFechaMat;
    private com.toedter.calendar.JDateChooser txtFechaNac;
    private javax.swing.JTextField txtHermanoEdad;
    private javax.swing.JTextField txtInstrumento;
    private javax.swing.JTextField txtLugarNac;
    private javax.swing.JTextField txtLugarOcupa;
    private javax.swing.JTextField txtMadreApeM;
    private javax.swing.JTextField txtMadreApeP;
    private javax.swing.JTextField txtMadreCentroLab;
    private javax.swing.JTextField txtMadreDni;
    private javax.swing.JTextField txtMadreEmail;
    private javax.swing.JComboBox<String> txtMadreEstadoCiv;
    private com.toedter.calendar.JDateChooser txtMadreFecNac;
    private javax.swing.JTextField txtMadreGradoI;
    private javax.swing.JTextField txtMadreNombre;
    private javax.swing.JTextField txtMadreOcu;
    private javax.swing.JTextField txtMadreTelCel1;
    private javax.swing.JTextField txtMadreTelCel2;
    private javax.swing.JTextField txtMedicamento;
    private javax.swing.JTextArea txtMotivo;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtOtro;
    private javax.swing.JTextField txtPadreApeM;
    private javax.swing.JTextField txtPadreApeP;
    private javax.swing.JTextField txtPadreCentroLab;
    private javax.swing.JTextField txtPadreDni;
    private javax.swing.JTextField txtPadreEmail;
    private javax.swing.JComboBox<String> txtPadreEstadoCiv;
    private com.toedter.calendar.JDateChooser txtPadreFecNac;
    private javax.swing.JTextField txtPadreGradoI;
    private javax.swing.JTextField txtPadreNombre;
    private javax.swing.JTextField txtPadreOcu;
    private javax.swing.JTextField txtPadreTelCel1;
    private javax.swing.JTextField txtPadreTelCel2;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JTextField txtReligion;
    private javax.swing.JTextField txtTalla;
    private javax.swing.JTextField txtTelEmer;
    // End of variables declaration//GEN-END:variables
}
